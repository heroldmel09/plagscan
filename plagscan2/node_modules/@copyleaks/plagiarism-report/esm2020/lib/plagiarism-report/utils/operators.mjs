import { filter, scan, distinctUntilChanged } from 'rxjs/operators';
import deepEqual from 'deep-equal';
/**
 * An rxjs operator that filters any value that is evaluated to true.
 */
export const truthy = () => filter(value => !!value);
/**
 * An rxjs operator that filters any value that is evaluated to false.
 */
export const falsey = () => filter(value => !value);
/**
 * An rxjs operator that filters any array that has one or more elements.
 */
export const notEmpty = () => filter(value => !!value.length);
/**
 * An rxjs operator that will accumulate items to an array
 */
export const accumulate = () => scan((acc, curr) => acc.concat(curr), []);
/**
 * An rxjs operator that will filter deeply equal sequential items
 */
export const distinct = () => distinctUntilChanged(deepEqual);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoib3BlcmF0b3JzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvcGxhZ2lhcmlzbS1yZXBvcnQvc3JjL2xpYi9wbGFnaWFyaXNtLXJlcG9ydC91dGlscy9vcGVyYXRvcnMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLE1BQU0sRUFBRSxJQUFJLEVBQUUsb0JBQW9CLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUNwRSxPQUFPLFNBQVMsTUFBTSxZQUFZLENBQUM7QUFFbkM7O0dBRUc7QUFDSCxNQUFNLENBQUMsTUFBTSxNQUFNLEdBQUcsR0FBTSxFQUFFLENBQUMsTUFBTSxDQUFJLEtBQUssQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDO0FBRTNEOztHQUVHO0FBQ0gsTUFBTSxDQUFDLE1BQU0sTUFBTSxHQUFHLEdBQU0sRUFBRSxDQUFDLE1BQU0sQ0FBSSxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUM7QUFFMUQ7O0dBRUc7QUFDSCxNQUFNLENBQUMsTUFBTSxRQUFRLEdBQUcsR0FBaUMsRUFBRSxDQUFDLE1BQU0sQ0FBSSxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLENBQUM7QUFFL0Y7O0dBRUc7QUFDSCxNQUFNLENBQUMsTUFBTSxVQUFVLEdBQUcsR0FBTSxFQUFFLENBQUMsSUFBSSxDQUFTLENBQUMsR0FBUSxFQUFFLElBQWEsRUFBRSxFQUFFLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQztBQUVuRzs7R0FFRztBQUNILE1BQU0sQ0FBQyxNQUFNLFFBQVEsR0FBRyxHQUFNLEVBQUUsQ0FBQyxvQkFBb0IsQ0FBSSxTQUFTLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGZpbHRlciwgc2NhbiwgZGlzdGluY3RVbnRpbENoYW5nZWQgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5pbXBvcnQgZGVlcEVxdWFsIGZyb20gJ2RlZXAtZXF1YWwnO1xuXG4vKipcbiAqIEFuIHJ4anMgb3BlcmF0b3IgdGhhdCBmaWx0ZXJzIGFueSB2YWx1ZSB0aGF0IGlzIGV2YWx1YXRlZCB0byB0cnVlLlxuICovXG5leHBvcnQgY29uc3QgdHJ1dGh5ID0gPFQ+KCkgPT4gZmlsdGVyPFQ+KHZhbHVlID0+ICEhdmFsdWUpO1xuXG4vKipcbiAqIEFuIHJ4anMgb3BlcmF0b3IgdGhhdCBmaWx0ZXJzIGFueSB2YWx1ZSB0aGF0IGlzIGV2YWx1YXRlZCB0byBmYWxzZS5cbiAqL1xuZXhwb3J0IGNvbnN0IGZhbHNleSA9IDxUPigpID0+IGZpbHRlcjxUPih2YWx1ZSA9PiAhdmFsdWUpO1xuXG4vKipcbiAqIEFuIHJ4anMgb3BlcmF0b3IgdGhhdCBmaWx0ZXJzIGFueSBhcnJheSB0aGF0IGhhcyBvbmUgb3IgbW9yZSBlbGVtZW50cy5cbiAqL1xuZXhwb3J0IGNvbnN0IG5vdEVtcHR5ID0gPFQgZXh0ZW5kcyB7IGxlbmd0aDogbnVtYmVyIH0+KCkgPT4gZmlsdGVyPFQ+KHZhbHVlID0+ICEhdmFsdWUubGVuZ3RoKTtcblxuLyoqXG4gKiBBbiByeGpzIG9wZXJhdG9yIHRoYXQgd2lsbCBhY2N1bXVsYXRlIGl0ZW1zIHRvIGFuIGFycmF5XG4gKi9cbmV4cG9ydCBjb25zdCBhY2N1bXVsYXRlID0gPFQ+KCkgPT4gc2NhbjxULCBUW10+KChhY2M6IFRbXSwgY3VycjogVCB8IFRbXSkgPT4gYWNjLmNvbmNhdChjdXJyKSwgW10pO1xuXG4vKipcbiAqIEFuIHJ4anMgb3BlcmF0b3IgdGhhdCB3aWxsIGZpbHRlciBkZWVwbHkgZXF1YWwgc2VxdWVudGlhbCBpdGVtc1xuICovXG5leHBvcnQgY29uc3QgZGlzdGluY3QgPSA8VD4oKSA9PiBkaXN0aW5jdFVudGlsQ2hhbmdlZDxUPihkZWVwRXF1YWwpO1xuIl19