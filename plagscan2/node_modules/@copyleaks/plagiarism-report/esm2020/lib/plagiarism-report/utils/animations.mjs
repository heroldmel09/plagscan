import { animate, animateChild, group, query, state, style, transition, trigger, stagger } from '@angular/animations';
/** animation for fading element ina and out */
export const fadeIn = trigger('fade', [
    transition(':enter', [
        style({ opacity: 0 }),
        group([animate(200, style({ opacity: 1 })), query('@fade', animateChild(), { optional: true })]),
    ]),
    state(':leave', style({ display: 'none' })),
]);
/** The animation used to transition between one-to-many and one-to-one views  */
export const expandAnimation = trigger('expandRight', [
    state('one-to-many', style({
        maxWidth: '30%',
    })),
    state('one-to-one', style({
        maxWidth: '50%',
    })),
    transition('one-to-one <=> one-to-many', [group([query('@fade', animateChild()), animate(200)])]),
]);
/** animation for fading list items in and out within a list */
export const listFade = trigger('listFade', [
    transition('* => *', [
        style({ opacity: 1 }),
        query(':enter', style({ opacity: 0 }), { optional: true }),
        query(':enter', stagger(500, [animate(300, style({ opacity: 1 }))]), {
            optional: true,
        }),
    ]),
]);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYW5pbWF0aW9ucy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL3BsYWdpYXJpc20tcmVwb3J0L3NyYy9saWIvcGxhZ2lhcmlzbS1yZXBvcnQvdXRpbHMvYW5pbWF0aW9ucy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsT0FBTyxFQUFFLFlBQVksRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsVUFBVSxFQUFFLE9BQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUV0SCwrQ0FBK0M7QUFDL0MsTUFBTSxDQUFDLE1BQU0sTUFBTSxHQUFHLE9BQU8sQ0FBQyxNQUFNLEVBQUU7SUFDckMsVUFBVSxDQUFDLFFBQVEsRUFBRTtRQUNwQixLQUFLLENBQUMsRUFBRSxPQUFPLEVBQUUsQ0FBQyxFQUFFLENBQUM7UUFDckIsS0FBSyxDQUFDLENBQUMsT0FBTyxDQUFDLEdBQUcsRUFBRSxLQUFLLENBQUMsRUFBRSxPQUFPLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLEtBQUssQ0FBQyxPQUFPLEVBQUUsWUFBWSxFQUFFLEVBQUUsRUFBRSxRQUFRLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQyxDQUFDO0tBQ2hHLENBQUM7SUFDRixLQUFLLENBQUMsUUFBUSxFQUFFLEtBQUssQ0FBQyxFQUFFLE9BQU8sRUFBRSxNQUFNLEVBQUUsQ0FBQyxDQUFDO0NBQzNDLENBQUMsQ0FBQztBQUVILGlGQUFpRjtBQUNqRixNQUFNLENBQUMsTUFBTSxlQUFlLEdBQUcsT0FBTyxDQUFDLGFBQWEsRUFBRTtJQUNyRCxLQUFLLENBQ0osYUFBYSxFQUNiLEtBQUssQ0FBQztRQUNMLFFBQVEsRUFBRSxLQUFLO0tBQ2YsQ0FBQyxDQUNGO0lBQ0QsS0FBSyxDQUNKLFlBQVksRUFDWixLQUFLLENBQUM7UUFDTCxRQUFRLEVBQUUsS0FBSztLQUNmLENBQUMsQ0FDRjtJQUNELFVBQVUsQ0FBQyw0QkFBNEIsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLEtBQUssQ0FBQyxPQUFPLEVBQUUsWUFBWSxFQUFFLENBQUMsRUFBRSxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7Q0FDakcsQ0FBQyxDQUFDO0FBRUgsK0RBQStEO0FBQy9ELE1BQU0sQ0FBQyxNQUFNLFFBQVEsR0FBRyxPQUFPLENBQUMsVUFBVSxFQUFFO0lBQzNDLFVBQVUsQ0FBQyxRQUFRLEVBQUU7UUFDcEIsS0FBSyxDQUFDLEVBQUUsT0FBTyxFQUFFLENBQUMsRUFBRSxDQUFDO1FBQ3JCLEtBQUssQ0FBQyxRQUFRLEVBQUUsS0FBSyxDQUFDLEVBQUUsT0FBTyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRSxRQUFRLEVBQUUsSUFBSSxFQUFFLENBQUM7UUFDMUQsS0FBSyxDQUFDLFFBQVEsRUFBRSxPQUFPLENBQUMsR0FBRyxFQUFFLENBQUMsT0FBTyxDQUFDLEdBQUcsRUFBRSxLQUFLLENBQUMsRUFBRSxPQUFPLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRTtZQUNwRSxRQUFRLEVBQUUsSUFBSTtTQUNkLENBQUM7S0FDRixDQUFDO0NBQ0YsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgYW5pbWF0ZSwgYW5pbWF0ZUNoaWxkLCBncm91cCwgcXVlcnksIHN0YXRlLCBzdHlsZSwgdHJhbnNpdGlvbiwgdHJpZ2dlciwgc3RhZ2dlciB9IGZyb20gJ0Bhbmd1bGFyL2FuaW1hdGlvbnMnO1xuXG4vKiogYW5pbWF0aW9uIGZvciBmYWRpbmcgZWxlbWVudCBpbmEgYW5kIG91dCAqL1xuZXhwb3J0IGNvbnN0IGZhZGVJbiA9IHRyaWdnZXIoJ2ZhZGUnLCBbXG5cdHRyYW5zaXRpb24oJzplbnRlcicsIFtcblx0XHRzdHlsZSh7IG9wYWNpdHk6IDAgfSksXG5cdFx0Z3JvdXAoW2FuaW1hdGUoMjAwLCBzdHlsZSh7IG9wYWNpdHk6IDEgfSkpLCBxdWVyeSgnQGZhZGUnLCBhbmltYXRlQ2hpbGQoKSwgeyBvcHRpb25hbDogdHJ1ZSB9KV0pLFxuXHRdKSxcblx0c3RhdGUoJzpsZWF2ZScsIHN0eWxlKHsgZGlzcGxheTogJ25vbmUnIH0pKSxcbl0pO1xuXG4vKiogVGhlIGFuaW1hdGlvbiB1c2VkIHRvIHRyYW5zaXRpb24gYmV0d2VlbiBvbmUtdG8tbWFueSBhbmQgb25lLXRvLW9uZSB2aWV3cyAgKi9cbmV4cG9ydCBjb25zdCBleHBhbmRBbmltYXRpb24gPSB0cmlnZ2VyKCdleHBhbmRSaWdodCcsIFtcblx0c3RhdGUoXG5cdFx0J29uZS10by1tYW55Jyxcblx0XHRzdHlsZSh7XG5cdFx0XHRtYXhXaWR0aDogJzMwJScsXG5cdFx0fSlcblx0KSxcblx0c3RhdGUoXG5cdFx0J29uZS10by1vbmUnLFxuXHRcdHN0eWxlKHtcblx0XHRcdG1heFdpZHRoOiAnNTAlJyxcblx0XHR9KVxuXHQpLFxuXHR0cmFuc2l0aW9uKCdvbmUtdG8tb25lIDw9PiBvbmUtdG8tbWFueScsIFtncm91cChbcXVlcnkoJ0BmYWRlJywgYW5pbWF0ZUNoaWxkKCkpLCBhbmltYXRlKDIwMCldKV0pLFxuXSk7XG5cbi8qKiBhbmltYXRpb24gZm9yIGZhZGluZyBsaXN0IGl0ZW1zIGluIGFuZCBvdXQgd2l0aGluIGEgbGlzdCAqL1xuZXhwb3J0IGNvbnN0IGxpc3RGYWRlID0gdHJpZ2dlcignbGlzdEZhZGUnLCBbXG5cdHRyYW5zaXRpb24oJyogPT4gKicsIFtcblx0XHRzdHlsZSh7IG9wYWNpdHk6IDEgfSksXG5cdFx0cXVlcnkoJzplbnRlcicsIHN0eWxlKHsgb3BhY2l0eTogMCB9KSwgeyBvcHRpb25hbDogdHJ1ZSB9KSxcblx0XHRxdWVyeSgnOmVudGVyJywgc3RhZ2dlcig1MDAsIFthbmltYXRlKDMwMCwgc3R5bGUoeyBvcGFjaXR5OiAxIH0pKV0pLCB7XG5cdFx0XHRvcHRpb25hbDogdHJ1ZSxcblx0XHR9KSxcblx0XSksXG5dKTtcbiJdfQ==