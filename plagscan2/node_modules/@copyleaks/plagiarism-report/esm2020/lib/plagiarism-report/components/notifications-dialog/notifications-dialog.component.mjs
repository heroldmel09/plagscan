import { Component, Inject } from '@angular/core';
import { untilDestroy } from '../../../shared/operators/untilDestroy';
import { filter } from 'rxjs/operators';
import { MAT_DIALOG_DATA } from '@angular/material/dialog';
import * as i0 from "@angular/core";
import * as i1 from "@angular/material/dialog";
import * as i2 from "../alert-card/alert-card.component";
import * as i3 from "@angular/material/button";
import * as i4 from "@angular/flex-layout/flex";
import * as i5 from "@angular/common";
import * as i6 from "../../services/report.service";
export class NotificationsDialogComponent {
    constructor(matDialog, reportService) {
        this.matDialog = matDialog;
        this.reportService = reportService;
    }
    /**
     * Life-cycle method
     */
    ngOnInit() {
        this.reportService.completeResult$
            .pipe(untilDestroy(this), filter(c => !!c.notifications && !!c.notifications.alerts && !!c.notifications.alerts.length))
            .subscribe(completeResult => {
            this.notification = completeResult.notifications;
        });
    }
    /**
     * close dialog
     */
    closeDialog() {
        this.matDialog.closeAll();
    }
    /**
     * Life-cycle method
     * empty for `untilDestroy` rxjs operator
     */
    ngOnDestroy() { }
}
NotificationsDialogComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.3", ngImport: i0, type: NotificationsDialogComponent, deps: [{ token: i1.MatDialog }, { token: MAT_DIALOG_DATA }], target: i0.ɵɵFactoryTarget.Component });
NotificationsDialogComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.3.3", type: NotificationsDialogComponent, selector: "cr-notifications-dialog", ngImport: i0, template: "<div class=\"header\" mat-dialog-title>\n\t<h3>Alerts</h3>\n</div>\n<mat-dialog-content>\n\t<div fxLayout=\"column\" style=\"padding-bottom: 5px\" fxLayoutGap=\"20px\">\n\t\t<ng-container *ngFor=\"let alert of notification?.alerts\">\n\t\t\t<cr-alert-card [alert]=\"alert\" (afterToggleError)=\"closeDialog()\"></cr-alert-card>\n\t\t</ng-container>\n\t</div>\n</mat-dialog-content>\n\n<mat-dialog-actions align=\"center\">\n\t<button mat-button mat-dialog-close>Close</button>\n</mat-dialog-actions>\n", styles: [".header h3{margin-top:0;margin-bottom:0}.header button{margin-top:-9px;margin-right:-7px}\n"], components: [{ type: i2.AlertCardComponent, selector: "cr-alert-card", inputs: ["alert"], outputs: ["afterToggleError"] }, { type: i3.MatButton, selector: "button[mat-button], button[mat-raised-button], button[mat-icon-button],             button[mat-fab], button[mat-mini-fab], button[mat-stroked-button],             button[mat-flat-button]", inputs: ["disabled", "disableRipple", "color"], exportAs: ["matButton"] }], directives: [{ type: i1.MatDialogTitle, selector: "[mat-dialog-title], [matDialogTitle]", inputs: ["id"], exportAs: ["matDialogTitle"] }, { type: i1.MatDialogContent, selector: "[mat-dialog-content], mat-dialog-content, [matDialogContent]" }, { type: i4.DefaultLayoutDirective, selector: "  [fxLayout], [fxLayout.xs], [fxLayout.sm], [fxLayout.md],  [fxLayout.lg], [fxLayout.xl], [fxLayout.lt-sm], [fxLayout.lt-md],  [fxLayout.lt-lg], [fxLayout.lt-xl], [fxLayout.gt-xs], [fxLayout.gt-sm],  [fxLayout.gt-md], [fxLayout.gt-lg]", inputs: ["fxLayout", "fxLayout.xs", "fxLayout.sm", "fxLayout.md", "fxLayout.lg", "fxLayout.xl", "fxLayout.lt-sm", "fxLayout.lt-md", "fxLayout.lt-lg", "fxLayout.lt-xl", "fxLayout.gt-xs", "fxLayout.gt-sm", "fxLayout.gt-md", "fxLayout.gt-lg"] }, { type: i4.DefaultLayoutGapDirective, selector: "  [fxLayoutGap], [fxLayoutGap.xs], [fxLayoutGap.sm], [fxLayoutGap.md],  [fxLayoutGap.lg], [fxLayoutGap.xl], [fxLayoutGap.lt-sm], [fxLayoutGap.lt-md],  [fxLayoutGap.lt-lg], [fxLayoutGap.lt-xl], [fxLayoutGap.gt-xs], [fxLayoutGap.gt-sm],  [fxLayoutGap.gt-md], [fxLayoutGap.gt-lg]", inputs: ["fxLayoutGap", "fxLayoutGap.xs", "fxLayoutGap.sm", "fxLayoutGap.md", "fxLayoutGap.lg", "fxLayoutGap.xl", "fxLayoutGap.lt-sm", "fxLayoutGap.lt-md", "fxLayoutGap.lt-lg", "fxLayoutGap.lt-xl", "fxLayoutGap.gt-xs", "fxLayoutGap.gt-sm", "fxLayoutGap.gt-md", "fxLayoutGap.gt-lg"] }, { type: i5.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i1.MatDialogActions, selector: "[mat-dialog-actions], mat-dialog-actions, [matDialogActions]" }, { type: i1.MatDialogClose, selector: "[mat-dialog-close], [matDialogClose]", inputs: ["aria-label", "type", "mat-dialog-close", "matDialogClose"], exportAs: ["matDialogClose"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.3", ngImport: i0, type: NotificationsDialogComponent, decorators: [{
            type: Component,
            args: [{ selector: 'cr-notifications-dialog', template: "<div class=\"header\" mat-dialog-title>\n\t<h3>Alerts</h3>\n</div>\n<mat-dialog-content>\n\t<div fxLayout=\"column\" style=\"padding-bottom: 5px\" fxLayoutGap=\"20px\">\n\t\t<ng-container *ngFor=\"let alert of notification?.alerts\">\n\t\t\t<cr-alert-card [alert]=\"alert\" (afterToggleError)=\"closeDialog()\"></cr-alert-card>\n\t\t</ng-container>\n\t</div>\n</mat-dialog-content>\n\n<mat-dialog-actions align=\"center\">\n\t<button mat-button mat-dialog-close>Close</button>\n</mat-dialog-actions>\n", styles: [".header h3{margin-top:0;margin-bottom:0}.header button{margin-top:-9px;margin-right:-7px}\n"] }]
        }], ctorParameters: function () { return [{ type: i1.MatDialog }, { type: i6.ReportService, decorators: [{
                    type: Inject,
                    args: [MAT_DIALOG_DATA]
                }] }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibm90aWZpY2F0aW9ucy1kaWFsb2cuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvcGxhZ2lhcmlzbS1yZXBvcnQvc3JjL2xpYi9wbGFnaWFyaXNtLXJlcG9ydC9jb21wb25lbnRzL25vdGlmaWNhdGlvbnMtZGlhbG9nL25vdGlmaWNhdGlvbnMtZGlhbG9nLmNvbXBvbmVudC50cyIsIi4uLy4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL3BsYWdpYXJpc20tcmVwb3J0L3NyYy9saWIvcGxhZ2lhcmlzbS1yZXBvcnQvY29tcG9uZW50cy9ub3RpZmljYXRpb25zLWRpYWxvZy9ub3RpZmljYXRpb25zLWRpYWxvZy5jb21wb25lbnQuaHRtbCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFxQixNQUFNLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFHckUsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLHdDQUF3QyxDQUFDO0FBQ3RFLE9BQU8sRUFBRSxNQUFNLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUN4QyxPQUFPLEVBQWEsZUFBZSxFQUFFLE1BQU0sMEJBQTBCLENBQUM7Ozs7Ozs7O0FBT3RFLE1BQU0sT0FBTyw0QkFBNEI7SUFFeEMsWUFBb0IsU0FBb0IsRUFBbUMsYUFBNEI7UUFBbkYsY0FBUyxHQUFULFNBQVMsQ0FBVztRQUFtQyxrQkFBYSxHQUFiLGFBQWEsQ0FBZTtJQUFHLENBQUM7SUFDM0c7O09BRUc7SUFDSCxRQUFRO1FBQ1AsSUFBSSxDQUFDLGFBQWEsQ0FBQyxlQUFlO2FBQ2hDLElBQUksQ0FDSixZQUFZLENBQUMsSUFBSSxDQUFDLEVBQ2xCLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsYUFBYSxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsYUFBYSxDQUFDLE1BQU0sSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLGFBQWEsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQzdGO2FBQ0EsU0FBUyxDQUFDLGNBQWMsQ0FBQyxFQUFFO1lBQzNCLElBQUksQ0FBQyxZQUFZLEdBQUcsY0FBYyxDQUFDLGFBQWEsQ0FBQztRQUNsRCxDQUFDLENBQUMsQ0FBQztJQUNMLENBQUM7SUFDRDs7T0FFRztJQUNILFdBQVc7UUFDVixJQUFJLENBQUMsU0FBUyxDQUFDLFFBQVEsRUFBRSxDQUFDO0lBQzNCLENBQUM7SUFDRDs7O09BR0c7SUFDSCxXQUFXLEtBQUksQ0FBQzs7eUhBMUJKLDRCQUE0QiwyQ0FFVSxlQUFlOzZHQUZyRCw0QkFBNEIsK0RDWnpDLHVmQWNBOzJGREZhLDRCQUE0QjtrQkFMeEMsU0FBUzsrQkFDQyx5QkFBeUI7OzBCQU1RLE1BQU07MkJBQUMsZUFBZSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCwgT25Jbml0LCBPbkRlc3Ryb3ksIEluamVjdCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQ29tcGxldGVSZXN1bHROb3RpZmljYXRpb24gfSBmcm9tICcuLi8uLi9tb2RlbHMnO1xuaW1wb3J0IHsgUmVwb3J0U2VydmljZSB9IGZyb20gJy4uLy4uL3NlcnZpY2VzL3JlcG9ydC5zZXJ2aWNlJztcbmltcG9ydCB7IHVudGlsRGVzdHJveSB9IGZyb20gJy4uLy4uLy4uL3NoYXJlZC9vcGVyYXRvcnMvdW50aWxEZXN0cm95JztcbmltcG9ydCB7IGZpbHRlciB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcbmltcG9ydCB7IE1hdERpYWxvZywgTUFUX0RJQUxPR19EQVRBIH0gZnJvbSAnQGFuZ3VsYXIvbWF0ZXJpYWwvZGlhbG9nJztcblxuQENvbXBvbmVudCh7XG5cdHNlbGVjdG9yOiAnY3Itbm90aWZpY2F0aW9ucy1kaWFsb2cnLFxuXHR0ZW1wbGF0ZVVybDogJy4vbm90aWZpY2F0aW9ucy1kaWFsb2cuY29tcG9uZW50Lmh0bWwnLFxuXHRzdHlsZVVybHM6IFsnLi9ub3RpZmljYXRpb25zLWRpYWxvZy5jb21wb25lbnQuc2NzcyddLFxufSlcbmV4cG9ydCBjbGFzcyBOb3RpZmljYXRpb25zRGlhbG9nQ29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0LCBPbkRlc3Ryb3kge1xuXHRub3RpZmljYXRpb246IENvbXBsZXRlUmVzdWx0Tm90aWZpY2F0aW9uO1xuXHRjb25zdHJ1Y3Rvcihwcml2YXRlIG1hdERpYWxvZzogTWF0RGlhbG9nLCBASW5qZWN0KE1BVF9ESUFMT0dfREFUQSkgcHJpdmF0ZSByZXBvcnRTZXJ2aWNlOiBSZXBvcnRTZXJ2aWNlKSB7fVxuXHQvKipcblx0ICogTGlmZS1jeWNsZSBtZXRob2Rcblx0ICovXG5cdG5nT25Jbml0KCkge1xuXHRcdHRoaXMucmVwb3J0U2VydmljZS5jb21wbGV0ZVJlc3VsdCRcblx0XHRcdC5waXBlKFxuXHRcdFx0XHR1bnRpbERlc3Ryb3kodGhpcyksXG5cdFx0XHRcdGZpbHRlcihjID0+ICEhYy5ub3RpZmljYXRpb25zICYmICEhYy5ub3RpZmljYXRpb25zLmFsZXJ0cyAmJiAhIWMubm90aWZpY2F0aW9ucy5hbGVydHMubGVuZ3RoKVxuXHRcdFx0KVxuXHRcdFx0LnN1YnNjcmliZShjb21wbGV0ZVJlc3VsdCA9PiB7XG5cdFx0XHRcdHRoaXMubm90aWZpY2F0aW9uID0gY29tcGxldGVSZXN1bHQubm90aWZpY2F0aW9ucztcblx0XHRcdH0pO1xuXHR9XG5cdC8qKlxuXHQgKiBjbG9zZSBkaWFsb2dcblx0ICovXG5cdGNsb3NlRGlhbG9nKCkge1xuXHRcdHRoaXMubWF0RGlhbG9nLmNsb3NlQWxsKCk7XG5cdH1cblx0LyoqXG5cdCAqIExpZmUtY3ljbGUgbWV0aG9kXG5cdCAqIGVtcHR5IGZvciBgdW50aWxEZXN0cm95YCByeGpzIG9wZXJhdG9yXG5cdCAqL1xuXHRuZ09uRGVzdHJveSgpIHt9XG59XG4iLCI8ZGl2IGNsYXNzPVwiaGVhZGVyXCIgbWF0LWRpYWxvZy10aXRsZT5cblx0PGgzPkFsZXJ0czwvaDM+XG48L2Rpdj5cbjxtYXQtZGlhbG9nLWNvbnRlbnQ+XG5cdDxkaXYgZnhMYXlvdXQ9XCJjb2x1bW5cIiBzdHlsZT1cInBhZGRpbmctYm90dG9tOiA1cHhcIiBmeExheW91dEdhcD1cIjIwcHhcIj5cblx0XHQ8bmctY29udGFpbmVyICpuZ0Zvcj1cImxldCBhbGVydCBvZiBub3RpZmljYXRpb24/LmFsZXJ0c1wiPlxuXHRcdFx0PGNyLWFsZXJ0LWNhcmQgW2FsZXJ0XT1cImFsZXJ0XCIgKGFmdGVyVG9nZ2xlRXJyb3IpPVwiY2xvc2VEaWFsb2coKVwiPjwvY3ItYWxlcnQtY2FyZD5cblx0XHQ8L25nLWNvbnRhaW5lcj5cblx0PC9kaXY+XG48L21hdC1kaWFsb2ctY29udGVudD5cblxuPG1hdC1kaWFsb2ctYWN0aW9ucyBhbGlnbj1cImNlbnRlclwiPlxuXHQ8YnV0dG9uIG1hdC1idXR0b24gbWF0LWRpYWxvZy1jbG9zZT5DbG9zZTwvYnV0dG9uPlxuPC9tYXQtZGlhbG9nLWFjdGlvbnM+XG4iXX0=