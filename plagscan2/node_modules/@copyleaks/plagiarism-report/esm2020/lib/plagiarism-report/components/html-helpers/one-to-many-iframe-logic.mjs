/**
 * document ready event handler
 * @param fn the callback to execute when the document is ready
 */
function onDocumentReady(fn) {
    if (document.readyState === 'complete' || document.readyState === 'interactive') {
        setTimeout(fn, 1);
    }
    else {
        document.addEventListener('DOMContentLoaded', fn);
    }
}
/**
 * Callback to execute when the document is ready
 */
function ready() {
    let current;
    let matches;
    let isPdf = document.querySelector('meta[content="pdf2htmlEX"]') !== null;
    window.addEventListener('message', onMessageFromParent);
    init();
    /**
     * Initialization code, will execute before emitting iframe-ready event
     */
    function init() {
        Array.from(document.links).forEach(x => {
            x.href = 'javascript:void(0)';
            x.title = 'disable link';
        }); // disable links
        matches = Array.from(document.querySelectorAll('span[match]'));
        matches.forEach(elem => {
            elem.addEventListener('click', onMatchClick);
            elem.addEventListener('mouseenter', onMatchHover);
            elem.addEventListener('mouseleave', onMatchHover);
        });
        document.querySelectorAll('span[exclude-partial-scan]').forEach(elem => {
            elem.addEventListener('click', () => messageParent({ type: 'upgrade-plan' }));
            elem.addEventListener('mouseenter', onMatchHover);
            elem.addEventListener('mouseleave', onMatchHover);
        });
    }
    /**
     * Message event handler
     */
    function onMessageFromParent(nativeEvent) {
        if (nativeEvent.source !== window.parent) {
            return;
        }
        const event = nativeEvent.data;
        switch (event.type) {
            case 'match-select':
                handleBroadcastMatchSelect(event);
                break;
            case 'match-jump':
                onMatchJump(event);
                break;
            default:
                console.error('unknown event in frame', nativeEvent);
        }
    }
    /**
     * handle a broadcasted `match-select` event
     * @param event the match select event
     */
    function handleBroadcastMatchSelect(event) {
        const elem = document.querySelector(`span[match][data-index='${event.index}']`);
        if (!elem && event.index !== -1) {
            messageParent({ type: 'match-warn' });
        }
        onMatchSelect(elem, true); // should not rebroadcast
    }
    /**
     * Event handler for a `MatchJumpEvent` that is fired when the user clicks the
     * go to next/prev match buttons
     */
    function onMatchJump(event) {
        if (!current) {
            onMatchSelect(matches[0]);
            return;
        }
        const first = matches[0];
        const last = matches[matches.length - 1];
        if ((current === first && !event.forward) || (current === last && event.forward)) {
            return;
        }
        const currentIndex = matches.indexOf(current);
        const nextIndex = currentIndex + (event.forward ? 1 : -1);
        onMatchSelect(matches[nextIndex]);
    }
    /**
     * Emits an event to the parent window using PostMessage API
     * @param event the event content to emit
     */
    function messageParent(event) {
        window.parent.postMessage(event, '*');
    }
    /**
     * Event handler for the default click event of a match
     * @param event the default mouse event object
     */
    function onMatchClick(event) {
        const elem = event.target;
        onMatchSelect(elem);
    }
    /**
     * Execute the logic of a match selection.
     * - highlight `elem` and message the parent window about it
     * - if an element is allready highlighted turn it off and highlight `elem`
     * @param elem the selected element
     */
    function onMatchSelect(elem, broadcast = false) {
        if (!broadcast && current === elem) {
            current.toggleAttribute('on', false);
            current = null;
            messageParent({ type: 'match-select', index: -1 });
            return;
        }
        if (!broadcast && current) {
            current.toggleAttribute('on', false);
        }
        current = elem;
        current.toggleAttribute('on', true);
        if (isPdf) {
            elem.closest('.pc').classList.add('opened');
        }
        current.scrollIntoView({ behavior: 'smooth', block: 'nearest' });
        messageParent({ type: 'match-select', index: +current.dataset.index });
    }
    /**
     * Event handler for the default `mouseenter` or `mouseleave` event
     * @param event the default mouse event object
     */
    function onMatchHover(event) {
        const elem = event?.target;
        elem?.classList?.toggle('hover');
    }
}
export default `(${onDocumentReady.toString()})(${ready.toString()})`;
//# sourceMappingURL=data:application/json;base64,