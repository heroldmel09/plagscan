import { HostBinding, HostListener, Directive } from '@angular/core';
import { ExcludeReason, MatchType } from '../../models';
import { EXCLUDE_MESSAGE } from '../../utils/constants';
import iframeStyle from './iframe-styles';
import * as i0 from "@angular/core";
import * as i1 from "../../services/report.service";
import * as i2 from "../../services/copyleaks-translate.service";
// tslint:disable-next-line: directive-class-suffix
export class HtmlHelperBase {
    constructor(renderer, element, reportService, translateService) {
        this.renderer = renderer;
        this.element = element;
        this.reportService = reportService;
        this.translateService = translateService;
        this.EXCLUDE_MESSAGE = EXCLUDE_MESSAGE;
        /** sets the seamsless attribute to the iframe */
        this.seamless = true;
        const css = renderer.createElement('style');
        css.textContent = iframeStyle;
        this.style = css.outerHTML;
        if (this.translateService) {
            const translations = this.translateService.translations;
            if (translations && translations.SCAN_SETTINGS && translations.SCAN_SETTINGS.OMITTED) {
                this.EXCLUDE_MESSAGE = {
                    1: translations.SCAN_SETTINGS.OMITTED.QUOTATIONS,
                    2: translations.SCAN_SETTINGS.OMITTED.REFERENCES,
                    5: translations.SCAN_SETTINGS.OMITTED.HTML_TEMPLATES,
                    6: translations.SCAN_SETTINGS.OMITTED.TABLES_OF_CONTENT,
                    7: translations.SCAN_SETTINGS.OMITTED.SOURCE_CODE_COMMENTS,
                    0: translations.SCAN_SETTINGS.OMITTED.SENSITIVE_DATA,
                    8: translations.SCAN_SETTINGS.OMITTED.PARTIAL_SCAN,
                    9: translations.SCAN_SETTINGS.OMITTED.CITATIONS,
                };
            }
        }
    }
    /**
     * Handles PostMessage events, making sure its from the correct iframe.
     * @param event the default PostMessage event
     */
    onFrameMessage(event) {
        const { source, data } = event;
        if (source !== this.frame) {
            return;
        }
        const pmevent = data;
        switch (pmevent.type) {
            case 'match-select':
                this.handleMatchSelect(pmevent);
                break;
            case 'upgrade-plan':
                this.handleUpgradePlanEvent();
                break;
            case 'match-warn':
                console.warn('match not found');
                break;
            default:
                console.error('unknown event', pmevent);
        }
    }
    /**
     * Handles the 'upgrade-plan' event
     */
    handleUpgradePlanEvent() {
        this.reportService.upgradePlanEvent();
    }
    get frame() {
        return this.element.nativeElement.contentWindow;
    }
    /**
     * Send a message to the iframe using PostMessage API
     * @param data the data to post
     */
    messageFrame(data) {
        this.frame && this.frame.postMessage(data, '*');
    }
    /**
     * Set the iframe srcdoc html to the given html string
     * @param html the html string
     */
    setHtml(html) {
        this.renderer.setAttribute(this.element.nativeElement, 'srcdoc', html + this.style + this.script);
    }
    /**
     * highlight a single match in the iframe
     * @param index the index of the match to mark
     */
    markSingleMatchInFrame(index) {
        this.messageFrame({ type: 'match-select', index });
    }
    /**
     * Render list of matches in the iframe's HTML
     * @param matches the matches to render
     */
    renderMatches(matches) {
        this.matches = matches;
        const html = matches.reduceRight((prev, curr, i) => {
            let slice = this.html?.substring(curr.start, curr.end);
            switch (curr.type) {
                case MatchType.excluded:
                    if (curr.reason === ExcludeReason.PartialScan) {
                        slice = `<span exclude-partial-scan data-type="${curr.type}" data-index="${i}" title="${this.EXCLUDE_MESSAGE[curr.reason]}">${slice}</span>`;
                    }
                    else {
                        slice = `<span exclude title="${this.EXCLUDE_MESSAGE[curr.reason]}">${slice}</span>`;
                    }
                    break;
                case MatchType.none:
                    break;
                default:
                    slice = `<span match data-type="${curr.type}" data-index="${i}" data-gid="${curr.gid}">${slice}</span>`;
                    break;
            }
            return slice ? slice?.concat(prev) : '';
        }, '');
        this.renderer.setAttribute(this.element.nativeElement, 'srcdoc', html + this.style + this.script);
    }
}
HtmlHelperBase.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.3", ngImport: i0, type: HtmlHelperBase, deps: [{ token: i0.Renderer2 }, { token: i0.ElementRef }, { token: i1.ReportService }, { token: i2.CopyleaksTranslateService }], target: i0.ɵɵFactoryTarget.Directive });
HtmlHelperBase.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "13.3.3", type: HtmlHelperBase, host: { listeners: { "window:message": "onFrameMessage($event)" }, properties: { "attr.seamless": "this.seamless" } }, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.3", ngImport: i0, type: HtmlHelperBase, decorators: [{
            type: Directive
        }], ctorParameters: function () { return [{ type: i0.Renderer2 }, { type: i0.ElementRef }, { type: i1.ReportService }, { type: i2.CopyleaksTranslateService }]; }, propDecorators: { seamless: [{
                type: HostBinding,
                args: ['attr.seamless']
            }], onFrameMessage: [{
                type: HostListener,
                args: ['window:message', ['$event']]
            }] } });
//# sourceMappingURL=data:application/json;base64,