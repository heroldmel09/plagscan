import { Component } from '@angular/core';
import { filter, map, withLatestFrom } from 'rxjs/operators';
import { untilDestroy } from '../../../shared/operators/untilDestroy';
import { MatchType } from '../../models';
import { findRespectiveStart } from '../../utils/match-helpers';
import { truthy } from '../../utils/operators';
import { HtmlHelperBase } from './HtmlHelperBase';
import iframeScript from './one-to-one-iframe-logic';
import * as i0 from "@angular/core";
import * as i1 from "../../services/highlight.service";
import * as i2 from "../../services/match.service";
import * as i3 from "../../services/report.service";
import * as i4 from "../../services/copyleaks-translate.service";
export class SourceHtmlHelperComponent extends HtmlHelperBase {
    constructor(renderer, element, highlightService, matchService, reportService, translateService) {
        super(renderer, element, reportService, translateService);
        this.highlightService = highlightService;
        this.matchService = matchService;
        const js = renderer.createElement('script');
        js.textContent = iframeScript;
        this.script = js.outerHTML;
    }
    /**
     * Handle `match-select` event
     * @param event the event object
     */
    handleMatchSelect(event) {
        this.highlightService.setSourceHtmlMatch(event.index !== -1 ? this.matches[event.index] : null);
    }
    /**
     * Life-cycle method
     * empty for `untilDestroy` rxjs operator
     */
    ngOnDestroy() { }
    /**
     * Life-cycle method
     * subscribe to:
     * - source and suspect html matches
     * - report metadata source and suspect objects
     * - viewmode changes
     * - jump events
     */
    ngOnInit() {
        const { source$, viewMode$, suspectResult$: suspect$, contentMode$ } = this.reportService;
        const { suspectHtml$, jump$, textMatchClick$ } = this.highlightService;
        const { sourceHtmlMatches$ } = this.matchService;
        source$.pipe(untilDestroy(this), truthy()).subscribe(source => {
            this.html = source.html && source.html.value;
            sourceHtmlMatches$.pipe(untilDestroy(this)).subscribe(matches => {
                this.renderMatches(matches);
            });
        });
        jump$
            .pipe(untilDestroy(this), withLatestFrom(viewMode$, contentMode$), filter(([, view, content]) => view === 'one-to-one' && content === 'html'))
            .subscribe(([forward]) => {
            this.messageFrame({ type: 'match-jump', forward });
        });
        textMatchClick$
            .pipe(untilDestroy(this), filter(ev => ev.origin === 'suspect' && ev.broadcast), map(ev => ev.elem), withLatestFrom(suspect$, sourceHtmlMatches$, contentMode$), filter(([, , matches, content]) => content === 'html' && !!matches))
            .subscribe(([elem, suspect, matches]) => {
            if (elem && suspect.result) {
                const comparison = suspect.result.html.comparison[MatchType[elem.match.type]];
                const [start] = findRespectiveStart(elem.match.start, comparison, false);
                const found = matches.findIndex(m => m.start === start);
                this.markSingleMatchInFrame(found);
            }
            else {
                this.markSingleMatchInFrame(-1);
            }
        });
        suspectHtml$
            .pipe(untilDestroy(this), withLatestFrom(suspect$, sourceHtmlMatches$, contentMode$), filter(([, , matches, content]) => content === 'html' && !!matches))
            .subscribe(([match, suspect, matches]) => {
            if (match && suspect && suspect.result) {
                const comparison = suspect.result.html.comparison[MatchType[match.type]];
                const [start] = findRespectiveStart(match.start, comparison, false);
                const found = matches.findIndex(m => m.start === start);
                this.markSingleMatchInFrame(found);
            }
            else {
                this.markSingleMatchInFrame(-1);
            }
        });
    }
}
SourceHtmlHelperComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.3", ngImport: i0, type: SourceHtmlHelperComponent, deps: [{ token: i0.Renderer2 }, { token: i0.ElementRef }, { token: i1.HighlightService }, { token: i2.MatchService }, { token: i3.ReportService }, { token: i4.CopyleaksTranslateService }], target: i0.ɵɵFactoryTarget.Component });
SourceHtmlHelperComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.3.3", type: SourceHtmlHelperComponent, selector: "iframe[cr-source-html-helper]", usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: ["#sidebar.opened+#page-container{left:0px!important}#page-container .c{pointer-events:none!important}#page-container .t{pointer-events:all!important}span[exclude]{font-style:italic;opacity:.75}span[exclude-partial-scan]{filter:blur(6px);cursor:pointer}span[match]{cursor:pointer;color:#000}span[match] a:link{pointer-events:none}span[ignored]{font-style:italic}span[match][data-type=\"0\"]{background-color:#f66}span[match][data-type=\"0\"].hover{background-color:#ff8080}span[match][data-type=\"1\"]{background-color:#ff9a9a}span[match][data-type=\"1\"].hover{background-color:#ffb4b4}span[match][data-type=\"2\"]{background-color:#ffd9b0}span[match][data-type=\"2\"].hover{background-color:#ffe5ca}span[match][on]{background-color:gold!important}\n"] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.3", ngImport: i0, type: SourceHtmlHelperComponent, decorators: [{
            type: Component,
            args: [{ selector: 'iframe[cr-source-html-helper]', template: '', styles: ["#sidebar.opened+#page-container{left:0px!important}#page-container .c{pointer-events:none!important}#page-container .t{pointer-events:all!important}span[exclude]{font-style:italic;opacity:.75}span[exclude-partial-scan]{filter:blur(6px);cursor:pointer}span[match]{cursor:pointer;color:#000}span[match] a:link{pointer-events:none}span[ignored]{font-style:italic}span[match][data-type=\"0\"]{background-color:#f66}span[match][data-type=\"0\"].hover{background-color:#ff8080}span[match][data-type=\"1\"]{background-color:#ff9a9a}span[match][data-type=\"1\"].hover{background-color:#ffb4b4}span[match][data-type=\"2\"]{background-color:#ffd9b0}span[match][data-type=\"2\"].hover{background-color:#ffe5ca}span[match][on]{background-color:gold!important}\n"] }]
        }], ctorParameters: function () { return [{ type: i0.Renderer2 }, { type: i0.ElementRef }, { type: i1.HighlightService }, { type: i2.MatchService }, { type: i3.ReportService }, { type: i4.CopyleaksTranslateService }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic291cmNlLWh0bWwtaGVscGVyLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL3BsYWdpYXJpc20tcmVwb3J0L3NyYy9saWIvcGxhZ2lhcmlzbS1yZXBvcnQvY29tcG9uZW50cy9odG1sLWhlbHBlcnMvc291cmNlLWh0bWwtaGVscGVyLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsU0FBUyxFQUE0QyxNQUFNLGVBQWUsQ0FBQztBQUNwRixPQUFPLEVBQUUsTUFBTSxFQUFFLEdBQUcsRUFBRSxjQUFjLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUM3RCxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sd0NBQXdDLENBQUM7QUFDdEUsT0FBTyxFQUFvQyxTQUFTLEVBQUUsTUFBTSxjQUFjLENBQUM7QUFJM0UsT0FBTyxFQUFFLG1CQUFtQixFQUFFLE1BQU0sMkJBQTJCLENBQUM7QUFDaEUsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLHVCQUF1QixDQUFDO0FBQy9DLE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQztBQUNsRCxPQUFPLFlBQVksTUFBTSwyQkFBMkIsQ0FBQzs7Ozs7O0FBUXJELE1BQU0sT0FBTyx5QkFBMEIsU0FBUSxjQUFjO0lBQzVELFlBQ0MsUUFBbUIsRUFDbkIsT0FBc0MsRUFDOUIsZ0JBQWtDLEVBQ2xDLFlBQTBCLEVBQ2xDLGFBQTRCLEVBQzVCLGdCQUEyQztRQUUzQyxLQUFLLENBQUMsUUFBUSxFQUFFLE9BQU8sRUFBRSxhQUFhLEVBQUUsZ0JBQWdCLENBQUMsQ0FBQztRQUxsRCxxQkFBZ0IsR0FBaEIsZ0JBQWdCLENBQWtCO1FBQ2xDLGlCQUFZLEdBQVosWUFBWSxDQUFjO1FBS2xDLE1BQU0sRUFBRSxHQUFHLFFBQVEsQ0FBQyxhQUFhLENBQUMsUUFBUSxDQUFzQixDQUFDO1FBQ2pFLEVBQUUsQ0FB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QUFFLENBQUMsQ0FBQyxDQUFDLEtBQUssS0FBSyxLQUFLLENBQUMsQ0FBQztnQkFDeEQsSUFBSSxDQUFDLHNCQUFzQixDQUFDLEtBQUssQ0FBQyxDQUFDO2FBQ25DO2lCQUFNO2dCQUNOLElBQUksQ0FBQyxzQkFBc0IsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO2FBQ2hDO1FBQ0YsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDOztzSEE3RlcseUJBQXlCOzBHQUF6Qix5QkFBeUIsNEZBSDNCLEVBQUU7MkZBR0EseUJBQXlCO2tCQUxyQyxTQUFTOytCQUNDLCtCQUErQixZQUMvQixFQUFFIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50LCBFbGVtZW50UmVmLCBPbkRlc3Ryb3ksIE9uSW5pdCwgUmVuZGVyZXIyIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBmaWx0ZXIsIG1hcCwgd2l0aExhdGVzdEZyb20gfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5pbXBvcnQgeyB1bnRpbERlc3Ryb3kgfSBmcm9tICcuLi8uLi8uLi9zaGFyZWQvb3BlcmF0b3JzL3VudGlsRGVzdHJveSc7XG5pbXBvcnQgeyBNYXRjaEp1bXBFdmVudCwgTWF0Y2hTZWxlY3RFdmVudCwgTWF0Y2hUeXBlIH0gZnJvbSAnLi4vLi4vbW9kZWxzJztcbmltcG9ydCB7IEhpZ2hsaWdodFNlcnZpY2UgfSBmcm9tICcuLi8uLi9zZXJ2aWNlcy9oaWdobGlnaHQuc2VydmljZSc7XG5pbXBvcnQgeyBNYXRjaFNlcnZpY2UgfSBmcm9tICcuLi8uLi9zZXJ2aWNlcy9tYXRjaC5zZXJ2aWNlJztcbmltcG9ydCB7IFJlcG9ydFNlcnZpY2UgfSBmcm9tICcuLi8uLi9zZXJ2aWNlcy9yZXBvcnQuc2VydmljZSc7XG5pbXBvcnQgeyBmaW5kUmVzcGVjdGl2ZVN0YXJ0IH0gZnJvbSAnLi4vLi4vdXRpbHMvbWF0Y2gtaGVscGVycyc7XG5pbXBvcnQgeyB0cnV0aHkgfSBmcm9tICcuLi8uLi91dGlscy9vcGVyYXRvcnMnO1xuaW1wb3J0IHsgSHRtbEhlbHBlckJhc2UgfSBmcm9tICcuL0h0bWxIZWxwZXJCYXNlJztcbmltcG9ydCBpZnJhbWVTY3JpcHQgZnJvbSAnLi9vbmUtdG8tb25lLWlmcmFtZS1sb2dpYyc7XG5pbXBvcnQgeyBDb3B5bGVha3NUcmFuc2xhdGVTZXJ2aWNlIH0gZnJvbSAnLi4vLi4vc2VydmljZXMvY29weWxlYWtzLXRyYW5zbGF0ZS5zZXJ2aWNlJztcblxuQENvbXBvbmVudCh7XG5cdHNlbGVjdG9yOiAnaWZyYW1lW2NyLXNvdXJjZS1odG1sLWhlbHBlcl0nLFxuXHR0ZW1wbGF0ZTogJycsXG5cdHN0eWxlVXJsczogWycuL2h0bWwtaGVscGVyLnNjc3MnXSxcbn0pXG5leHBvcnQgY2xhc3MgU291cmNlSHRtbEhlbHBlckNvbXBvbmVudCBleHRlbmRzIEh0bWxIZWxwZXJCYXNlIGltcGxlbWVudHMgT25Jbml0LCBPbkRlc3Ryb3kge1xuXHRjb25zdHJ1Y3Rvcihcblx0XHRyZW5kZXJlcjogUmVuZGVyZXIyLFxuXHRcdGVsZW1lbnQ6IEVsZW1lbnRSZWY8SFRNTElGcmFtZUVsZW1lbnQ+LFxuXHRcdHByaXZhdGUgaGlnaGxpZ2h0U2VydmljZTogSGlnaGxpZ2h0U2VydmljZSxcblx0XHRwcml2YXRlIG1hdGNoU2VydmljZTogTWF0Y2hTZXJ2aWNlLFxuXHRcdHJlcG9ydFNlcnZpY2U6IFJlcG9ydFNlcnZpY2UsXG5cdFx0dHJhbnNsYXRlU2VydmljZTogQ29weWxlYWtzVHJhbnNsYXRlU2VydmljZVxuXHQpIHtcblx0XHRzdXBlcihyZW5kZXJlciwgZWxlbWVudCwgcmVwb3J0U2VydmljZSwgdHJhbnNsYXRlU2VydmljZSk7XG5cdFx0Y29uc3QganMgPSByZW5kZXJlci5jcmVhdGVFbGVtZW50KCdzY3JpcHQnKSBhcyBIVE1MU2NyaXB0RWxlbWVudDtcblx0XHRqcy50ZXh0Q29udGVudCA9IGlmcmFtZVNjcmlwdDtcblx0XHR0aGlzLnNjcmlwdCA9IGpzLm91dGVySFRNTDtcblx0fVxuXG5cdC8qKlxuXHQgKiBIYW5kbGUgYG1hdGNoLXNlbGVjdGAgZXZlbnRcblx0ICogQHBhcmFtIGV2ZW50IHRoZSBldmVudCBvYmplY3Rcblx0ICovXG5cdGhhbmRsZU1hdGNoU2VsZWN0KGV2ZW50OiBNYXRjaFNlbGVjdEV2ZW50KSB7XG5cdFx0dGhpcy5oaWdobGlnaHRTZXJ2aWNlLnNldFNvdXJjZUh0bWxNYXRjaChldmVudC5pbmRleCAhPT0gLTEgPyB0aGlzLm1hdGNoZXNbZXZlbnQuaW5kZXhdIDogbnVsbCk7XG5cdH1cblxuXHQvKipcblx0ICogTGlmZS1jeWNsZSBtZXRob2Rcblx0ICogZW1wdHkgZm9yIGB1bnRpbERlc3Ryb3lgIHJ4anMgb3BlcmF0b3Jcblx0ICovXG5cdG5nT25EZXN0cm95KCkge31cblxuXHQvKipcblx0ICogTGlmZS1jeWNsZSBtZXRob2Rcblx0ICogc3Vic2NyaWJlIHRvOlxuXHQgKiAtIHNvdXJjZSBhbmQgc3VzcGVjdCBodG1sIG1hdGNoZXNcblx0ICogLSByZXBvcnQgbWV0YWRhdGEgc291cmNlIGFuZCBzdXNwZWN0IG9iamVjdHNcblx0ICogLSB2aWV3bW9kZSBjaGFuZ2VzXG5cdCAqIC0ganVtcCBldmVudHNcblx0ICovXG5cdG5nT25Jbml0KCkge1xuXHRcdGNvbnN0IHsgc291cmNlJCwgdmlld01vZGUkLCBzdXNwZWN0UmVzdWx0JDogc3VzcGVjdCQsIGNvbnRlbnRNb2RlJCB9ID0gdGhpcy5yZXBvcnRTZXJ2aWNlO1xuXHRcdGNvbnN0IHsgc3VzcGVjdEh0bWwkLCBqdW1wJCwgdGV4dE1hdGNoQ2xpY2skIH0gPSB0aGlzLmhpZ2hsaWdodFNlcnZpY2U7XG5cdFx0Y29uc3QgeyBzb3VyY2VIdG1sTWF0Y2hlcyQgfSA9IHRoaXMubWF0Y2hTZXJ2aWNlO1xuXHRcdHNvdXJjZSQucGlwZSh1bnRpbERlc3Ryb3kodGhpcyksIHRydXRoeSgpKS5zdWJzY3JpYmUoc291cmNlID0+IHtcblx0XHRcdHRoaXMuaHRtbCA9IHNvdXJjZS5odG1sICYmIHNvdXJjZS5odG1sLnZhbHVlO1xuXHRcdFx0c291cmNlSHRtbE1hdGNoZXMkLnBpcGUodW50aWxEZXN0cm95KHRoaXMpKS5zdWJzY3JpYmUobWF0Y2hlcyA9PiB7XG5cdFx0XHRcdHRoaXMucmVuZGVyTWF0Y2hlcyhtYXRjaGVzKTtcblx0XHRcdH0pO1xuXHRcdH0pO1xuXG5cdFx0anVtcCRcblx0XHRcdC5waXBlKFxuXHRcdFx0XHR1bnRpbERlc3Ryb3kodGhpcyksXG5cdFx0XHRcdHdpdGhMYXRlc3RGcm9tKHZpZXdNb2RlJCwgY29udGVudE1vZGUkKSxcblx0XHRcdFx0ZmlsdGVyKChbLCB2aWV3LCBjb250ZW50XSkgPT4gdmlldyA9PT0gJ29uZS10by1vbmUnICYmIGNvbnRlbnQgPT09ICdodG1sJylcblx0XHRcdClcblx0XHRcdC5zdWJzY3JpYmUoKFtmb3J3YXJkXSkgPT4ge1xuXHRcdFx0XHR0aGlzLm1lc3NhZ2VGcmFtZSh7IHR5cGU6ICdtYXRjaC1qdW1wJywgZm9yd2FyZCB9IGFzIE1hdGNoSnVtcEV2ZW50KTtcblx0XHRcdH0pO1xuXG5cdFx0dGV4dE1hdGNoQ2xpY2skXG5cdFx0XHQucGlwZShcblx0XHRcdFx0dW50aWxEZXN0cm95KHRoaXMpLFxuXHRcdFx0XHRmaWx0ZXIoZXYgPT4gZXYub3JpZ2luID09PSAnc3VzcGVjdCcgJiYgZXYuYnJvYWRjYXN0KSxcblx0XHRcdFx0bWFwKGV2ID0+IGV2LmVsZW0pLFxuXHRcdFx0XHR3aXRoTGF0ZXN0RnJvbShzdXNwZWN0JCwgc291cmNlSHRtbE1hdGNoZXMkLCBjb250ZW50TW9kZSQpLFxuXHRcdFx0XHRmaWx0ZXIoKFssICwgbWF0Y2hlcywgY29udGVudF0pID0+IGNvbnRlbnQgPT09ICdodG1sJyAmJiAhIW1hdGNoZXMpXG5cdFx0XHQpXG5cdFx0XHQuc3Vic2NyaWJlKChbZWxlbSwgc3VzcGVjdCwgbWF0Y2hlc10pID0+IHtcblx0XHRcdFx0aWYgKGVsZW0gJiYgc3VzcGVjdC5yZXN1bHQpIHtcblx0XHRcdFx0XHRjb25zdCBjb21wYXJpc29uID0gc3VzcGVjdC5yZXN1bHQuaHRtbC5jb21wYXJpc29uW01hdGNoVHlwZVtlbGVtLm1hdGNoLnR5cGVdXTtcblx0XHRcdFx0XHRjb25zdCBbc3RhcnRdID0gZmluZFJlc3BlY3RpdmVTdGFydChlbGVtLm1hdGNoLnN0YXJ0LCBjb21wYXJpc29uLCBmYWxzZSk7XG5cdFx0XHRcdFx0Y29uc3QgZm91bmQgPSBtYXRjaGVzLmZpbmRJbmRleChtID0+IG0uc3RhcnQgPT09IHN0YXJ0KTtcblx0XHRcdFx0XHR0aGlzLm1hcmtTaW5nbGVNYXRjaEluRnJhbWUoZm91bmQpO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdHRoaXMubWFya1NpbmdsZU1hdGNoSW5GcmFtZSgtMSk7XG5cdFx0XHRcdH1cblx0XHRcdH0pO1xuXG5cdFx0c3VzcGVjdEh0bWwkXG5cdFx0XHQucGlwZShcblx0XHRcdFx0dW50aWxEZXN0cm95KHRoaXMpLFxuXHRcdFx0XHR3aXRoTGF0ZXN0RnJvbShzdXNwZWN0JCwgc291cmNlSHRtbE1hdGNoZXMkLCBjb250ZW50TW9kZSQpLFxuXHRcdFx0XHRmaWx0ZXIoKFssICwgbWF0Y2hlcywgY29udGVudF0pID0+IGNvbnRlbnQgPT09ICdodG1sJyAmJiAhIW1hdGNoZXMpXG5cdFx0XHQpXG5cdFx0XHQuc3Vic2NyaWJlKChbbWF0Y2gsIHN1c3BlY3QsIG1hdGNoZXNdKSA9PiB7XG5cdFx0XHRcdGlmIChtYXRjaCAmJiBzdXNwZWN0ICYmIHN1c3BlY3QucmVzdWx0KSB7XG5cdFx0XHRcdFx0Y29uc3QgY29tcGFyaXNvbiA9IHN1c3BlY3QucmVzdWx0Lmh0bWwuY29tcGFyaXNvbltNYXRjaFR5cGVbbWF0Y2gudHlwZV1dO1xuXHRcdFx0XHRcdGNvbnN0IFtzdGFydF0gPSBmaW5kUmVzcGVjdGl2ZVN0YXJ0KG1hdGNoLnN0YXJ0LCBjb21wYXJpc29uLCBmYWxzZSk7XG5cdFx0XHRcdFx0Y29uc3QgZm91bmQgPSBtYXRjaGVzLmZpbmRJbmRleChtID0+IG0uc3RhcnQgPT09IHN0YXJ0KTtcblx0XHRcdFx0XHR0aGlzLm1hcmtTaW5nbGVNYXRjaEluRnJhbWUoZm91bmQpO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdHRoaXMubWFya1NpbmdsZU1hdGNoSW5GcmFtZSgtMSk7XG5cdFx0XHRcdH1cblx0XHRcdH0pO1xuXHR9XG59XG4iXX0=