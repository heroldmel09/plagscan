import { Component, Inject } from '@angular/core';
import { MAT_DIALOG_DATA } from '@angular/material/dialog';
import { take } from 'rxjs/operators';
import { untilDestroy } from '../../../shared/operators/untilDestroy';
import { truthy } from '../../utils/operators';
import * as i0 from "@angular/core";
import * as i1 from "../../services/copyleaks-translate.service";
import * as i2 from "@angular/material/dialog";
import * as i3 from "../../services/direction.service";
import * as i4 from "@angular/cdk/a11y";
import * as i5 from "@angular/material/form-field";
import * as i6 from "@angular/material/icon";
import * as i7 from "@angular/material/checkbox";
import * as i8 from "@angular/material/button";
import * as i9 from "@angular/material/input";
import * as i10 from "@angular/forms";
import * as i11 from "@angular/common";
import * as i12 from "@angular/flex-layout/flex";
import * as i13 from "../../../shared/pipes/search.pipe";
import * as i14 from "../../services/report.service";
export class ResultsFilterDialogComponent {
    constructor(translatesService, dialogRef, directionService, reportSerivce, announcer) {
        this.translatesService = translatesService;
        this.dialogRef = dialogRef;
        this.directionService = directionService;
        this.reportSerivce = reportSerivce;
        this.announcer = announcer;
        this.query = '';
        this.hidden = [];
        this.checkedAllResults = false;
    }
    /**
     * Checks whether the hidden results contain a `result`
     * @param result the result to test
     */
    isHidden(result) {
        return this.hidden.includes(result.id);
    }
    /**
     * Adds or removes the `result` from the hidden results list essentialy checks or unchecks it
     * @param result the result to check/uncheck
     */
    toggleResult(result) {
        const index = this.hidden.indexOf(result.id);
        if (index > -1) {
            this.hidden.splice(index, 1);
        }
        else {
            this.hidden.push(result.id);
        }
    }
    /**
     * Checks or unchecks all results
     */
    checkAll() {
        if (this.hidden.length !== this.results.length) {
            this.hidden = [...this.results.map(r => r.id)];
        }
        else {
            this.hidden = [];
        }
        this.checkedAllResults = !this.checkedAllResults;
        this.announcer.announce(this.checkedAllResults ? 'All results unchecked' : 'All results checked', 'assertive');
    }
    /**
     * Closes the dialog while indicating whether to `save` changes or not.
     */
    close(save) {
        this.dialogRef.close(save);
    }
    /**
     * Saves the hidden results changes
     */
    saveChanges() {
        this.reportSerivce.setHiddenResults(this.hidden);
    }
    /**
     * Life-cycle method
     * subscribe to:
     * - result previews
     * - user defined hidden results
     * - dialog events
     */
    ngOnInit() {
        this.translations = this.translatesService.translations;
        const { hiddenResults$, previews$ } = this.reportSerivce;
        previews$.pipe(untilDestroy(this)).subscribe(results => (this.results = results.reverse()));
        hiddenResults$.pipe(take(1)).subscribe(hidden => {
            this.hidden = [...hidden];
        });
        this.dialogRef
            .beforeClosed()
            .pipe(truthy())
            .subscribe(() => this.saveChanges());
    }
    /**
     * Life-cycle method
     * empty for `untilDestroy` rxjs operator
     */
    ngOnDestroy() { }
}
ResultsFilterDialogComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.3", ngImport: i0, type: ResultsFilterDialogComponent, deps: [{ token: i1.CopyleaksTranslateService }, { token: i2.MatDialogRef }, { token: i3.DirectionService }, { token: MAT_DIALOG_DATA }, { token: i4.LiveAnnouncer }], target: i0.ɵɵFactoryTarget.Component });
ResultsFilterDialogComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.3.3", type: ResultsFilterDialogComponent, selector: "cr-results-filter-dialog", ngImport: i0, template: "<div mat-dialog-title>{{ translations?.FILTER_DIALOG?.TITLE || 'Results Filter' }}</div>\n<mat-form-field floatLabel=\"never\">\n\t<mat-icon matSuffix>search</mat-icon>\n\t<input\n\t\taria-label=\"Search for specific result.\"\n\t\tmatInput\n\t\t[placeholder]=\"translations?.FILTER_DIALOG?.SEARCH_PLACHOLDER || 'Filter By Results'\"\n\t\ttype=\"search\"\n\t\t[(ngModel)]=\"query\" />\n</mat-form-field>\n<mat-dialog-content>\n\t<div\n\t\tresult\n\t\t*ngFor=\"let result of results | search : 'title,id' : query\"\n\t\tfxLayout=\"row\"\n\t\tfxLayoutAlign=\"space-between center\">\n\t\t<div fxLayout=\"column\" class=\"result-item-meta-data-container\">\n\t\t\t<span class=\"result-item-meta-data-title\">{{ result.title }}</span>\n\t\t\t<ng-container *ngIf=\"result?.url\">\n\t\t\t\t<a [href]=\"result?.url\" target=\"_blank\" aria-label=\"Result source link.\" class=\"result-item-meta-data-link\">\n\t\t\t\t\t{{ result?.url }}\n\t\t\t\t</a>\n\t\t\t</ng-container>\n\t\t\t<ng-container *ngIf=\"!result?.url && result?.metadata?.filename\">\n\t\t\t\t{{ result?.metadata?.filename }}\n\t\t\t</ng-container>\n\t\t</div>\n\t\t<mat-checkbox\n\t\t\tclass=\"checkbox-outline-size\"\n\t\t\t[checked]=\"!isHidden(result)\"\n\t\t\t(change)=\"toggleResult(result)\"\n\t\t\t[aria-label]=\"\n\t\t\t\tisHidden(result) ? 'Check to include this result' : 'Un-check to exclude this result'\n\t\t\t\"></mat-checkbox>\n\t</div>\n</mat-dialog-content>\n<div fxLayout=\"row\" fxLayoutAlign=\"space-between center\" style=\"padding-top: 1em\">\n\t<button\n\t\tmat-button\n\t\tclass=\"check-uncheck-all-btn\"\n\t\t(click)=\"checkAll()\"\n\t\taria-label=\"Includes or excludes all results from report.\"\n\t\tdisableRipple>\n\t\t{{\n\t\t\thidden.length === results.length\n\t\t\t\t? translations?.FILTER_DIALOG?.CHECK_ALL || 'check all'\n\t\t\t\t: translations?.FILTER_DIALOG?.UNCHECK_ALL || 'uncheck all'\n\t\t}}\n\t</button>\n\t<button mat-raised-button (click)=\"close(true)\" color=\"primary\" aria-label=\"Saves the filtered results.\">\n\t\t{{ translations?.SHARED?.SAVE || 'SAVE' }}\n\t</button>\n</div>\n\n<button\n\tclose\n\tmat-icon-button\n\t(click)=\"close()\"\n\t[class]=\"'close-' + directionService.dir\"\n\taria-label=\"Closes the results filter dialog.\">\n\t<mat-icon svgIcon=\"close_black_color\"></mat-icon>\n</button>\n", styles: [".sat-tooltip{color:#fff;border-radius:4px;margin:14px;max-width:250px;padding:.5em;overflow:hidden;text-overflow:ellipsis;background:rgba(0,0,0,.8)}.identical{background-color:#ff796e}.minor-changes{background-color:#ff9a9a}.related{background-color:#ffd9b0}.omitted{background-color:#fff}.text-identical{color:#ff796e}.text-minor-changes{color:#ff9a9a}.text-related{color:#ffd9b0}.dot{border:1px solid #171717;width:1.5em;min-width:1.5em;min-height:1.5em;height:1.5em;border-radius:50%}@media screen and (max-width: 959px){.dot{width:1em;min-width:1em;min-height:1em;height:1em}}.copyleaks-report-dialog .mat-dialog-container{padding:0}:host{display:flex;flex-flow:column nowrap;position:relative}mat-form-field{margin-bottom:0;width:100%}[result]:hover{background:rgba(0,0,0,.04)}[result] mat-pseudo-checkbox{margin-left:1em}[result] p{flex:1;white-space:nowrap;overflow:hidden;text-overflow:ellipsis}[button-link]{cursor:pointer;text-transform:capitalize}[check-item]{cursor:pointer;margin-bottom:.5em;white-space:nowrap;flex:1;overflow:hidden;text-overflow:ellipsis}[check-item]:last-child{margin-top:0}[close]{position:absolute;margin-top:-1em;margin-right:-1em;top:0;right:0}.close-rtl{right:unset;left:-16px;top:-6px}@media screen and (min-width: 960px){mat-dialog-content{height:50vh;width:60vh}}.check-uncheck-all-btn{color:#00e;font-weight:400;font-size:14px;text-decoration:underline;text-transform:capitalize}.check-uncheck-all-btn ::ng-deep .mat-button-focus-overlay{background-color:transparent!important}.cdk-keyboard-focused{outline:2px solid black!important}.result-item-meta-data-container{padding:2px;overflow:hidden}.result-item-meta-data-container .result-item-meta-data-link{max-width:695px;white-space:nowrap;overflow:hidden;text-overflow:ellipsis}.checkbox-outline-size{height:16px;line-height:12px}\n"], components: [{ type: i5.MatFormField, selector: "mat-form-field", inputs: ["color", "appearance", "hideRequiredMarker", "hintLabel", "floatLabel"], exportAs: ["matFormField"] }, { type: i6.MatIcon, selector: "mat-icon", inputs: ["color", "inline", "svgIcon", "fontSet", "fontIcon"], exportAs: ["matIcon"] }, { type: i7.MatCheckbox, selector: "mat-checkbox", inputs: ["disableRipple", "color", "tabIndex", "aria-label", "aria-labelledby", "aria-describedby", "id", "required", "labelPosition", "name", "value", "checked", "disabled", "indeterminate"], outputs: ["change", "indeterminateChange"], exportAs: ["matCheckbox"] }, { type: i8.MatButton, selector: "button[mat-button], button[mat-raised-button], button[mat-icon-button],             button[mat-fab], button[mat-mini-fab], button[mat-stroked-button],             button[mat-flat-button]", inputs: ["disabled", "disableRipple", "color"], exportAs: ["matButton"] }], directives: [{ type: i2.MatDialogTitle, selector: "[mat-dialog-title], [matDialogTitle]", inputs: ["id"], exportAs: ["matDialogTitle"] }, { type: i5.MatSuffix, selector: "[matSuffix]" }, { type: i9.MatInput, selector: "input[matInput], textarea[matInput], select[matNativeControl],      input[matNativeControl], textarea[matNativeControl]", inputs: ["disabled", "id", "placeholder", "name", "required", "type", "errorStateMatcher", "aria-describedby", "value", "readonly"], exportAs: ["matInput"] }, { type: i10.DefaultValueAccessor, selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]" }, { type: i10.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i10.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { type: i2.MatDialogContent, selector: "[mat-dialog-content], mat-dialog-content, [matDialogContent]" }, { type: i11.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i12.DefaultLayoutDirective, selector: "  [fxLayout], [fxLayout.xs], [fxLayout.sm], [fxLayout.md],  [fxLayout.lg], [fxLayout.xl], [fxLayout.lt-sm], [fxLayout.lt-md],  [fxLayout.lt-lg], [fxLayout.lt-xl], [fxLayout.gt-xs], [fxLayout.gt-sm],  [fxLayout.gt-md], [fxLayout.gt-lg]", inputs: ["fxLayout", "fxLayout.xs", "fxLayout.sm", "fxLayout.md", "fxLayout.lg", "fxLayout.xl", "fxLayout.lt-sm", "fxLayout.lt-md", "fxLayout.lt-lg", "fxLayout.lt-xl", "fxLayout.gt-xs", "fxLayout.gt-sm", "fxLayout.gt-md", "fxLayout.gt-lg"] }, { type: i12.DefaultLayoutAlignDirective, selector: "  [fxLayoutAlign], [fxLayoutAlign.xs], [fxLayoutAlign.sm], [fxLayoutAlign.md],  [fxLayoutAlign.lg], [fxLayoutAlign.xl], [fxLayoutAlign.lt-sm], [fxLayoutAlign.lt-md],  [fxLayoutAlign.lt-lg], [fxLayoutAlign.lt-xl], [fxLayoutAlign.gt-xs], [fxLayoutAlign.gt-sm],  [fxLayoutAlign.gt-md], [fxLayoutAlign.gt-lg]", inputs: ["fxLayoutAlign", "fxLayoutAlign.xs", "fxLayoutAlign.sm", "fxLayoutAlign.md", "fxLayoutAlign.lg", "fxLayoutAlign.xl", "fxLayoutAlign.lt-sm", "fxLayoutAlign.lt-md", "fxLayoutAlign.lt-lg", "fxLayoutAlign.lt-xl", "fxLayoutAlign.gt-xs", "fxLayoutAlign.gt-sm", "fxLayoutAlign.gt-md", "fxLayoutAlign.gt-lg"] }, { type: i11.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }], pipes: { "search": i13.SearchPipe } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.3", ngImport: i0, type: ResultsFilterDialogComponent, decorators: [{
            type: Component,
            args: [{ selector: 'cr-results-filter-dialog', template: "<div mat-dialog-title>{{ translations?.FILTER_DIALOG?.TITLE || 'Results Filter' }}</div>\n<mat-form-field floatLabel=\"never\">\n\t<mat-icon matSuffix>search</mat-icon>\n\t<input\n\t\taria-label=\"Search for specific result.\"\n\t\tmatInput\n\t\t[placeholder]=\"translations?.FILTER_DIALOG?.SEARCH_PLACHOLDER || 'Filter By Results'\"\n\t\ttype=\"search\"\n\t\t[(ngModel)]=\"query\" />\n</mat-form-field>\n<mat-dialog-content>\n\t<div\n\t\tresult\n\t\t*ngFor=\"let result of results | search : 'title,id' : query\"\n\t\tfxLayout=\"row\"\n\t\tfxLayoutAlign=\"space-between center\">\n\t\t<div fxLayout=\"column\" class=\"result-item-meta-data-container\">\n\t\t\t<span class=\"result-item-meta-data-title\">{{ result.title }}</span>\n\t\t\t<ng-container *ngIf=\"result?.url\">\n\t\t\t\t<a [href]=\"result?.url\" target=\"_blank\" aria-label=\"Result source link.\" class=\"result-item-meta-data-link\">\n\t\t\t\t\t{{ result?.url }}\n\t\t\t\t</a>\n\t\t\t</ng-container>\n\t\t\t<ng-container *ngIf=\"!result?.url && result?.metadata?.filename\">\n\t\t\t\t{{ result?.metadata?.filename }}\n\t\t\t</ng-container>\n\t\t</div>\n\t\t<mat-checkbox\n\t\t\tclass=\"checkbox-outline-size\"\n\t\t\t[checked]=\"!isHidden(result)\"\n\t\t\t(change)=\"toggleResult(result)\"\n\t\t\t[aria-label]=\"\n\t\t\t\tisHidden(result) ? 'Check to include this result' : 'Un-check to exclude this result'\n\t\t\t\"></mat-checkbox>\n\t</div>\n</mat-dialog-content>\n<div fxLayout=\"row\" fxLayoutAlign=\"space-between center\" style=\"padding-top: 1em\">\n\t<button\n\t\tmat-button\n\t\tclass=\"check-uncheck-all-btn\"\n\t\t(click)=\"checkAll()\"\n\t\taria-label=\"Includes or excludes all results from report.\"\n\t\tdisableRipple>\n\t\t{{\n\t\t\thidden.length === results.length\n\t\t\t\t? translations?.FILTER_DIALOG?.CHECK_ALL || 'check all'\n\t\t\t\t: translations?.FILTER_DIALOG?.UNCHECK_ALL || 'uncheck all'\n\t\t}}\n\t</button>\n\t<button mat-raised-button (click)=\"close(true)\" color=\"primary\" aria-label=\"Saves the filtered results.\">\n\t\t{{ translations?.SHARED?.SAVE || 'SAVE' }}\n\t</button>\n</div>\n\n<button\n\tclose\n\tmat-icon-button\n\t(click)=\"close()\"\n\t[class]=\"'close-' + directionService.dir\"\n\taria-label=\"Closes the results filter dialog.\">\n\t<mat-icon svgIcon=\"close_black_color\"></mat-icon>\n</button>\n", styles: [".sat-tooltip{color:#fff;border-radius:4px;margin:14px;max-width:250px;padding:.5em;overflow:hidden;text-overflow:ellipsis;background:rgba(0,0,0,.8)}.identical{background-color:#ff796e}.minor-changes{background-color:#ff9a9a}.related{background-color:#ffd9b0}.omitted{background-color:#fff}.text-identical{color:#ff796e}.text-minor-changes{color:#ff9a9a}.text-related{color:#ffd9b0}.dot{border:1px solid #171717;width:1.5em;min-width:1.5em;min-height:1.5em;height:1.5em;border-radius:50%}@media screen and (max-width: 959px){.dot{width:1em;min-width:1em;min-height:1em;height:1em}}.copyleaks-report-dialog .mat-dialog-container{padding:0}:host{display:flex;flex-flow:column nowrap;position:relative}mat-form-field{margin-bottom:0;width:100%}[result]:hover{background:rgba(0,0,0,.04)}[result] mat-pseudo-checkbox{margin-left:1em}[result] p{flex:1;white-space:nowrap;overflow:hidden;text-overflow:ellipsis}[button-link]{cursor:pointer;text-transform:capitalize}[check-item]{cursor:pointer;margin-bottom:.5em;white-space:nowrap;flex:1;overflow:hidden;text-overflow:ellipsis}[check-item]:last-child{margin-top:0}[close]{position:absolute;margin-top:-1em;margin-right:-1em;top:0;right:0}.close-rtl{right:unset;left:-16px;top:-6px}@media screen and (min-width: 960px){mat-dialog-content{height:50vh;width:60vh}}.check-uncheck-all-btn{color:#00e;font-weight:400;font-size:14px;text-decoration:underline;text-transform:capitalize}.check-uncheck-all-btn ::ng-deep .mat-button-focus-overlay{background-color:transparent!important}.cdk-keyboard-focused{outline:2px solid black!important}.result-item-meta-data-container{padding:2px;overflow:hidden}.result-item-meta-data-container .result-item-meta-data-link{max-width:695px;white-space:nowrap;overflow:hidden;text-overflow:ellipsis}.checkbox-outline-size{height:16px;line-height:12px}\n"] }]
        }], ctorParameters: function () { return [{ type: i1.CopyleaksTranslateService }, { type: i2.MatDialogRef }, { type: i3.DirectionService }, { type: i14.ReportService, decorators: [{
                    type: Inject,
                    args: [MAT_DIALOG_DATA]
                }] }, { type: i4.LiveAnnouncer }]; } });
//# sourceMappingURL=data:application/json;base64,