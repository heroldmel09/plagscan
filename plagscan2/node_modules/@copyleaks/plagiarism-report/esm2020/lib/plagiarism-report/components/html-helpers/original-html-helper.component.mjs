import { Component } from '@angular/core';
import { combineLatest } from 'rxjs';
import { distinctUntilChanged, filter, map } from 'rxjs/operators';
import { untilDestroy } from '../../../shared/operators/untilDestroy';
import { truthy } from '../../utils/operators';
import { HtmlHelperBase } from './HtmlHelperBase';
import iframeScript from './one-to-many-iframe-logic';
import deepEqual from 'deep-equal';
import * as i0 from "@angular/core";
import * as i1 from "../../services/highlight.service";
import * as i2 from "../../services/match.service";
import * as i3 from "../../services/report.service";
import * as i4 from "../../services/copyleaks-translate.service";
/**
 * Component to handle manipulating the scan result's html inside an iframe
 */
export class OriginalHtmlHelperComponent extends HtmlHelperBase {
    constructor(renderer, element, highlightService, matchService, reportService, translateService) {
        super(renderer, element, reportService, translateService);
        this.highlightService = highlightService;
        this.matchService = matchService;
        this.renderedSuccessfully = false;
        const js = renderer.createElement('script');
        js.textContent = iframeScript;
        this.script = js.outerHTML;
    }
    /**
     * handle match selection
     */
    handleMatchSelect(event) {
        this.lastMatchSelectEvent = event;
        this.highlightService.setOriginalHtmlMatch(event.index !== -1 ? this.matches[event.index] : null);
    }
    /**
     * Life-cycle method
     * subscribe to:
     * - original html matches
     * - view mode changes
     * - source ducument
     * - jump events
     */
    ngOnInit() {
        const { source$, viewMode$, contentMode$ } = this.reportService;
        const { jump$ } = this.highlightService;
        const { originalHtmlMatches$ } = this.matchService;
        source$
            .pipe(truthy(), filter(source => !!source.html))
            .subscribe(source => {
            this.html = source.html.value;
            this.setHtml(this.html);
        });
        combineLatest([source$.pipe(truthy()), originalHtmlMatches$])
            .pipe(untilDestroy(this))
            .subscribe(([, matches]) => {
            if (!this.renderedSuccessfully || !deepEqual(this.matches, matches)) {
                this.matches = matches;
                this.renderMatches(matches);
                this.renderedSuccessfully = true;
                this.lastMatchSelectEvent = null;
            }
            if (this.lastMatchSelectEvent && this.lastMatchSelectEvent.index !== -1) {
                this.messageFrame({ type: 'match-select', index: this.lastMatchSelectEvent?.index });
            }
        });
        const onOneToManyHtmlJump$ = combineLatest([jump$, contentMode$, viewMode$]).pipe(distinctUntilChanged(), untilDestroy(this), filter(([forward, content, viewMode]) => (forward === true || forward === false) && viewMode === 'one-to-many' && content === 'html'), map(([forward]) => forward));
        onOneToManyHtmlJump$.subscribe(forward => {
            this.messageFrame({ type: 'match-jump', forward });
        });
    }
    /**
     * Life-cycle method
     * empty for `untilDestroy` rxjs operator
     */
    ngOnDestroy() { }
}
OriginalHtmlHelperComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.3", ngImport: i0, type: OriginalHtmlHelperComponent, deps: [{ token: i0.Renderer2 }, { token: i0.ElementRef }, { token: i1.HighlightService }, { token: i2.MatchService }, { token: i3.ReportService }, { token: i4.CopyleaksTranslateService }], target: i0.ɵɵFactoryTarget.Component });
OriginalHtmlHelperComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.3.3", type: OriginalHtmlHelperComponent, selector: "iframe[cr-original-html-helper]", usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: ["#sidebar.opened+#page-container{left:0px!important}#page-container .c{pointer-events:none!important}#page-container .t{pointer-events:all!important}span[exclude]{font-style:italic;opacity:.75}span[exclude-partial-scan]{filter:blur(6px);cursor:pointer}span[match]{cursor:pointer;color:#000}span[match] a:link{pointer-events:none}span[ignored]{font-style:italic}span[match][data-type=\"0\"]{background-color:#f66}span[match][data-type=\"0\"].hover{background-color:#ff8080}span[match][data-type=\"1\"]{background-color:#ff9a9a}span[match][data-type=\"1\"].hover{background-color:#ffb4b4}span[match][data-type=\"2\"]{background-color:#ffd9b0}span[match][data-type=\"2\"].hover{background-color:#ffe5ca}span[match][on]{background-color:gold!important}\n"] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.3", ngImport: i0, type: OriginalHtmlHelperComponent, decorators: [{
            type: Component,
            args: [{ selector: 'iframe[cr-original-html-helper]', template: '', styles: ["#sidebar.opened+#page-container{left:0px!important}#page-container .c{pointer-events:none!important}#page-container .t{pointer-events:all!important}span[exclude]{font-style:italic;opacity:.75}span[exclude-partial-scan]{filter:blur(6px);cursor:pointer}span[match]{cursor:pointer;color:#000}span[match] a:link{pointer-events:none}span[ignored]{font-style:italic}span[match][data-type=\"0\"]{background-color:#f66}span[match][data-type=\"0\"].hover{background-color:#ff8080}span[match][data-type=\"1\"]{background-color:#ff9a9a}span[match][data-type=\"1\"].hover{background-color:#ffb4b4}span[match][data-type=\"2\"]{background-color:#ffd9b0}span[match][data-type=\"2\"].hover{background-color:#ffe5ca}span[match][on]{background-color:gold!important}\n"] }]
        }], ctorParameters: function () { return [{ type: i0.Renderer2 }, { type: i0.ElementRef }, { type: i1.HighlightService }, { type: i2.MatchService }, { type: i3.ReportService }, { type: i4.CopyleaksTranslateService }]; } });
//# sourceMappingURL=data:application/json;base64,