import { Component } from '@angular/core';
import { filter } from 'rxjs/operators';
import { untilDestroy } from '../../../shared/operators/untilDestroy';
import { EReportViewModel } from '../../services/view-mode.service';
import { ALERTS } from '../../utils/constants';
import * as i0 from "@angular/core";
import * as i1 from "../../services/report.service";
import * as i2 from "../../services/view-mode.service";
import * as i3 from "../../../panel/panel.component";
import * as i4 from "@angular/material/button";
import * as i5 from "@angular/material/icon";
import * as i6 from "../alert-card/alert-card.component";
import * as i7 from "../powered-by/powered-by.component";
import * as i8 from "@angular/material/tooltip";
import * as i9 from "@angular/flex-layout/flex";
import * as i10 from "@angular/common";
import * as i11 from "@angular/flex-layout/extended";
export class AlertsComponent {
    constructor(reportService, viewModeService) {
        this.reportService = reportService;
        this.viewModeService = viewModeService;
    }
    get selectedAlert() {
        return this.viewModeService?.selectedAlert;
    }
    /**
     * Life-cycle method
     */
    ngOnInit() {
        this.reportService.completeResult$
            .pipe(untilDestroy(this), filter(c => !!c.notifications && !!c.notifications.alerts && !!c.notifications.alerts.length))
            .subscribe(completeResult => {
            this.notification = JSON.parse(JSON.stringify(completeResult.notifications));
            if (this.notification) {
                this.notification.alerts = this.notification.alerts.filter(n => n.code != ALERTS.SUSPECTED_AI_TEXT_DETECTED);
            }
        });
    }
    /**
     * hide alerts and go back to scanning mode
     */
    hideAlerts() {
        this.viewModeService.changeViewMode$(EReportViewModel.ScanningResult);
    }
    /**
     * Life-cycle method
     * required by untilDestory
     */
    ngOnDestroy() { }
}
AlertsComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.3", ngImport: i0, type: AlertsComponent, deps: [{ token: i1.ReportService }, { token: i2.ViewModeService }], target: i0.ɵɵFactoryTarget.Component });
AlertsComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.3.3", type: AlertsComponent, selector: "cr-alerts", ngImport: i0, template: "<cr-panel>\n\t<cr-panel-header>Alerts</cr-panel-header>\n\t<cr-panel-actions>\n\t\t<cr-panel-action>\n\t\t\t<button mat-button matTooltip=\"Close alerts\" (click)=\"hideAlerts()\" aria-label=\"Close alerts.\">\n\t\t\t\t<mat-icon>close</mat-icon>\n\t\t\t</button>\n\t\t\t<!-- <cr-panel-action *ngIf=\"isMobile\">\n\t\t\t\t<button mat-button\n\t\t\t\t\t\t\t\t[disabled]=\"!previews\"\n\t\t\t\t\t\t\t\t(click)=\"isActive = !isActive\">\n\t\t\t\t\t<mat-icon>{{ isActive ? 'arrow_downward' : 'arrow_upward' }}</mat-icon>\n\t\t\t\t</button>\n\t\t\t</cr-panel-action> -->\n\t\t</cr-panel-action>\n\t</cr-panel-actions>\n\t<cr-panel-body fxLayout=\"column\" fxFlex=\"100\">\n\t\t<div fxFlex fxLayout=\"column\" fxLayoutGap=\"15px\" class=\"alerts-container\">\n\t\t\t<ng-container *ngFor=\"let alert of notification?.alerts\">\n\t\t\t\t<cr-alert-card\n\t\t\t\t\t[ngClass]=\"{ 'alert-opacity': selectedAlert && selectedAlert.code !== alert.code }\"\n\t\t\t\t\t[alert]=\"alert\"></cr-alert-card>\n\t\t\t</ng-container>\n\t\t</div>\n\t\t<div class=\"powered-by-section\">\n\t\t\t<cr-powered-by></cr-powered-by>\n\t\t</div>\n\t</cr-panel-body>\n</cr-panel>\n", styles: [":host{width:30%;max-width:530px}cr-panel{flex:1;height:100%}cr-panel cr-panel-header{text-transform:uppercase}.powered-by-section cr-powered-by{height:44px;padding-top:1px;border-top:1px solid rgba(0,0,0,.12);margin-top:12px;margin-bottom:-4px}.alerts-container{height:100%;overflow-y:scroll;padding:5px}.alerts-container .alert-opacity{opacity:.4}\n"], components: [{ type: i3.PanelComponent, selector: "cr-panel" }, { type: i3.PanelHeaderComponent, selector: "cr-panel-header" }, { type: i3.PanelActionsComponent, selector: "cr-panel-actions" }, { type: i3.PanelActionComponent, selector: "cr-panel-action" }, { type: i4.MatButton, selector: "button[mat-button], button[mat-raised-button], button[mat-icon-button],             button[mat-fab], button[mat-mini-fab], button[mat-stroked-button],             button[mat-flat-button]", inputs: ["disabled", "disableRipple", "color"], exportAs: ["matButton"] }, { type: i5.MatIcon, selector: "mat-icon", inputs: ["color", "inline", "svgIcon", "fontSet", "fontIcon"], exportAs: ["matIcon"] }, { type: i3.PanelBodyComponent, selector: "cr-panel-body" }, { type: i6.AlertCardComponent, selector: "cr-alert-card", inputs: ["alert"], outputs: ["afterToggleError"] }, { type: i7.PoweredByComponent, selector: "cr-powered-by" }], directives: [{ type: i8.MatTooltip, selector: "[matTooltip]", exportAs: ["matTooltip"] }, { type: i9.DefaultLayoutDirective, selector: "  [fxLayout], [fxLayout.xs], [fxLayout.sm], [fxLayout.md],  [fxLayout.lg], [fxLayout.xl], [fxLayout.lt-sm], [fxLayout.lt-md],  [fxLayout.lt-lg], [fxLayout.lt-xl], [fxLayout.gt-xs], [fxLayout.gt-sm],  [fxLayout.gt-md], [fxLayout.gt-lg]", inputs: ["fxLayout", "fxLayout.xs", "fxLayout.sm", "fxLayout.md", "fxLayout.lg", "fxLayout.xl", "fxLayout.lt-sm", "fxLayout.lt-md", "fxLayout.lt-lg", "fxLayout.lt-xl", "fxLayout.gt-xs", "fxLayout.gt-sm", "fxLayout.gt-md", "fxLayout.gt-lg"] }, { type: i9.DefaultFlexDirective, selector: "  [fxFlex], [fxFlex.xs], [fxFlex.sm], [fxFlex.md],  [fxFlex.lg], [fxFlex.xl], [fxFlex.lt-sm], [fxFlex.lt-md],  [fxFlex.lt-lg], [fxFlex.lt-xl], [fxFlex.gt-xs], [fxFlex.gt-sm],  [fxFlex.gt-md], [fxFlex.gt-lg]", inputs: ["fxFlex", "fxFlex.xs", "fxFlex.sm", "fxFlex.md", "fxFlex.lg", "fxFlex.xl", "fxFlex.lt-sm", "fxFlex.lt-md", "fxFlex.lt-lg", "fxFlex.lt-xl", "fxFlex.gt-xs", "fxFlex.gt-sm", "fxFlex.gt-md", "fxFlex.gt-lg"] }, { type: i9.DefaultLayoutGapDirective, selector: "  [fxLayoutGap], [fxLayoutGap.xs], [fxLayoutGap.sm], [fxLayoutGap.md],  [fxLayoutGap.lg], [fxLayoutGap.xl], [fxLayoutGap.lt-sm], [fxLayoutGap.lt-md],  [fxLayoutGap.lt-lg], [fxLayoutGap.lt-xl], [fxLayoutGap.gt-xs], [fxLayoutGap.gt-sm],  [fxLayoutGap.gt-md], [fxLayoutGap.gt-lg]", inputs: ["fxLayoutGap", "fxLayoutGap.xs", "fxLayoutGap.sm", "fxLayoutGap.md", "fxLayoutGap.lg", "fxLayoutGap.xl", "fxLayoutGap.lt-sm", "fxLayoutGap.lt-md", "fxLayoutGap.lt-lg", "fxLayoutGap.lt-xl", "fxLayoutGap.gt-xs", "fxLayoutGap.gt-sm", "fxLayoutGap.gt-md", "fxLayoutGap.gt-lg"] }, { type: i10.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i10.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { type: i11.DefaultClassDirective, selector: "  [ngClass], [ngClass.xs], [ngClass.sm], [ngClass.md], [ngClass.lg], [ngClass.xl],  [ngClass.lt-sm], [ngClass.lt-md], [ngClass.lt-lg], [ngClass.lt-xl],  [ngClass.gt-xs], [ngClass.gt-sm], [ngClass.gt-md], [ngClass.gt-lg]", inputs: ["ngClass", "ngClass.xs", "ngClass.sm", "ngClass.md", "ngClass.lg", "ngClass.xl", "ngClass.lt-sm", "ngClass.lt-md", "ngClass.lt-lg", "ngClass.lt-xl", "ngClass.gt-xs", "ngClass.gt-sm", "ngClass.gt-md", "ngClass.gt-lg"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.3", ngImport: i0, type: AlertsComponent, decorators: [{
            type: Component,
            args: [{ selector: 'cr-alerts', template: "<cr-panel>\n\t<cr-panel-header>Alerts</cr-panel-header>\n\t<cr-panel-actions>\n\t\t<cr-panel-action>\n\t\t\t<button mat-button matTooltip=\"Close alerts\" (click)=\"hideAlerts()\" aria-label=\"Close alerts.\">\n\t\t\t\t<mat-icon>close</mat-icon>\n\t\t\t</button>\n\t\t\t<!-- <cr-panel-action *ngIf=\"isMobile\">\n\t\t\t\t<button mat-button\n\t\t\t\t\t\t\t\t[disabled]=\"!previews\"\n\t\t\t\t\t\t\t\t(click)=\"isActive = !isActive\">\n\t\t\t\t\t<mat-icon>{{ isActive ? 'arrow_downward' : 'arrow_upward' }}</mat-icon>\n\t\t\t\t</button>\n\t\t\t</cr-panel-action> -->\n\t\t</cr-panel-action>\n\t</cr-panel-actions>\n\t<cr-panel-body fxLayout=\"column\" fxFlex=\"100\">\n\t\t<div fxFlex fxLayout=\"column\" fxLayoutGap=\"15px\" class=\"alerts-container\">\n\t\t\t<ng-container *ngFor=\"let alert of notification?.alerts\">\n\t\t\t\t<cr-alert-card\n\t\t\t\t\t[ngClass]=\"{ 'alert-opacity': selectedAlert && selectedAlert.code !== alert.code }\"\n\t\t\t\t\t[alert]=\"alert\"></cr-alert-card>\n\t\t\t</ng-container>\n\t\t</div>\n\t\t<div class=\"powered-by-section\">\n\t\t\t<cr-powered-by></cr-powered-by>\n\t\t</div>\n\t</cr-panel-body>\n</cr-panel>\n", styles: [":host{width:30%;max-width:530px}cr-panel{flex:1;height:100%}cr-panel cr-panel-header{text-transform:uppercase}.powered-by-section cr-powered-by{height:44px;padding-top:1px;border-top:1px solid rgba(0,0,0,.12);margin-top:12px;margin-bottom:-4px}.alerts-container{height:100%;overflow-y:scroll;padding:5px}.alerts-container .alert-opacity{opacity:.4}\n"] }]
        }], ctorParameters: function () { return [{ type: i1.ReportService }, { type: i2.ViewModeService }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWxlcnRzLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL3BsYWdpYXJpc20tcmVwb3J0L3NyYy9saWIvcGxhZ2lhcmlzbS1yZXBvcnQvY29tcG9uZW50cy9hbGVydHMvYWxlcnRzLmNvbXBvbmVudC50cyIsIi4uLy4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL3BsYWdpYXJpc20tcmVwb3J0L3NyYy9saWIvcGxhZ2lhcmlzbS1yZXBvcnQvY29tcG9uZW50cy9hbGVydHMvYWxlcnRzLmNvbXBvbmVudC5odG1sIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQXFCLE1BQU0sZUFBZSxDQUFDO0FBQzdELE9BQU8sRUFBRSxNQUFNLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUN4QyxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sd0NBQXdDLENBQUM7QUFHdEUsT0FBTyxFQUFFLGdCQUFnQixFQUFtQixNQUFNLGtDQUFrQyxDQUFDO0FBQ3JGLE9BQU8sRUFBRSxNQUFNLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQzs7Ozs7Ozs7Ozs7OztBQU8vQyxNQUFNLE9BQU8sZUFBZTtJQUszQixZQUFvQixhQUE0QixFQUFVLGVBQWdDO1FBQXRFLGtCQUFhLEdBQWIsYUFBYSxDQUFlO1FBQVUsb0JBQWUsR0FBZixlQUFlLENBQWlCO0lBQUcsQ0FBQztJQUg5RixJQUFJLGFBQWE7UUFDaEIsT0FBTyxJQUFJLENBQUMsZUFBZSxFQUFFLGFBQWEsQ0FBQztJQUM1QyxDQUFDO0lBRUQ7O09BRUc7SUFDSCxRQUFRO1FBQ1AsSUFBSSxDQUFDLGFBQWEsQ0FBQyxlQUFlO2FBQ2hDLElBQUksQ0FDSixZQUFZLENBQUMsSUFBSSxDQUFDLEVBQ2xCLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsYUFBYSxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsYUFBYSxDQUFDLE1BQU0sSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLGFBQWEsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQzdGO2FBQ0EsU0FBUyxDQUFDLGNBQWMsQ0FBQyxFQUFFO1lBQzNCLElBQUksQ0FBQyxZQUFZLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLGNBQWMsQ0FBQyxhQUFhLENBQUMsQ0FBQyxDQUFDO1lBQzdFLElBQUksSUFBSSxDQUFDLFlBQVksRUFBRTtnQkFDdEIsSUFBSSxDQUFDLFlBQVksQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDLFlBQVksQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLElBQUksSUFBSSxNQUFNLENBQUMsMEJBQTBCLENBQUMsQ0FBQzthQUM3RztRQUNGLENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztJQUNEOztPQUVHO0lBQ0gsVUFBVTtRQUNULElBQUksQ0FBQyxlQUFlLENBQUMsZUFBZSxDQUFDLGdCQUFnQixDQUFDLGNBQWMsQ0FBQyxDQUFDO0lBQ3ZFLENBQUM7SUFDRDs7O09BR0c7SUFDSCxXQUFXLEtBQUksQ0FBQzs7NEdBaENKLGVBQWU7Z0dBQWYsZUFBZSxpRENiNUIsNG5DQTZCQTsyRkRoQmEsZUFBZTtrQkFMM0IsU0FBUzsrQkFDQyxXQUFXIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50LCBPbkRlc3Ryb3ksIE9uSW5pdCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgZmlsdGVyIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuaW1wb3J0IHsgdW50aWxEZXN0cm95IH0gZnJvbSAnLi4vLi4vLi4vc2hhcmVkL29wZXJhdG9ycy91bnRpbERlc3Ryb3knO1xuaW1wb3J0IHsgQ29tcGxldGVSZXN1bHROb3RpZmljYXRpb24gfSBmcm9tICcuLi8uLi9tb2RlbHMnO1xuaW1wb3J0IHsgUmVwb3J0U2VydmljZSB9IGZyb20gJy4uLy4uL3NlcnZpY2VzL3JlcG9ydC5zZXJ2aWNlJztcbmltcG9ydCB7IEVSZXBvcnRWaWV3TW9kZWwsIFZpZXdNb2RlU2VydmljZSB9IGZyb20gJy4uLy4uL3NlcnZpY2VzL3ZpZXctbW9kZS5zZXJ2aWNlJztcbmltcG9ydCB7IEFMRVJUUyB9IGZyb20gJy4uLy4uL3V0aWxzL2NvbnN0YW50cyc7XG5cbkBDb21wb25lbnQoe1xuXHRzZWxlY3RvcjogJ2NyLWFsZXJ0cycsXG5cdHRlbXBsYXRlVXJsOiAnLi9hbGVydHMuY29tcG9uZW50Lmh0bWwnLFxuXHRzdHlsZVVybHM6IFsnLi9hbGVydHMuY29tcG9uZW50LnNjc3MnXSxcbn0pXG5leHBvcnQgY2xhc3MgQWxlcnRzQ29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0LCBPbkRlc3Ryb3kge1xuXHRub3RpZmljYXRpb246IENvbXBsZXRlUmVzdWx0Tm90aWZpY2F0aW9uO1xuXHRnZXQgc2VsZWN0ZWRBbGVydCgpIHtcblx0XHRyZXR1cm4gdGhpcy52aWV3TW9kZVNlcnZpY2U/LnNlbGVjdGVkQWxlcnQ7XG5cdH1cblx0Y29uc3RydWN0b3IocHJpdmF0ZSByZXBvcnRTZXJ2aWNlOiBSZXBvcnRTZXJ2aWNlLCBwcml2YXRlIHZpZXdNb2RlU2VydmljZTogVmlld01vZGVTZXJ2aWNlKSB7fVxuXHQvKipcblx0ICogTGlmZS1jeWNsZSBtZXRob2Rcblx0ICovXG5cdG5nT25Jbml0KCkge1xuXHRcdHRoaXMucmVwb3J0U2VydmljZS5jb21wbGV0ZVJlc3VsdCRcblx0XHRcdC5waXBlKFxuXHRcdFx0XHR1bnRpbERlc3Ryb3kodGhpcyksXG5cdFx0XHRcdGZpbHRlcihjID0+ICEhYy5ub3RpZmljYXRpb25zICYmICEhYy5ub3RpZmljYXRpb25zLmFsZXJ0cyAmJiAhIWMubm90aWZpY2F0aW9ucy5hbGVydHMubGVuZ3RoKVxuXHRcdFx0KVxuXHRcdFx0LnN1YnNjcmliZShjb21wbGV0ZVJlc3VsdCA9PiB7XG5cdFx0XHRcdHRoaXMubm90aWZpY2F0aW9uID0gSlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeShjb21wbGV0ZVJlc3VsdC5ub3RpZmljYXRpb25zKSk7XG5cdFx0XHRcdGlmICh0aGlzLm5vdGlmaWNhdGlvbikge1xuXHRcdFx0XHRcdHRoaXMubm90aWZpY2F0aW9uLmFsZXJ0cyA9IHRoaXMubm90aWZpY2F0aW9uLmFsZXJ0cy5maWx0ZXIobiA9PiBuLmNvZGUgIT0gQUxFUlRTLlNVU1BFQ1RFRF9BSV9URVhUX0RFVEVDVEVEKTtcblx0XHRcdFx0fVxuXHRcdFx0fSk7XG5cdH1cblx0LyoqXG5cdCAqIGhpZGUgYWxlcnRzIGFuZCBnbyBiYWNrIHRvIHNjYW5uaW5nIG1vZGVcblx0ICovXG5cdGhpZGVBbGVydHMoKSB7XG5cdFx0dGhpcy52aWV3TW9kZVNlcnZpY2UuY2hhbmdlVmlld01vZGUkKEVSZXBvcnRWaWV3TW9kZWwuU2Nhbm5pbmdSZXN1bHQpO1xuXHR9XG5cdC8qKlxuXHQgKiBMaWZlLWN5Y2xlIG1ldGhvZFxuXHQgKiByZXF1aXJlZCBieSB1bnRpbERlc3Rvcnlcblx0ICovXG5cdG5nT25EZXN0cm95KCkge31cbn1cbiIsIjxjci1wYW5lbD5cblx0PGNyLXBhbmVsLWhlYWRlcj5BbGVydHM8L2NyLXBhbmVsLWhlYWRlcj5cblx0PGNyLXBhbmVsLWFjdGlvbnM+XG5cdFx0PGNyLXBhbmVsLWFjdGlvbj5cblx0XHRcdDxidXR0b24gbWF0LWJ1dHRvbiBtYXRUb29sdGlwPVwiQ2xvc2UgYWxlcnRzXCIgKGNsaWNrKT1cImhpZGVBbGVydHMoKVwiIGFyaWEtbGFiZWw9XCJDbG9zZSBhbGVydHMuXCI+XG5cdFx0XHRcdDxtYXQtaWNvbj5jbG9zZTwvbWF0LWljb24+XG5cdFx0XHQ8L2J1dHRvbj5cblx0XHRcdDwhLS0gPGNyLXBhbmVsLWFjdGlvbiAqbmdJZj1cImlzTW9iaWxlXCI+XG5cdFx0XHRcdDxidXR0b24gbWF0LWJ1dHRvblxuXHRcdFx0XHRcdFx0XHRcdFtkaXNhYmxlZF09XCIhcHJldmlld3NcIlxuXHRcdFx0XHRcdFx0XHRcdChjbGljayk9XCJpc0FjdGl2ZSA9ICFpc0FjdGl2ZVwiPlxuXHRcdFx0XHRcdDxtYXQtaWNvbj57eyBpc0FjdGl2ZSA/ICdhcnJvd19kb3dud2FyZCcgOiAnYXJyb3dfdXB3YXJkJyB9fTwvbWF0LWljb24+XG5cdFx0XHRcdDwvYnV0dG9uPlxuXHRcdFx0PC9jci1wYW5lbC1hY3Rpb24+IC0tPlxuXHRcdDwvY3ItcGFuZWwtYWN0aW9uPlxuXHQ8L2NyLXBhbmVsLWFjdGlvbnM+XG5cdDxjci1wYW5lbC1ib2R5IGZ4TGF5b3V0PVwiY29sdW1uXCIgZnhGbGV4PVwiMTAwXCI+XG5cdFx0PGRpdiBmeEZsZXggZnhMYXlvdXQ9XCJjb2x1bW5cIiBmeExheW91dEdhcD1cIjE1cHhcIiBjbGFzcz1cImFsZXJ0cy1jb250YWluZXJcIj5cblx0XHRcdDxuZy1jb250YWluZXIgKm5nRm9yPVwibGV0IGFsZXJ0IG9mIG5vdGlmaWNhdGlvbj8uYWxlcnRzXCI+XG5cdFx0XHRcdDxjci1hbGVydC1jYXJkXG5cdFx0XHRcdFx0W25nQ2xhc3NdPVwieyAnYWxlcnQtb3BhY2l0eSc6IHNlbGVjdGVkQWxlcnQgJiYgc2VsZWN0ZWRBbGVydC5jb2RlICE9PSBhbGVydC5jb2RlIH1cIlxuXHRcdFx0XHRcdFthbGVydF09XCJhbGVydFwiPjwvY3ItYWxlcnQtY2FyZD5cblx0XHRcdDwvbmctY29udGFpbmVyPlxuXHRcdDwvZGl2PlxuXHRcdDxkaXYgY2xhc3M9XCJwb3dlcmVkLWJ5LXNlY3Rpb25cIj5cblx0XHRcdDxjci1wb3dlcmVkLWJ5PjwvY3ItcG93ZXJlZC1ieT5cblx0XHQ8L2Rpdj5cblx0PC9jci1wYW5lbC1ib2R5PlxuPC9jci1wYW5lbD5cbiJdfQ==