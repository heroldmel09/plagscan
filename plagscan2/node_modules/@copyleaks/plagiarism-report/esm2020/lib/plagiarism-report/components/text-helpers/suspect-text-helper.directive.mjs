import { ContentChildren, Directive, Input } from '@angular/core';
import { filter, take, withLatestFrom } from 'rxjs/operators';
import { untilDestroy } from '../../../shared/operators/untilDestroy';
import * as helpers from '../../utils/highlight-helpers';
import { MatchComponent } from '../match/match.component';
import * as i0 from "@angular/core";
import * as i1 from "../../services/highlight.service";
import * as i2 from "../../services/report.service";
export class SuspectTextHelperDirective {
    constructor(highlightService, reportService) {
        this.highlightService = highlightService;
        this.reportService = reportService;
    }
    /**
     * Handle a match click that was broadcasted by the source text helper
     * @param elem the broadcasted element
     * @param suspect the suspected scan result
     * @param contentMode content mode of the broadcasting match
     */
    handleBroadcast(match, suspect, contentMode) {
        const [, start] = helpers.findRespectiveMatch(match, suspect[contentMode].comparison, true);
        const page = helpers.findRespectivePage(start, suspect.text.pages.startPosition);
        if (page === this.host.currentPage) {
            const comp = this.children.find(item => item.match.start === start);
            if (comp === null) {
                throw new Error('Match component was not found in view');
            }
            this.highlightService.textMatchClicked({ elem: comp, broadcast: false, origin: 'suspect' });
        }
        else {
            this.children.changes.pipe(take(1)).subscribe(() => {
                const comp = this.children.find(item => item.match.start === start);
                if (comp === null) {
                    throw new Error('Match component was not found in view');
                }
                this.highlightService.textMatchClicked({ elem: comp, broadcast: false, origin: 'suspect' });
            });
            this.host.currentPage = page;
        }
    }
    /**
     * Life-cycle method
     * - listen to text match clicks from `source`
     */
    ngAfterContentInit() {
        const { suspectResult$: suspect$, contentMode$ } = this.reportService;
        const { textMatchClick$, sourceHtml$ } = this.highlightService;
        textMatchClick$
            .pipe(untilDestroy(this), filter(ev => ev.origin === 'source' && ev.broadcast), withLatestFrom(suspect$))
            .subscribe(([{ elem }, suspect]) => {
            if (elem) {
                this.handleBroadcast(elem.match, suspect.result, 'text');
            }
        });
        sourceHtml$
            .pipe(withLatestFrom(suspect$, contentMode$), filter(([, , content]) => content === 'html'), filter(([, suspect]) => suspect && suspect.result && !suspect.result.html.value))
            .subscribe(([match, suspect]) => this.handleBroadcast(match, suspect.result, 'html'));
    }
    /**
     * Life-cycle method
     * empty for `untilDestroy` rxjs operator
     */
    ngOnDestroy() { }
}
SuspectTextHelperDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.3", ngImport: i0, type: SuspectTextHelperDirective, deps: [{ token: i1.HighlightService }, { token: i2.ReportService }], target: i0.ɵɵFactoryTarget.Directive });
SuspectTextHelperDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "13.3.3", type: SuspectTextHelperDirective, selector: "[crSuspectTextHelper]", inputs: { host: "host" }, queries: [{ propertyName: "children", predicate: MatchComponent }], ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.3", ngImport: i0, type: SuspectTextHelperDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[crSuspectTextHelper]',
                }]
        }], ctorParameters: function () { return [{ type: i1.HighlightService }, { type: i2.ReportService }]; }, propDecorators: { host: [{
                type: Input
            }], children: [{
                type: ContentChildren,
                args: [MatchComponent]
            }] } });
//# sourceMappingURL=data:application/json;base64,