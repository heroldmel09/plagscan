import { Component } from '@angular/core';
import { filter, map, withLatestFrom } from 'rxjs/operators';
import { untilDestroy } from '../../../shared/operators/untilDestroy';
import { MatchType } from '../../models';
import { findRespectiveStart } from '../../utils/match-helpers';
import { truthy } from '../../utils/operators';
import { HtmlHelperBase } from './HtmlHelperBase';
import iframeScript from './one-to-one-iframe-logic';
import * as i0 from "@angular/core";
import * as i1 from "../../services/highlight.service";
import * as i2 from "../../services/match.service";
import * as i3 from "../../services/report.service";
import * as i4 from "../../services/copyleaks-translate.service";
export class SuspectHtmlHelperComponent extends HtmlHelperBase {
    constructor(highlightService, matchService, renderer, element, reportService, translateService) {
        super(renderer, element, reportService, translateService);
        this.highlightService = highlightService;
        this.matchService = matchService;
        const js = renderer.createElement('script');
        js.textContent = iframeScript;
        this.script = js.outerHTML;
    }
    /**
     * Handle `match-select` event
     * @param event the event object
     */
    handleMatchSelect(event) {
        this.highlightService.setSuspectHtmlMatch(event.index !== -1 ? this.matches[event.index] : null);
    }
    /**
     * Life-cycle method
     * empty for `untilDestroy` rxjs operator
     */
    ngOnDestroy() { }
    /**
     * Life-cycle method
     * subscribe to:
     * - suspect changes
     * - view mode changes
     * - source and suspect html matches
     */
    ngOnInit() {
        const { suspectResult$: suspect$, contentMode$ } = this.reportService;
        const { sourceHtml$, textMatchClick$ } = this.highlightService;
        const { suspectHtmlMatches$ } = this.matchService;
        suspect$
            .pipe(untilDestroy(this), truthy())
            .subscribe(suspect => suspect.result && suspect.result.html && (this.html = suspect.result.html.value));
        suspectHtmlMatches$.pipe(untilDestroy(this)).subscribe(matches => this.renderMatches(matches));
        // jump$
        // 	.pipe(
        // 		untilDestroy(this),
        // 		withLatestFrom(viewMode$, contentMode$),
        // 		filter(([, view, content]) => view === 'one-to-one' && content === 'html')
        // 	)
        // 	.subscribe(([forward]) => this.messageFrame({ type: 'match-jump', forward } as MatchJumpEvent));
        textMatchClick$
            .pipe(untilDestroy(this), filter(ev => ev.origin === 'source' && ev.broadcast), map(ev => ev.elem), withLatestFrom(suspect$, suspectHtmlMatches$, contentMode$), filter(([, , matches, content]) => content === 'html' && !!matches))
            .subscribe(([elem, suspect, matches]) => {
            if (elem && suspect && suspect.result) {
                const comparison = suspect.result.html.comparison[MatchType[elem.match.type]];
                const [start] = findRespectiveStart(elem.match.start, comparison, true);
                const found = matches.findIndex(m => m.start === start);
                this.markSingleMatchInFrame(found);
            }
            else {
                this.markSingleMatchInFrame(-1);
            }
        });
        sourceHtml$
            .pipe(withLatestFrom(suspect$, suspectHtmlMatches$, contentMode$), filter(([, , matches, content]) => content === 'html' && !!matches), filter(([, suspect]) => suspect && suspect.result && !!suspect.result.html.value))
            .subscribe(([match, suspect, matches]) => {
            if (match && suspect && suspect.result) {
                const comparison = suspect.result.html.comparison[MatchType[match.type]];
                const [start] = findRespectiveStart(match.start, comparison, true);
                const found = matches.findIndex(m => m.start === start);
                this.markSingleMatchInFrame(found);
            }
            else {
                this.markSingleMatchInFrame(-1);
            }
        });
    }
}
SuspectHtmlHelperComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.3", ngImport: i0, type: SuspectHtmlHelperComponent, deps: [{ token: i1.HighlightService }, { token: i2.MatchService }, { token: i0.Renderer2 }, { token: i0.ElementRef }, { token: i3.ReportService }, { token: i4.CopyleaksTranslateService }], target: i0.ɵɵFactoryTarget.Component });
SuspectHtmlHelperComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.3.3", type: SuspectHtmlHelperComponent, selector: "iframe[cr-suspect-html-helper]", usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: ["#sidebar.opened+#page-container{left:0px!important}#page-container .c{pointer-events:none!important}#page-container .t{pointer-events:all!important}span[exclude]{font-style:italic;opacity:.75}span[exclude-partial-scan]{filter:blur(6px);cursor:pointer}span[match]{cursor:pointer;color:#000}span[match] a:link{pointer-events:none}span[ignored]{font-style:italic}span[match][data-type=\"0\"]{background-color:#f66}span[match][data-type=\"0\"].hover{background-color:#ff8080}span[match][data-type=\"1\"]{background-color:#ff9a9a}span[match][data-type=\"1\"].hover{background-color:#ffb4b4}span[match][data-type=\"2\"]{background-color:#ffd9b0}span[match][data-type=\"2\"].hover{background-color:#ffe5ca}span[match][on]{background-color:gold!important}\n"] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.3", ngImport: i0, type: SuspectHtmlHelperComponent, decorators: [{
            type: Component,
            args: [{ selector: 'iframe[cr-suspect-html-helper]', template: '', styles: ["#sidebar.opened+#page-container{left:0px!important}#page-container .c{pointer-events:none!important}#page-container .t{pointer-events:all!important}span[exclude]{font-style:italic;opacity:.75}span[exclude-partial-scan]{filter:blur(6px);cursor:pointer}span[match]{cursor:pointer;color:#000}span[match] a:link{pointer-events:none}span[ignored]{font-style:italic}span[match][data-type=\"0\"]{background-color:#f66}span[match][data-type=\"0\"].hover{background-color:#ff8080}span[match][data-type=\"1\"]{background-color:#ff9a9a}span[match][data-type=\"1\"].hover{background-color:#ffb4b4}span[match][data-type=\"2\"]{background-color:#ffd9b0}span[match][data-type=\"2\"].hover{background-color:#ffe5ca}span[match][on]{background-color:gold!important}\n"] }]
        }], ctorParameters: function () { return [{ type: i1.HighlightService }, { type: i2.MatchService }, { type: i0.Renderer2 }, { type: i0.ElementRef }, { type: i3.ReportService }, { type: i4.CopyleaksTranslateService }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3VzcGVjdC1odG1sLWhlbHBlci5jb21wb25lbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9wbGFnaWFyaXNtLXJlcG9ydC9zcmMvbGliL3BsYWdpYXJpc20tcmVwb3J0L2NvbXBvbmVudHMvaHRtbC1oZWxwZXJzL3N1c3BlY3QtaHRtbC1oZWxwZXIuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQTRDLE1BQU0sZUFBZSxDQUFDO0FBQ3BGLE9BQU8sRUFBRSxNQUFNLEVBQUUsR0FBRyxFQUFFLGNBQWMsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQzdELE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSx3Q0FBd0MsQ0FBQztBQUN0RSxPQUFPLEVBQW9CLFNBQVMsRUFBRSxNQUFNLGNBQWMsQ0FBQztBQUkzRCxPQUFPLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSwyQkFBMkIsQ0FBQztBQUNoRSxPQUFPLEVBQUUsTUFBTSxFQUFFLE1BQU0sdUJBQXVCLENBQUM7QUFDL0MsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLGtCQUFrQixDQUFDO0FBQ2xELE9BQU8sWUFBWSxNQUFNLDJCQUEyQixDQUFDOzs7Ozs7QUFRckQsTUFBTSxPQUFPLDBCQUEyQixTQUFRLGNBQWM7SUFDN0QsWUFDUyxnQkFBa0MsRUFDbEMsWUFBMEIsRUFDbEMsUUFBbUIsRUFDbkIsT0FBc0MsRUFDdEMsYUFBNEIsRUFDNUIsZ0JBQTJDO1FBRTNDLEtBQUssQ0FBQyxRQUFRLEVBQUUsT0FBTyxFQUFFLGFBQWEsRUFBRSxnQkFBZ0IsQ0FBQyxDQUFDO1FBUGxELHFCQUFnQixHQUFoQixnQkFBZ0IsQ0FBa0I7UUFDbEMsaUJBQVksR0FBWixZQUFZLENBQWM7UUFPbEMsTUFBTSxFQUFFLEdBQUcsUUFBUSxDQUFDLGFBQWEsQ0FBQyxRQUFRLENBQXNCLENBQUM7UUFDakUsRUFBRSxD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QUMsQ0FBQzthQUNoQztRQUNGLENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQzs7dUhBdEZXLDBCQUEwQjsyR0FBMUIsMEJBQTBCLDZGQUg1QixFQUFFOzJGQUdBLDBCQUEwQjtrQkFMdEMsU0FBUzsrQkFDQyxnQ0FBZ0MsWUFDaEMsRUFBRSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCwgRWxlbWVudFJlZiwgT25EZXN0cm95LCBPbkluaXQsIFJlbmRlcmVyMiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgZmlsdGVyLCBtYXAsIHdpdGhMYXRlc3RGcm9tIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuaW1wb3J0IHsgdW50aWxEZXN0cm95IH0gZnJvbSAnLi4vLi4vLi4vc2hhcmVkL29wZXJhdG9ycy91bnRpbERlc3Ryb3knO1xuaW1wb3J0IHsgTWF0Y2hTZWxlY3RFdmVudCwgTWF0Y2hUeXBlIH0gZnJvbSAnLi4vLi4vbW9kZWxzJztcbmltcG9ydCB7IEhpZ2hsaWdodFNlcnZpY2UgfSBmcm9tICcuLi8uLi9zZXJ2aWNlcy9oaWdobGlnaHQuc2VydmljZSc7XG5pbXBvcnQgeyBNYXRjaFNlcnZpY2UgfSBmcm9tICcuLi8uLi9zZXJ2aWNlcy9tYXRjaC5zZXJ2aWNlJztcbmltcG9ydCB7IFJlcG9ydFNlcnZpY2UgfSBmcm9tICcuLi8uLi9zZXJ2aWNlcy9yZXBvcnQuc2VydmljZSc7XG5pbXBvcnQgeyBmaW5kUmVzcGVjdGl2ZVN0YXJ0IH0gZnJvbSAnLi4vLi4vdXRpbHMvbWF0Y2gtaGVscGVycyc7XG5pbXBvcnQgeyB0cnV0aHkgfSBmcm9tICcuLi8uLi91dGlscy9vcGVyYXRvcnMnO1xuaW1wb3J0IHsgSHRtbEhlbHBlckJhc2UgfSBmcm9tICcuL0h0bWxIZWxwZXJCYXNlJztcbmltcG9ydCBpZnJhbWVTY3JpcHQgZnJvbSAnLi9vbmUtdG8tb25lLWlmcmFtZS1sb2dpYyc7XG5pbXBvcnQgeyBDb3B5bGVha3NUcmFuc2xhdGVTZXJ2aWNlIH0gZnJvbSAnLi4vLi4vc2VydmljZXMvY29weWxlYWtzLXRyYW5zbGF0ZS5zZXJ2aWNlJztcblxuQENvbXBvbmVudCh7XG5cdHNlbGVjdG9yOiAnaWZyYW1lW2NyLXN1c3BlY3QtaHRtbC1oZWxwZXJdJyxcblx0dGVtcGxhdGU6ICcnLFxuXHRzdHlsZVVybHM6IFsnLi9odG1sLWhlbHBlci5zY3NzJ10sXG59KVxuZXhwb3J0IGNsYXNzIFN1c3BlY3RIdG1sSGVscGVyQ29tcG9uZW50IGV4dGVuZHMgSHRtbEhlbHBlckJhc2UgaW1wbGVtZW50cyBPbkluaXQsIE9uRGVzdHJveSB7XG5cdGNvbnN0cnVjdG9yKFxuXHRcdHByaXZhdGUgaGlnaGxpZ2h0U2VydmljZTogSGlnaGxpZ2h0U2VydmljZSxcblx0XHRwcml2YXRlIG1hdGNoU2VydmljZTogTWF0Y2hTZXJ2aWNlLFxuXHRcdHJlbmRlcmVyOiBSZW5kZXJlcjIsXG5cdFx0ZWxlbWVudDogRWxlbWVudFJlZjxIVE1MSUZyYW1lRWxlbWVudD4sXG5cdFx0cmVwb3J0U2VydmljZTogUmVwb3J0U2VydmljZSxcblx0XHR0cmFuc2xhdGVTZXJ2aWNlOiBDb3B5bGVha3NUcmFuc2xhdGVTZXJ2aWNlXG5cdCkge1xuXHRcdHN1cGVyKHJlbmRlcmVyLCBlbGVtZW50LCByZXBvcnRTZXJ2aWNlLCB0cmFuc2xhdGVTZXJ2aWNlKTtcblx0XHRjb25zdCBqcyA9IHJlbmRlcmVyLmNyZWF0ZUVsZW1lbnQoJ3NjcmlwdCcpIGFzIEhUTUxTY3JpcHRFbGVtZW50O1xuXHRcdGpzLnRleHRDb250ZW50ID0gaWZyYW1lU2NyaXB0O1xuXHRcdHRoaXMuc2NyaXB0ID0ganMub3V0ZXJIVE1MO1xuXHR9XG5cblx0LyoqXG5cdCAqIEhhbmRsZSBgbWF0Y2gtc2VsZWN0YCBldmVudFxuXHQgKiBAcGFyYW0gZXZlbnQgdGhlIGV2ZW50IG9iamVjdFxuXHQgKi9cblx0aGFuZGxlTWF0Y2hTZWxlY3QoZXZlbnQ6IE1hdGNoU2VsZWN0RXZlbnQpIHtcblx0XHR0aGlzLmhpZ2hsaWdodFNlcnZpY2Uuc2V0U3VzcGVjdEh0bWxNYXRjaChldmVudC5pbmRleCAhPT0gLTEgPyB0aGlzLm1hdGNoZXNbZXZlbnQuaW5kZXhdIDogbnVsbCk7XG5cdH1cblxuXHQvKipcblx0ICogTGlmZS1jeWNsZSBtZXRob2Rcblx0ICogZW1wdHkgZm9yIGB1bnRpbERlc3Ryb3lgIHJ4anMgb3BlcmF0b3Jcblx0ICovXG5cdG5nT25EZXN0cm95KCkge31cblxuXHQvKipcblx0ICogTGlmZS1jeWNsZSBtZXRob2Rcblx0ICogc3Vic2NyaWJlIHRvOlxuXHQgKiAtIHN1c3BlY3QgY2hhbmdlc1xuXHQgKiAtIHZpZXcgbW9kZSBjaGFuZ2VzXG5cdCAqIC0gc291cmNlIGFuZCBzdXNwZWN0IGh0bWwgbWF0Y2hlc1xuXHQgKi9cblx0bmdPbkluaXQoKSB7XG5cdFx0Y29uc3QgeyBzdXNwZWN0UmVzdWx0JDogc3VzcGVjdCQsIGNvbnRlbnRNb2RlJCB9ID0gdGhpcy5yZXBvcnRTZXJ2aWNlO1xuXHRcdGNvbnN0IHsgc291cmNlSHRtbCQsIHRleHRNYXRjaENsaWNrJCB9ID0gdGhpcy5oaWdobGlnaHRTZXJ2aWNlO1xuXHRcdGNvbnN0IHsgc3VzcGVjdEh0bWxNYXRjaGVzJCB9ID0gdGhpcy5tYXRjaFNlcnZpY2U7XG5cdFx0c3VzcGVjdCRcblx0XHRcdC5waXBlKHVudGlsRGVzdHJveSh0aGlzKSwgdHJ1dGh5KCkpXG5cdFx0XHQuc3Vic2NyaWJlKHN1c3BlY3QgPT4gc3VzcGVjdC5yZXN1bHQgJiYgc3VzcGVjdC5yZXN1bHQuaHRtbCAmJiAodGhpcy5odG1sID0gc3VzcGVjdC5yZXN1bHQuaHRtbC52YWx1ZSkpO1xuXHRcdHN1c3BlY3RIdG1sTWF0Y2hlcyQucGlwZSh1bnRpbERlc3Ryb3kodGhpcykpLnN1YnNjcmliZShtYXRjaGVzID0+IHRoaXMucmVuZGVyTWF0Y2hlcyhtYXRjaGVzKSk7XG5cdFx0Ly8ganVtcCRcblx0XHQvLyBcdC5waXBlKFxuXHRcdC8vIFx0XHR1bnRpbERlc3Ryb3kodGhpcyksXG5cdFx0Ly8gXHRcdHdpdGhMYXRlc3RGcm9tKHZpZXdNb2RlJCwgY29udGVudE1vZGUkKSxcblx0XHQvLyBcdFx0ZmlsdGVyKChbLCB2aWV3LCBjb250ZW50XSkgPT4gdmlldyA9PT0gJ29uZS10by1vbmUnICYmIGNvbnRlbnQgPT09ICdodG1sJylcblx0XHQvLyBcdClcblx0XHQvLyBcdC5zdWJzY3JpYmUoKFtmb3J3YXJkXSkgPT4gdGhpcy5tZXNzYWdlRnJhbWUoeyB0eXBlOiAnbWF0Y2gtanVtcCcsIGZvcndhcmQgfSBhcyBNYXRjaEp1bXBFdmVudCkpO1xuXG5cdFx0dGV4dE1hdGNoQ2xpY2skXG5cdFx0XHQucGlwZShcblx0XHRcdFx0dW50aWxEZXN0cm95KHRoaXMpLFxuXHRcdFx0XHRmaWx0ZXIoZXYgPT4gZXYub3JpZ2luID09PSAnc291cmNlJyAmJiBldi5icm9hZGNhc3QpLFxuXHRcdFx0XHRtYXAoZXYgPT4gZXYuZWxlbSksXG5cdFx0XHRcdHdpdGhMYXRlc3RGcm9tKHN1c3BlY3QkLCBzdXNwZWN0SHRtbE1hdGNoZXMkLCBjb250ZW50TW9kZSQpLFxuXHRcdFx0XHRmaWx0ZXIoKFssICwgbWF0Y2hlcywgY29udGVudF0pID0+IGNvbnRlbnQgPT09ICdodG1sJyAmJiAhIW1hdGNoZXMpXG5cdFx0XHQpXG5cdFx0XHQuc3Vic2NyaWJlKChbZWxlbSwgc3VzcGVjdCwgbWF0Y2hlc10pID0+IHtcblx0XHRcdFx0aWYgKGVsZW0gJiYgc3VzcGVjdCAmJiBzdXNwZWN0LnJlc3VsdCkge1xuXHRcdFx0XHRcdGNvbnN0IGNvbXBhcmlzb24gPSBzdXNwZWN0LnJlc3VsdC5odG1sLmNvbXBhcmlzb25bTWF0Y2hUeXBlW2VsZW0ubWF0Y2gudHlwZV1dO1xuXHRcdFx0XHRcdGNvbnN0IFtzdGFydF0gPSBmaW5kUmVzcGVjdGl2ZVN0YXJ0KGVsZW0ubWF0Y2guc3RhcnQsIGNvbXBhcmlzb24sIHRydWUpO1xuXHRcdFx0XHRcdGNvbnN0IGZvdW5kID0gbWF0Y2hlcy5maW5kSW5kZXgobSA9PiBtLnN0YXJ0ID09PSBzdGFydCk7XG5cdFx0XHRcdFx0dGhpcy5tYXJrU2luZ2xlTWF0Y2hJbkZyYW1lKGZvdW5kKTtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHR0aGlzLm1hcmtTaW5nbGVNYXRjaEluRnJhbWUoLTEpO1xuXHRcdFx0XHR9XG5cdFx0XHR9KTtcblx0XHRzb3VyY2VIdG1sJFxuXHRcdFx0LnBpcGUoXG5cdFx0XHRcdHdpdGhMYXRlc3RGcm9tKHN1c3BlY3QkLCBzdXNwZWN0SHRtbE1hdGNoZXMkLCBjb250ZW50TW9kZSQpLFxuXHRcdFx0XHRmaWx0ZXIoKFssICwgbWF0Y2hlcywgY29udGVudF0pID0+IGNvbnRlbnQgPT09ICdodG1sJyAmJiAhIW1hdGNoZXMpLFxuXHRcdFx0XHRmaWx0ZXIoKFssIHN1c3BlY3RdKSA9PiBzdXNwZWN0ICYmIHN1c3BlY3QucmVzdWx0ICYmICEhc3VzcGVjdC5yZXN1bHQuaHRtbC52YWx1ZSlcblx0XHRcdClcblx0XHRcdC5zdWJzY3JpYmUoKFttYXRjaCwgc3VzcGVjdCwgbWF0Y2hlc10pID0+IHtcblx0XHRcdFx0aWYgKG1hdGNoICYmIHN1c3BlY3QgJiYgc3VzcGVjdC5yZXN1bHQpIHtcblx0XHRcdFx0XHRjb25zdCBjb21wYXJpc29uID0gc3VzcGVjdC5yZXN1bHQuaHRtbC5jb21wYXJpc29uW01hdGNoVHlwZVttYXRjaC50eXBlXV07XG5cdFx0XHRcdFx0Y29uc3QgW3N0YXJ0XSA9IGZpbmRSZXNwZWN0aXZlU3RhcnQobWF0Y2guc3RhcnQsIGNvbXBhcmlzb24sIHRydWUpO1xuXHRcdFx0XHRcdGNvbnN0IGZvdW5kID0gbWF0Y2hlcy5maW5kSW5kZXgobSA9PiBtLnN0YXJ0ID09PSBzdGFydCk7XG5cdFx0XHRcdFx0dGhpcy5tYXJrU2luZ2xlTWF0Y2hJbkZyYW1lKGZvdW5kKTtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHR0aGlzLm1hcmtTaW5nbGVNYXRjaEluRnJhbWUoLTEpO1xuXHRcdFx0XHR9XG5cdFx0XHR9KTtcblx0fVxufVxuIl19