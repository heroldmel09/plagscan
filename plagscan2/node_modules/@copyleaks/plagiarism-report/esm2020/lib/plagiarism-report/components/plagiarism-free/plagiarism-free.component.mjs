import { Component } from '@angular/core';
import { IMAGES } from '../../assets/images';
import { CompleteResultNotificationAlertSeverity } from '../../models';
import * as i0 from "@angular/core";
import * as i1 from "../../services/copyleaks-translate.service";
import * as i2 from "../../services/report.service";
import * as i3 from "../notifications/notifications.component";
import * as i4 from "@angular/common";
import * as i5 from "../../../shared/pipes/safe.pipe";
export class PlagiarismFreeComponent {
    constructor(translateService, reportService) {
        this.translateService = translateService;
        this.reportService = reportService;
        this.plagFreeImg = IMAGES.PLAGIARISM_FREE_PNG;
        this.isHighNotificationSeverity = false;
    }
    /**
     * init translation on componenet init
     */
    ngOnInit() {
        this.translations = this.translateService.translations;
        this.results$ = this.reportService.results$;
    }
    /**
     * wil be notified on notifications severity change
     * @param severity latest notifications severity
     */
    onNotificationSeverityChange(severity) {
        setTimeout(() => {
            this.isHighNotificationSeverity =
                severity === CompleteResultNotificationAlertSeverity.High ||
                    severity === CompleteResultNotificationAlertSeverity.VeryHigh;
        });
    }
}
PlagiarismFreeComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.3", ngImport: i0, type: PlagiarismFreeComponent, deps: [{ token: i1.CopyleaksTranslateService }, { token: i2.ReportService }], target: i0.ɵɵFactoryTarget.Component });
PlagiarismFreeComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.3.3", type: PlagiarismFreeComponent, selector: "cr-plagiarism-free", ngImport: i0, template: "<img [src]=\"plagFreeImg | safe : 'url'\" alt=\"Matches free\" />\n<label *ngIf=\"!isHighNotificationSeverity\">\n\t<ng-container *ngIf=\"(results$ | async).length\">\n\t\t{{ translations?.PLAGIARISM_FREE_WITH_RESULTS || 'No Matches Found With Applied Filters' }}\n\t</ng-container>\n\t<ng-container *ngIf=\"!(results$ | async).length\">\n\t\t{{ translations?.PLAGIARISM_FREE || 'No Matches Found' }}\n\t</ng-container>\n</label>\n<label *ngIf=\"isHighNotificationSeverity\">\n\t{{ translations?.PLAGIARISM_FREE_WITH_NOTIFICATIONS || 'Cheating Detected' }}\n</label>\n\n<div class=\"notification-section\">\n\t<cr-notifications (severityChange)=\"onNotificationSeverityChange($event)\"></cr-notifications>\n</div>\n", styles: [":host{display:flex;flex-flow:column nowrap;place-items:center center}img{width:50%}label{margin-top:-1em;font-size:1.5em;text-align:center;line-height:1.5}.notification-section{margin-top:10px;font-weight:bolder}\n"], components: [{ type: i3.NotificationsComponent, selector: "cr-notifications", outputs: ["severityChange"] }], directives: [{ type: i4.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }], pipes: { "safe": i5.SafePipe, "async": i4.AsyncPipe } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.3", ngImport: i0, type: PlagiarismFreeComponent, decorators: [{
            type: Component,
            args: [{ selector: 'cr-plagiarism-free', template: "<img [src]=\"plagFreeImg | safe : 'url'\" alt=\"Matches free\" />\n<label *ngIf=\"!isHighNotificationSeverity\">\n\t<ng-container *ngIf=\"(results$ | async).length\">\n\t\t{{ translations?.PLAGIARISM_FREE_WITH_RESULTS || 'No Matches Found With Applied Filters' }}\n\t</ng-container>\n\t<ng-container *ngIf=\"!(results$ | async).length\">\n\t\t{{ translations?.PLAGIARISM_FREE || 'No Matches Found' }}\n\t</ng-container>\n</label>\n<label *ngIf=\"isHighNotificationSeverity\">\n\t{{ translations?.PLAGIARISM_FREE_WITH_NOTIFICATIONS || 'Cheating Detected' }}\n</label>\n\n<div class=\"notification-section\">\n\t<cr-notifications (severityChange)=\"onNotificationSeverityChange($event)\"></cr-notifications>\n</div>\n", styles: [":host{display:flex;flex-flow:column nowrap;place-items:center center}img{width:50%}label{margin-top:-1em;font-size:1.5em;text-align:center;line-height:1.5}.notification-section{margin-top:10px;font-weight:bolder}\n"] }]
        }], ctorParameters: function () { return [{ type: i1.CopyleaksTranslateService }, { type: i2.ReportService }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGxhZ2lhcmlzbS1mcmVlLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL3BsYWdpYXJpc20tcmVwb3J0L3NyYy9saWIvcGxhZ2lhcmlzbS1yZXBvcnQvY29tcG9uZW50cy9wbGFnaWFyaXNtLWZyZWUvcGxhZ2lhcmlzbS1mcmVlLmNvbXBvbmVudC50cyIsIi4uLy4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL3BsYWdpYXJpc20tcmVwb3J0L3NyYy9saWIvcGxhZ2lhcmlzbS1yZXBvcnQvY29tcG9uZW50cy9wbGFnaWFyaXNtLWZyZWUvcGxhZ2lhcmlzbS1mcmVlLmNvbXBvbmVudC5odG1sIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQVUsTUFBTSxlQUFlLENBQUM7QUFFbEQsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBQzdDLE9BQU8sRUFBRSx1Q0FBdUMsRUFBYyxNQUFNLGNBQWMsQ0FBQzs7Ozs7OztBQVNuRixNQUFNLE9BQU8sdUJBQXVCO0lBTW5DLFlBQW9CLGdCQUEyQyxFQUFVLGFBQTRCO1FBQWpGLHFCQUFnQixHQUFoQixnQkFBZ0IsQ0FBMkI7UUFBVSxrQkFBYSxHQUFiLGFBQWEsQ0FBZTtRQUxyRixnQkFBVyxHQUFHLE1BQU0sQ0FBQyxtQkFBbUIsQ0FBQztRQUVsRCwrQkFBMEIsR0FBRyxLQUFLLENBQUM7SUFHOEQsQ0FBQztJQUN6Rzs7T0FFRztJQUNILFFBQVE7UUFDUCxJQUFJLENBQUMsWUFBWSxHQUFHLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxZQUFZLENBQUM7UUFDdkQsSUFBSSxDQUFDLFFBQVEsR0FBRyxJQUFJLENBQUMsYUFBYSxDQUFDLFFBQVEsQ0FBQztJQUM3QyxDQUFDO0lBRUQ7OztPQUdHO0lBQ0gsNEJBQTRCLENBQUMsUUFBaUQ7UUFDN0UsVUFBVSxDQUFDLEdBQUcsRUFBRTtZQUNmLElBQUksQ0FBQywwQkFBMEI7Z0JBQzlCLFFBQVEsS0FBSyx1Q0FBdUMsQ0FBQyxJQUFJO29CQUN6RCxRQUFRLEtBQUssdUNBQXVDLENBQUMsUUFBUSxDQUFDO1FBQ2hFLENBQUMsQ0FBQyxDQUFDO0lBQ0osQ0FBQzs7b0hBekJXLHVCQUF1Qjt3R0FBdkIsdUJBQXVCLDBEQ1pwQyw2c0JBZ0JBOzJGREphLHVCQUF1QjtrQkFMbkMsU0FBUzsrQkFDQyxvQkFBb0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQsIE9uSW5pdCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMvaW50ZXJuYWwvT2JzZXJ2YWJsZSc7XG5pbXBvcnQgeyBJTUFHRVMgfSBmcm9tICcuLi8uLi9hc3NldHMvaW1hZ2VzJztcbmltcG9ydCB7IENvbXBsZXRlUmVzdWx0Tm90aWZpY2F0aW9uQWxlcnRTZXZlcml0eSwgUmVzdWx0SXRlbSB9IGZyb20gJy4uLy4uL21vZGVscyc7XG5pbXBvcnQgeyBDb3B5bGVha3NUcmFuc2xhdGVTZXJ2aWNlLCBDb3B5bGVha3NUcmFuc2xhdGlvbnMgfSBmcm9tICcuLi8uLi9zZXJ2aWNlcy9jb3B5bGVha3MtdHJhbnNsYXRlLnNlcnZpY2UnO1xuaW1wb3J0IHsgUmVwb3J0U2VydmljZSB9IGZyb20gJy4uLy4uL3NlcnZpY2VzL3JlcG9ydC5zZXJ2aWNlJztcblxuQENvbXBvbmVudCh7XG5cdHNlbGVjdG9yOiAnY3ItcGxhZ2lhcmlzbS1mcmVlJyxcblx0dGVtcGxhdGVVcmw6IGAuL3BsYWdpYXJpc20tZnJlZS5jb21wb25lbnQuaHRtbGAsXG5cdHN0eWxlVXJsczogWycuL3BsYWdpYXJpc20tZnJlZS5jb21wb25lbnQuc2NzcyddLFxufSlcbmV4cG9ydCBjbGFzcyBQbGFnaWFyaXNtRnJlZUNvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCB7XG5cdHB1YmxpYyByZWFkb25seSBwbGFnRnJlZUltZyA9IElNQUdFUy5QTEFHSUFSSVNNX0ZSRUVfUE5HO1xuXHRwdWJsaWMgdHJhbnNsYXRpb25zOiBDb3B5bGVha3NUcmFuc2xhdGlvbnM7XG5cdHB1YmxpYyBpc0hpZ2hOb3RpZmljYXRpb25TZXZlcml0eSA9IGZhbHNlO1xuXHRwdWJsaWMgcmVzdWx0cyQ6IE9ic2VydmFibGU8UmVzdWx0SXRlbVtdPjtcblxuXHRjb25zdHJ1Y3Rvcihwcml2YXRlIHRyYW5zbGF0ZVNlcnZpY2U6IENvcHlsZWFrc1RyYW5zbGF0ZVNlcnZpY2UsIHByaXZhdGUgcmVwb3J0U2VydmljZTogUmVwb3J0U2VydmljZSkge31cblx0LyoqXG5cdCAqIGluaXQgdHJhbnNsYXRpb24gb24gY29tcG9uZW5ldCBpbml0XG5cdCAqL1xuXHRuZ09uSW5pdCgpIHtcblx0XHR0aGlzLnRyYW5zbGF0aW9ucyA9IHRoaXMudHJhbnNsYXRlU2VydmljZS50cmFuc2xhdGlvbnM7XG5cdFx0dGhpcy5yZXN1bHRzJCA9IHRoaXMucmVwb3J0U2VydmljZS5yZXN1bHRzJDtcblx0fVxuXG5cdC8qKlxuXHQgKiB3aWwgYmUgbm90aWZpZWQgb24gbm90aWZpY2F0aW9ucyBzZXZlcml0eSBjaGFuZ2Vcblx0ICogQHBhcmFtIHNldmVyaXR5IGxhdGVzdCBub3RpZmljYXRpb25zIHNldmVyaXR5XG5cdCAqL1xuXHRvbk5vdGlmaWNhdGlvblNldmVyaXR5Q2hhbmdlKHNldmVyaXR5OiBDb21wbGV0ZVJlc3VsdE5vdGlmaWNhdGlvbkFsZXJ0U2V2ZXJpdHkpIHtcblx0XHRzZXRUaW1lb3V0KCgpID0+IHtcblx0XHRcdHRoaXMuaXNIaWdoTm90aWZpY2F0aW9uU2V2ZXJpdHkgPVxuXHRcdFx0XHRzZXZlcml0eSA9PT0gQ29tcGxldGVSZXN1bHROb3RpZmljYXRpb25BbGVydFNldmVyaXR5LkhpZ2ggfHxcblx0XHRcdFx0c2V2ZXJpdHkgPT09IENvbXBsZXRlUmVzdWx0Tm90aWZpY2F0aW9uQWxlcnRTZXZlcml0eS5WZXJ5SGlnaDtcblx0XHR9KTtcblx0fVxufVxuIiwiPGltZyBbc3JjXT1cInBsYWdGcmVlSW1nIHwgc2FmZSA6ICd1cmwnXCIgYWx0PVwiTWF0Y2hlcyBmcmVlXCIgLz5cbjxsYWJlbCAqbmdJZj1cIiFpc0hpZ2hOb3RpZmljYXRpb25TZXZlcml0eVwiPlxuXHQ8bmctY29udGFpbmVyICpuZ0lmPVwiKHJlc3VsdHMkIHwgYXN5bmMpLmxlbmd0aFwiPlxuXHRcdHt7IHRyYW5zbGF0aW9ucz8uUExBR0lBUklTTV9GUkVFX1dJVEhfUkVTVUxUUyB8fCAnTm8gTWF0Y2hlcyBGb3VuZCBXaXRoIEFwcGxpZWQgRmlsdGVycycgfX1cblx0PC9uZy1jb250YWluZXI+XG5cdDxuZy1jb250YWluZXIgKm5nSWY9XCIhKHJlc3VsdHMkIHwgYXN5bmMpLmxlbmd0aFwiPlxuXHRcdHt7IHRyYW5zbGF0aW9ucz8uUExBR0lBUklTTV9GUkVFIHx8ICdObyBNYXRjaGVzIEZvdW5kJyB9fVxuXHQ8L25nLWNvbnRhaW5lcj5cbjwvbGFiZWw+XG48bGFiZWwgKm5nSWY9XCJpc0hpZ2hOb3RpZmljYXRpb25TZXZlcml0eVwiPlxuXHR7eyB0cmFuc2xhdGlvbnM/LlBMQUdJQVJJU01fRlJFRV9XSVRIX05PVElGSUNBVElPTlMgfHwgJ0NoZWF0aW5nIERldGVjdGVkJyB9fVxuPC9sYWJlbD5cblxuPGRpdiBjbGFzcz1cIm5vdGlmaWNhdGlvbi1zZWN0aW9uXCI+XG5cdDxjci1ub3RpZmljYXRpb25zIChzZXZlcml0eUNoYW5nZSk9XCJvbk5vdGlmaWNhdGlvblNldmVyaXR5Q2hhbmdlKCRldmVudClcIj48L2NyLW5vdGlmaWNhdGlvbnM+XG48L2Rpdj5cbiJdfQ==