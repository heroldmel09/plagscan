import { Component, Output, EventEmitter } from '@angular/core';
import { NotificationsDialogComponent } from '../notifications-dialog/notifications-dialog.component';
import { untilDestroy } from '../../../shared/operators/untilDestroy';
import { filter } from 'rxjs/operators';
import { CompleteResultNotificationAlertSeverity } from '../../models';
import { EReportViewModel } from '../../services/view-mode.service';
import { ALERTS } from '../../utils/constants';
import * as i0 from "@angular/core";
import * as i1 from "@angular/material/dialog";
import * as i2 from "../../services/view-mode.service";
import * as i3 from "../../services/report.service";
import * as i4 from "@angular/cdk/a11y";
import * as i5 from "@angular/material/button";
import * as i6 from "@angular/material/icon";
import * as i7 from "@angular/common";
import * as i8 from "@angular/flex-layout/extended";
export class NotificationsComponent {
    constructor(matDialog, viewModeService, reportService, announcer) {
        this.matDialog = matDialog;
        this.viewModeService = viewModeService;
        this.reportService = reportService;
        this.announcer = announcer;
        this.severities = CompleteResultNotificationAlertSeverity;
        this.eReportViewModel = EReportViewModel;
        this.severityChange = new EventEmitter();
    }
    /**
     * Life-cycle method
     */
    ngOnInit() {
        this.currentViewMode$ = this.viewModeService.reportViewMode$;
        this.reportService.completeResult$
            .pipe(untilDestroy(this), filter(c => !!c.notifications && !!c.notifications.alerts && !!c.notifications.alerts.length))
            .subscribe(completeResult => {
            const notifications = JSON.parse(JSON.stringify(completeResult.notifications));
            notifications.alerts = notifications.alerts.filter(n => n.code != ALERTS.SUSPECTED_AI_TEXT_DETECTED);
            if (notifications.alerts.length) {
                const alertSeverities = notifications.alerts.map(s => +s.severity);
                this.severity = Math.max(...alertSeverities);
                this.severityChange.emit(this.severity);
            }
        });
    }
    /**
     * shows the notification dialogs with the alerts
     */
    showNotificationsDialog() {
        this.matDialog.open(NotificationsDialogComponent, {
            autoFocus: false,
            maxWidth: '500px',
            data: this.reportService,
        });
    }
    /**
     * change view to alerts view
     */
    toggleView() {
        if (this.viewModeService.reportViewMode$.value !== EReportViewModel.Alerts) {
            this.reportService.configure({ viewMode: 'one-to-many' });
            this.viewModeService.changeViewMode$(EReportViewModel.Alerts);
        }
        else {
            this.viewModeService.changeViewMode$(EReportViewModel.ScanningResult);
        }
        this.announcer.announce('toggled', 'assertive');
    }
    /**
     * Life-cycle method
     * empty for `untilDestroy` rxjs operator
     */
    ngOnDestroy() { }
}
NotificationsComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.3", ngImport: i0, type: NotificationsComponent, deps: [{ token: i1.MatDialog }, { token: i2.ViewModeService }, { token: i3.ReportService }, { token: i4.LiveAnnouncer }], target: i0.ɵɵFactoryTarget.Component });
NotificationsComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.3.3", type: NotificationsComponent, selector: "cr-notifications", outputs: { severityChange: "severityChange" }, ngImport: i0, template: "<ng-container *ngIf=\"severity\">\n\t<button\n\t\taria-label=\"Click to toggle alerts\"\n\t\tmat-icon-button\n\t\t(click)=\"toggleView()\"\n\t\tclass=\"btn-notifications-new\"\n\t\t[ngClass]=\"{\n\t\t\t'btn-notifications-error': severity == severities.High || severity == severities.VeryHigh,\n\t\t\t'btn-notifications-warning': severity == severities.Medium,\n\t\t\t'btn-enabled': (currentViewMode$ | async) == eReportViewModel.Alerts\n\t\t}\"\n\t\tdisableRipple>\n\t\t<ng-container [ngSwitch]=\"severity\">\n\t\t\t<mat-icon *ngSwitchCase=\"severities.Medium\">warning</mat-icon>\n\t\t\t<mat-icon *ngSwitchCase=\"severities.High\">error</mat-icon>\n\t\t\t<mat-icon *ngSwitchCase=\"severities.VeryHigh\">error</mat-icon>\n\t\t\t<mat-icon *ngSwitchDefault>info</mat-icon>\n\t\t</ng-container>\n\t\t<span style=\"font-size: 13px; text-transform: uppercase\">\n\t\t\t<ng-container *ngIf=\"(currentViewMode$ | async) == eReportViewModel.ScanningResult; else hideAlerts\">\n\t\t\t\tsee alerts\n\t\t\t</ng-container>\n\t\t\t<ng-template #hideAlerts>hide alerts</ng-template>\n\t\t</span>\n\t</button>\n</ng-container>\n", styles: [".btn-notifications-new{border:1px solid #17a1ff;border-radius:6px;width:-moz-fit-content;width:fit-content;height:auto;line-height:normal;font-weight:700;padding:0 12px 0 0}.btn-notifications-new mat-icon{font-size:30px;width:30px;height:30px;line-height:normal}.btn-notifications-new.btn-enabled{background-color:#17a1ff;color:#fff}.btn-notifications-error{border:1px solid red;color:red}.btn-notifications-error.btn-enabled{background-color:red;color:#fff}.btn-notifications-warning{border:1px solid orange;color:orange}.btn-notifications-warning.btn-enabled{background-color:orange;color:#fff}.cdk-keyboard-focused{outline:2px solid black!important}\n"], components: [{ type: i5.MatButton, selector: "button[mat-button], button[mat-raised-button], button[mat-icon-button],             button[mat-fab], button[mat-mini-fab], button[mat-stroked-button],             button[mat-flat-button]", inputs: ["disabled", "disableRipple", "color"], exportAs: ["matButton"] }, { type: i6.MatIcon, selector: "mat-icon", inputs: ["color", "inline", "svgIcon", "fontSet", "fontIcon"], exportAs: ["matIcon"] }], directives: [{ type: i7.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i7.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { type: i8.DefaultClassDirective, selector: "  [ngClass], [ngClass.xs], [ngClass.sm], [ngClass.md], [ngClass.lg], [ngClass.xl],  [ngClass.lt-sm], [ngClass.lt-md], [ngClass.lt-lg], [ngClass.lt-xl],  [ngClass.gt-xs], [ngClass.gt-sm], [ngClass.gt-md], [ngClass.gt-lg]", inputs: ["ngClass", "ngClass.xs", "ngClass.sm", "ngClass.md", "ngClass.lg", "ngClass.xl", "ngClass.lt-sm", "ngClass.lt-md", "ngClass.lt-lg", "ngClass.lt-xl", "ngClass.gt-xs", "ngClass.gt-sm", "ngClass.gt-md", "ngClass.gt-lg"] }, { type: i7.NgSwitch, selector: "[ngSwitch]", inputs: ["ngSwitch"] }, { type: i7.NgSwitchCase, selector: "[ngSwitchCase]", inputs: ["ngSwitchCase"] }, { type: i7.NgSwitchDefault, selector: "[ngSwitchDefault]" }], pipes: { "async": i7.AsyncPipe } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.3", ngImport: i0, type: NotificationsComponent, decorators: [{
            type: Component,
            args: [{ selector: 'cr-notifications', template: "<ng-container *ngIf=\"severity\">\n\t<button\n\t\taria-label=\"Click to toggle alerts\"\n\t\tmat-icon-button\n\t\t(click)=\"toggleView()\"\n\t\tclass=\"btn-notifications-new\"\n\t\t[ngClass]=\"{\n\t\t\t'btn-notifications-error': severity == severities.High || severity == severities.VeryHigh,\n\t\t\t'btn-notifications-warning': severity == severities.Medium,\n\t\t\t'btn-enabled': (currentViewMode$ | async) == eReportViewModel.Alerts\n\t\t}\"\n\t\tdisableRipple>\n\t\t<ng-container [ngSwitch]=\"severity\">\n\t\t\t<mat-icon *ngSwitchCase=\"severities.Medium\">warning</mat-icon>\n\t\t\t<mat-icon *ngSwitchCase=\"severities.High\">error</mat-icon>\n\t\t\t<mat-icon *ngSwitchCase=\"severities.VeryHigh\">error</mat-icon>\n\t\t\t<mat-icon *ngSwitchDefault>info</mat-icon>\n\t\t</ng-container>\n\t\t<span style=\"font-size: 13px; text-transform: uppercase\">\n\t\t\t<ng-container *ngIf=\"(currentViewMode$ | async) == eReportViewModel.ScanningResult; else hideAlerts\">\n\t\t\t\tsee alerts\n\t\t\t</ng-container>\n\t\t\t<ng-template #hideAlerts>hide alerts</ng-template>\n\t\t</span>\n\t</button>\n</ng-container>\n", styles: [".btn-notifications-new{border:1px solid #17a1ff;border-radius:6px;width:-moz-fit-content;width:fit-content;height:auto;line-height:normal;font-weight:700;padding:0 12px 0 0}.btn-notifications-new mat-icon{font-size:30px;width:30px;height:30px;line-height:normal}.btn-notifications-new.btn-enabled{background-color:#17a1ff;color:#fff}.btn-notifications-error{border:1px solid red;color:red}.btn-notifications-error.btn-enabled{background-color:red;color:#fff}.btn-notifications-warning{border:1px solid orange;color:orange}.btn-notifications-warning.btn-enabled{background-color:orange;color:#fff}.cdk-keyboard-focused{outline:2px solid black!important}\n"] }]
        }], ctorParameters: function () { return [{ type: i1.MatDialog }, { type: i2.ViewModeService }, { type: i3.ReportService }, { type: i4.LiveAnnouncer }]; }, propDecorators: { severityChange: [{
                type: Output
            }] } });
//# sourceMappingURL=data:application/json;base64,