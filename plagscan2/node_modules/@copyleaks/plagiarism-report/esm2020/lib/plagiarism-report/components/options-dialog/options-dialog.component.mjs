import { Component, Inject } from '@angular/core';
import { MAT_DIALOG_DATA } from '@angular/material/dialog';
import { take } from 'rxjs/operators';
import { truthy } from '../../utils/operators';
import { untilDestroy } from '../../../shared/operators/untilDestroy';
import * as i0 from "@angular/core";
import * as i1 from "../../services/copyleaks-translate.service";
import * as i2 from "@angular/material/dialog";
import * as i3 from "../../services/direction.service";
import * as i4 from "@angular/material/slide-toggle";
import * as i5 from "@angular/material/divider";
import * as i6 from "@angular/material/checkbox";
import * as i7 from "@angular/material/button";
import * as i8 from "@angular/material/icon";
import * as i9 from "@angular/forms";
import * as i10 from "@angular/flex-layout/flex";
import * as i11 from "../../services/report.service";
export class OptionsDialogComponent {
    constructor(translatesService, dialogRef, directionService, reportService) {
        this.translatesService = translatesService;
        this.dialogRef = dialogRef;
        this.directionService = directionService;
        this.reportService = reportService;
    }
    /**
     * Closes the dialog while indicating whether to save changes or not.
     */
    close(save) {
        this.dialogRef.close(save);
    }
    /**
     * Life-cycle method
     * subscribe to:
     * - current report settings ( clone it)
     * - dialog events
     */
    ngOnInit() {
        this.translations = this.translatesService.translations;
        this.reportService.options$.pipe(untilDestroy(this), take(1)).subscribe(options => (this.options = { ...options }));
        this.dialogRef
            .beforeClosed()
            .pipe(truthy())
            .subscribe(() => this.reportService.configure({ options: this.options }));
    }
    /**
     * Life-cycle method
     * empty for `untilDestroy` rxjs operator
     */
    ngOnDestroy() { }
}
OptionsDialogComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.3", ngImport: i0, type: OptionsDialogComponent, deps: [{ token: i1.CopyleaksTranslateService }, { token: i2.MatDialogRef }, { token: i3.DirectionService }, { token: MAT_DIALOG_DATA }], target: i0.ɵɵFactoryTarget.Component });
OptionsDialogComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.3.3", type: OptionsDialogComponent, selector: "cr-options-dialog", ngImport: i0, template: "<div mat-dialog-title>{{ translations?.RESULTS_SETTINGS_DIALOG?.TITLE || 'Results Settings' }}</div>\n<mat-dialog-content>\n\t<div>\n\t\t<mat-slide-toggle\n\t\t\t[(ngModel)]=\"options.showOnlyTopResults\"\n\t\t\t[aria-label]=\"\n\t\t\t\t!options.showOnlyTopResults ? 'Check to show only top 100 results' : 'Un-checked to show all the results'\n\t\t\t\">\n\t\t\t{{ translations?.RESULTS_SETTINGS_DIALOG?.SHOW_TOP_100_RESULT || 'Show only top 100 relevant results' }}\n\t\t</mat-slide-toggle>\n\t</div>\n\t<div>\n\t\t<mat-divider></mat-divider>\n\t</div>\n\t<div>\n\t\t<mat-checkbox\n\t\t\tariachec\n\t\t\t[(ngModel)]=\"options.showIdentical\"\n\t\t\t[aria-label]=\"\n\t\t\t\t!options.showIdentical ? 'Check to include identical results' : 'Un-Check to exclude identical results'\n\t\t\t\">\n\t\t\t{{ translations?.SHARED?.MATCH_TYPES?.IDENTICAL || 'Identical' }}\n\t\t</mat-checkbox>\n\t</div>\n\t<div>\n\t\t<mat-checkbox\n\t\t\t[(ngModel)]=\"options.showMinorChanges\"\n\t\t\t[aria-label]=\"\n\t\t\t\toptions.showMinorChanges\n\t\t\t\t\t? 'Un-check to exclude minor changes results'\n\t\t\t\t\t: 'Check to include minor changes results'\n\t\t\t\">\n\t\t\t{{ translations?.SHARED?.MATCH_TYPES?.MINOR_CHANGES || 'Minor Changes' }}\n\t\t</mat-checkbox>\n\t</div>\n\t<div>\n\t\t<mat-checkbox\n\t\t\t[(ngModel)]=\"options.showRelated\"\n\t\t\t[aria-label]=\"\n\t\t\t\t!options.showRelated ? 'Check to include paraphrased results' : 'Un-check to exclude paraphrased results '\n\t\t\t\">\n\t\t\t{{ translations?.SHARED?.MATCH_TYPES?.RELATED_MEANING || 'Paraphrased' }}\n\t\t</mat-checkbox>\n\t</div>\n</mat-dialog-content>\n\n<div fxLayout.lt-md=\"column nowrap\" fxLayout=\"row nowrap\" fxLayoutGap=\"1em\" fxLayoutAlign=\"end center\">\n\t<!-- <mat-checkbox fxFlexAlign.lt-md=\"start\" [(ngModel)]=\"options.setAsDefault\">\n\t\t{{ translations?.RESULTS_SETTINGS_DIALOG?.SET_DEFAULT || 'Set as default for all scans' }}\n\t</mat-checkbox> -->\n\t<button mat-raised-button (click)=\"close(true)\" color=\"primary\" aria-label=\"Saves the desired results settings.'\">\n\t\t{{ translations?.SHARED?.SAVE || 'SAVE' }}\n\t</button>\n</div>\n<button\n\tclose\n\tmat-icon-button\n\t(click)=\"close()\"\n\t[class]=\"'close-' + directionService.dir\"\n\taria-label=\"Closes results settings.\">\n\t<mat-icon svgIcon=\"close_black_color\"></mat-icon>\n</button>\n", styles: [":host{display:flex;flex-flow:column nowrap;position:relative}:host mat-dialog-content>div{height:3em}:host [close]{position:absolute;margin-top:-1em;margin-right:-1em;top:0;right:0}:host .close-rtl{right:unset;left:-16px;top:-6px}.cdk-keyboard-focused{outline:2px solid black!important}\n"], components: [{ type: i4.MatSlideToggle, selector: "mat-slide-toggle", inputs: ["disabled", "disableRipple", "color", "tabIndex", "name", "id", "labelPosition", "aria-label", "aria-labelledby", "aria-describedby", "required", "checked"], outputs: ["change", "toggleChange"], exportAs: ["matSlideToggle"] }, { type: i5.MatDivider, selector: "mat-divider", inputs: ["vertical", "inset"] }, { type: i6.MatCheckbox, selector: "mat-checkbox", inputs: ["disableRipple", "color", "tabIndex", "aria-label", "aria-labelledby", "aria-describedby", "id", "required", "labelPosition", "name", "value", "checked", "disabled", "indeterminate"], outputs: ["change", "indeterminateChange"], exportAs: ["matCheckbox"] }, { type: i7.MatButton, selector: "button[mat-button], button[mat-raised-button], button[mat-icon-button],             button[mat-fab], button[mat-mini-fab], button[mat-stroked-button],             button[mat-flat-button]", inputs: ["disabled", "disableRipple", "color"], exportAs: ["matButton"] }, { type: i8.MatIcon, selector: "mat-icon", inputs: ["color", "inline", "svgIcon", "fontSet", "fontIcon"], exportAs: ["matIcon"] }], directives: [{ type: i2.MatDialogTitle, selector: "[mat-dialog-title], [matDialogTitle]", inputs: ["id"], exportAs: ["matDialogTitle"] }, { type: i2.MatDialogContent, selector: "[mat-dialog-content], mat-dialog-content, [matDialogContent]" }, { type: i9.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i9.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { type: i10.DefaultLayoutDirective, selector: "  [fxLayout], [fxLayout.xs], [fxLayout.sm], [fxLayout.md],  [fxLayout.lg], [fxLayout.xl], [fxLayout.lt-sm], [fxLayout.lt-md],  [fxLayout.lt-lg], [fxLayout.lt-xl], [fxLayout.gt-xs], [fxLayout.gt-sm],  [fxLayout.gt-md], [fxLayout.gt-lg]", inputs: ["fxLayout", "fxLayout.xs", "fxLayout.sm", "fxLayout.md", "fxLayout.lg", "fxLayout.xl", "fxLayout.lt-sm", "fxLayout.lt-md", "fxLayout.lt-lg", "fxLayout.lt-xl", "fxLayout.gt-xs", "fxLayout.gt-sm", "fxLayout.gt-md", "fxLayout.gt-lg"] }, { type: i10.DefaultLayoutGapDirective, selector: "  [fxLayoutGap], [fxLayoutGap.xs], [fxLayoutGap.sm], [fxLayoutGap.md],  [fxLayoutGap.lg], [fxLayoutGap.xl], [fxLayoutGap.lt-sm], [fxLayoutGap.lt-md],  [fxLayoutGap.lt-lg], [fxLayoutGap.lt-xl], [fxLayoutGap.gt-xs], [fxLayoutGap.gt-sm],  [fxLayoutGap.gt-md], [fxLayoutGap.gt-lg]", inputs: ["fxLayoutGap", "fxLayoutGap.xs", "fxLayoutGap.sm", "fxLayoutGap.md", "fxLayoutGap.lg", "fxLayoutGap.xl", "fxLayoutGap.lt-sm", "fxLayoutGap.lt-md", "fxLayoutGap.lt-lg", "fxLayoutGap.lt-xl", "fxLayoutGap.gt-xs", "fxLayoutGap.gt-sm", "fxLayoutGap.gt-md", "fxLayoutGap.gt-lg"] }, { type: i10.DefaultLayoutAlignDirective, selector: "  [fxLayoutAlign], [fxLayoutAlign.xs], [fxLayoutAlign.sm], [fxLayoutAlign.md],  [fxLayoutAlign.lg], [fxLayoutAlign.xl], [fxLayoutAlign.lt-sm], [fxLayoutAlign.lt-md],  [fxLayoutAlign.lt-lg], [fxLayoutAlign.lt-xl], [fxLayoutAlign.gt-xs], [fxLayoutAlign.gt-sm],  [fxLayoutAlign.gt-md], [fxLayoutAlign.gt-lg]", inputs: ["fxLayoutAlign", "fxLayoutAlign.xs", "fxLayoutAlign.sm", "fxLayoutAlign.md", "fxLayoutAlign.lg", "fxLayoutAlign.xl", "fxLayoutAlign.lt-sm", "fxLayoutAlign.lt-md", "fxLayoutAlign.lt-lg", "fxLayoutAlign.lt-xl", "fxLayoutAlign.gt-xs", "fxLayoutAlign.gt-sm", "fxLayoutAlign.gt-md", "fxLayoutAlign.gt-lg"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.3", ngImport: i0, type: OptionsDialogComponent, decorators: [{
            type: Component,
            args: [{ selector: 'cr-options-dialog', template: "<div mat-dialog-title>{{ translations?.RESULTS_SETTINGS_DIALOG?.TITLE || 'Results Settings' }}</div>\n<mat-dialog-content>\n\t<div>\n\t\t<mat-slide-toggle\n\t\t\t[(ngModel)]=\"options.showOnlyTopResults\"\n\t\t\t[aria-label]=\"\n\t\t\t\t!options.showOnlyTopResults ? 'Check to show only top 100 results' : 'Un-checked to show all the results'\n\t\t\t\">\n\t\t\t{{ translations?.RESULTS_SETTINGS_DIALOG?.SHOW_TOP_100_RESULT || 'Show only top 100 relevant results' }}\n\t\t</mat-slide-toggle>\n\t</div>\n\t<div>\n\t\t<mat-divider></mat-divider>\n\t</div>\n\t<div>\n\t\t<mat-checkbox\n\t\t\tariachec\n\t\t\t[(ngModel)]=\"options.showIdentical\"\n\t\t\t[aria-label]=\"\n\t\t\t\t!options.showIdentical ? 'Check to include identical results' : 'Un-Check to exclude identical results'\n\t\t\t\">\n\t\t\t{{ translations?.SHARED?.MATCH_TYPES?.IDENTICAL || 'Identical' }}\n\t\t</mat-checkbox>\n\t</div>\n\t<div>\n\t\t<mat-checkbox\n\t\t\t[(ngModel)]=\"options.showMinorChanges\"\n\t\t\t[aria-label]=\"\n\t\t\t\toptions.showMinorChanges\n\t\t\t\t\t? 'Un-check to exclude minor changes results'\n\t\t\t\t\t: 'Check to include minor changes results'\n\t\t\t\">\n\t\t\t{{ translations?.SHARED?.MATCH_TYPES?.MINOR_CHANGES || 'Minor Changes' }}\n\t\t</mat-checkbox>\n\t</div>\n\t<div>\n\t\t<mat-checkbox\n\t\t\t[(ngModel)]=\"options.showRelated\"\n\t\t\t[aria-label]=\"\n\t\t\t\t!options.showRelated ? 'Check to include paraphrased results' : 'Un-check to exclude paraphrased results '\n\t\t\t\">\n\t\t\t{{ translations?.SHARED?.MATCH_TYPES?.RELATED_MEANING || 'Paraphrased' }}\n\t\t</mat-checkbox>\n\t</div>\n</mat-dialog-content>\n\n<div fxLayout.lt-md=\"column nowrap\" fxLayout=\"row nowrap\" fxLayoutGap=\"1em\" fxLayoutAlign=\"end center\">\n\t<!-- <mat-checkbox fxFlexAlign.lt-md=\"start\" [(ngModel)]=\"options.setAsDefault\">\n\t\t{{ translations?.RESULTS_SETTINGS_DIALOG?.SET_DEFAULT || 'Set as default for all scans' }}\n\t</mat-checkbox> -->\n\t<button mat-raised-button (click)=\"close(true)\" color=\"primary\" aria-label=\"Saves the desired results settings.'\">\n\t\t{{ translations?.SHARED?.SAVE || 'SAVE' }}\n\t</button>\n</div>\n<button\n\tclose\n\tmat-icon-button\n\t(click)=\"close()\"\n\t[class]=\"'close-' + directionService.dir\"\n\taria-label=\"Closes results settings.\">\n\t<mat-icon svgIcon=\"close_black_color\"></mat-icon>\n</button>\n", styles: [":host{display:flex;flex-flow:column nowrap;position:relative}:host mat-dialog-content>div{height:3em}:host [close]{position:absolute;margin-top:-1em;margin-right:-1em;top:0;right:0}:host .close-rtl{right:unset;left:-16px;top:-6px}.cdk-keyboard-focused{outline:2px solid black!important}\n"] }]
        }], ctorParameters: function () { return [{ type: i1.CopyleaksTranslateService }, { type: i2.MatDialogRef }, { type: i3.DirectionService }, { type: i11.ReportService, decorators: [{
                    type: Inject,
                    args: [MAT_DIALOG_DATA]
                }] }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoib3B0aW9ucy1kaWFsb2cuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvcGxhZ2lhcmlzbS1yZXBvcnQvc3JjL2xpYi9wbGFnaWFyaXNtLXJlcG9ydC9jb21wb25lbnRzL29wdGlvbnMtZGlhbG9nL29wdGlvbnMtZGlhbG9nLmNvbXBvbmVudC50cyIsIi4uLy4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL3BsYWdpYXJpc20tcmVwb3J0L3NyYy9saWIvcGxhZ2lhcmlzbS1yZXBvcnQvY29tcG9uZW50cy9vcHRpb25zLWRpYWxvZy9vcHRpb25zLWRpYWxvZy5jb21wb25lbnQuaHRtbCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFxQixNQUFNLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDckUsT0FBTyxFQUFnQixlQUFlLEVBQUUsTUFBTSwwQkFBMEIsQ0FBQztBQUN6RSxPQUFPLEVBQUUsSUFBSSxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFHdEMsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLHVCQUF1QixDQUFDO0FBQy9DLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSx3Q0FBd0MsQ0FBQzs7Ozs7Ozs7Ozs7OztBQVN0RSxNQUFNLE9BQU8sc0JBQXNCO0lBRWxDLFlBQ1MsaUJBQTRDLEVBQzVDLFNBQStDLEVBQ2hELGdCQUFrQyxFQUNULGFBQTRCO1FBSHBELHNCQUFpQixHQUFqQixpQkFBaUIsQ0FBMkI7UUFDNUMsY0FBUyxHQUFULFNBQVMsQ0FBc0M7UUFDaEQscUJBQWdCLEdBQWhCLGdCQUFnQixDQUFrQjtRQUNULGtCQUFhLEdBQWIsYUFBYSxDQUFlO0lBQzFELENBQUM7SUFHSjs7T0FFRztJQUNILEtBQUssQ0FBQyxJQUFjO1FBQ25CLElBQUksQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQzVCLENBQUM7SUFDRDs7Ozs7T0FLRztJQUNILFFBQVE7UUFDUCxJQUFJLENBQUMsWUFBWSxHQUFHLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxZQUFZLENBQUM7UUFDeEQsSUFBSSxDQUFDLGFBQWEsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsRUFBRSxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxPQUFPLEdBQUcsRUFBRSxHQUFHLE9BQU8sRUFBRSxDQUFDLENBQUMsQ0FBQztRQUNwSCxJQUFJLENBQUMsU0FBUzthQUNaLFlBQVksRUFBRTthQUNkLElBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQzthQUNkLFNBQVMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLFNBQVMsQ0FBQyxFQUFFLE9BQU8sRUFBRSxJQUFJLENBQUMsT0FBTyxFQUFFLENBQUMsQ0FBQyxDQUFDO0lBQzVFLENBQUM7SUFDRDs7O09BR0c7SUFDSCxXQUFXLEtBQUksQ0FBQzs7bUhBbENKLHNCQUFzQix1SEFNekIsZUFBZTt1R0FOWixzQkFBc0IseURDZm5DLCt5RUE4REE7MkZEL0NhLHNCQUFzQjtrQkFMbEMsU0FBUzsrQkFDQyxtQkFBbUI7OzBCQVUzQixNQUFNOzJCQUFDLGVBQWUiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQsIE9uRGVzdHJveSwgT25Jbml0LCBJbmplY3QgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IE1hdERpYWxvZ1JlZiwgTUFUX0RJQUxPR19EQVRBIH0gZnJvbSAnQGFuZ3VsYXIvbWF0ZXJpYWwvZGlhbG9nJztcbmltcG9ydCB7IHRha2UgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5pbXBvcnQgeyBDb3B5bGVha3NSZXBvcnRPcHRpb25zIH0gZnJvbSAnLi4vLi4vbW9kZWxzL1Jlc3VsdHNTZXR0aW5ncyc7XG5pbXBvcnQgeyBSZXBvcnRTZXJ2aWNlIH0gZnJvbSAnLi4vLi4vc2VydmljZXMvcmVwb3J0LnNlcnZpY2UnO1xuaW1wb3J0IHsgdHJ1dGh5IH0gZnJvbSAnLi4vLi4vdXRpbHMvb3BlcmF0b3JzJztcbmltcG9ydCB7IHVudGlsRGVzdHJveSB9IGZyb20gJy4uLy4uLy4uL3NoYXJlZC9vcGVyYXRvcnMvdW50aWxEZXN0cm95JztcbmltcG9ydCB7IENvcHlsZWFrc1RyYW5zbGF0ZVNlcnZpY2UsIENvcHlsZWFrc1RyYW5zbGF0aW9ucyB9IGZyb20gJy4uLy4uL3NlcnZpY2VzL2NvcHlsZWFrcy10cmFuc2xhdGUuc2VydmljZSc7XG5pbXBvcnQgeyBEaXJlY3Rpb25TZXJ2aWNlIH0gZnJvbSAnLi4vLi4vc2VydmljZXMvZGlyZWN0aW9uLnNlcnZpY2UnO1xuXG5AQ29tcG9uZW50KHtcblx0c2VsZWN0b3I6ICdjci1vcHRpb25zLWRpYWxvZycsXG5cdHRlbXBsYXRlVXJsOiAnLi9vcHRpb25zLWRpYWxvZy5jb21wb25lbnQuaHRtbCcsXG5cdHN0eWxlVXJsczogWycuL29wdGlvbnMtZGlhbG9nLmNvbXBvbmVudC5zY3NzJ10sXG59KVxuZXhwb3J0IGNsYXNzIE9wdGlvbnNEaWFsb2dDb21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQsIE9uRGVzdHJveSB7XG5cdHRyYW5zbGF0aW9uczogQ29weWxlYWtzVHJhbnNsYXRpb25zO1xuXHRjb25zdHJ1Y3Rvcihcblx0XHRwcml2YXRlIHRyYW5zbGF0ZXNTZXJ2aWNlOiBDb3B5bGVha3NUcmFuc2xhdGVTZXJ2aWNlLFxuXHRcdHByaXZhdGUgZGlhbG9nUmVmOiBNYXREaWFsb2dSZWY8T3B0aW9uc0RpYWxvZ0NvbXBvbmVudD4sXG5cdFx0cHVibGljIGRpcmVjdGlvblNlcnZpY2U6IERpcmVjdGlvblNlcnZpY2UsXG5cdFx0QEluamVjdChNQVRfRElBTE9HX0RBVEEpIHB1YmxpYyByZXBvcnRTZXJ2aWNlOiBSZXBvcnRTZXJ2aWNlXG5cdCkge31cblxuXHRwdWJsaWMgb3B0aW9uczogQ29weWxlYWtzUmVwb3J0T3B0aW9ucztcblx0LyoqXG5cdCAqIENsb3NlcyB0aGUgZGlhbG9nIHdoaWxlIGluZGljYXRpbmcgd2hldGhlciB0byBzYXZlIGNoYW5nZXMgb3Igbm90LlxuXHQgKi9cblx0Y2xvc2Uoc2F2ZT86IGJvb2xlYW4pIHtcblx0XHR0aGlzLmRpYWxvZ1JlZi5jbG9zZShzYXZlKTtcblx0fVxuXHQvKipcblx0ICogTGlmZS1jeWNsZSBtZXRob2Rcblx0ICogc3Vic2NyaWJlIHRvOlxuXHQgKiAtIGN1cnJlbnQgcmVwb3J0IHNldHRpbmdzICggY2xvbmUgaXQpXG5cdCAqIC0gZGlhbG9nIGV2ZW50c1xuXHQgKi9cblx0bmdPbkluaXQoKSB7XG5cdFx0dGhpcy50cmFuc2xhdGlvbnMgPSB0aGlzLnRyYW5zbGF0ZXNTZXJ2aWNlLnRyYW5zbGF0aW9ucztcblx0XHR0aGlzLnJlcG9ydFNlcnZpY2Uub3B0aW9ucyQucGlwZSh1bnRpbERlc3Ryb3kodGhpcyksIHRha2UoMSkpLnN1YnNjcmliZShvcHRpb25zID0+ICh0aGlzLm9wdGlvbnMgPSB7IC4uLm9wdGlvbnMgfSkpO1xuXHRcdHRoaXMuZGlhbG9nUmVmXG5cdFx0XHQuYmVmb3JlQ2xvc2VkKClcblx0XHRcdC5waXBlKHRydXRoeSgpKVxuXHRcdFx0LnN1YnNjcmliZSgoKSA9PiB0aGlzLnJlcG9ydFNlcnZpY2UuY29uZmlndXJlKHsgb3B0aW9uczogdGhpcy5vcHRpb25zIH0pKTtcblx0fVxuXHQvKipcblx0ICogTGlmZS1jeWNsZSBtZXRob2Rcblx0ICogZW1wdHkgZm9yIGB1bnRpbERlc3Ryb3lgIHJ4anMgb3BlcmF0b3Jcblx0ICovXG5cdG5nT25EZXN0cm95KCkge31cbn1cbiIsIjxkaXYgbWF0LWRpYWxvZy10aXRsZT57eyB0cmFuc2xhdGlvbnM/LlJFU1VMVFNfU0VUVElOR1NfRElBTE9HPy5USVRMRSB8fCAnUmVzdWx0cyBTZXR0aW5ncycgfX08L2Rpdj5cbjxtYXQtZGlhbG9nLWNvbnRlbnQ+XG5cdDxkaXY+XG5cdFx0PG1hdC1zbGlkZS10b2dnbGVcblx0XHRcdFsobmdNb2RlbCldPVwib3B0aW9ucy5zaG93T25seVRvcFJlc3VsdHNcIlxuXHRcdFx0W2FyaWEtbGFiZWxdPVwiXG5cdFx0XHRcdCFvcHRpb25zLnNob3dPbmx5VG9wUmVzdWx0cyA/ICdDaGVjayB0byBzaG93IG9ubHkgdG9wIDEwMCByZXN1bHRzJyA6ICdVbi1jaGVja2VkIHRvIHNob3cgYWxsIHRoZSByZXN1bHRzJ1xuXHRcdFx0XCI+XG5cdFx0XHR7eyB0cmFuc2xhdGlvbnM/LlJFU1VMVFNfU0VUVElOR1NfRElBTE9HPy5TSE9XX1RPUF8xMDBfUkVTVUxUIHx8ICdTaG93IG9ubHkgdG9wIDEwMCByZWxldmFudCByZXN1bHRzJyB9fVxuXHRcdDwvbWF0LXNsaWRlLXRvZ2dsZT5cblx0PC9kaXY+XG5cdDxkaXY+XG5cdFx0PG1hdC1kaXZpZGVyPjwvbWF0LWRpdmlkZXI+XG5cdDwvZGl2PlxuXHQ8ZGl2PlxuXHRcdDxtYXQtY2hlY2tib3hcblx0XHRcdGFyaWFjaGVjXG5cdFx0XHRbKG5nTW9kZWwpXT1cIm9wdGlvbnMuc2hvd0lkZW50aWNhbFwiXG5cdFx0XHRbYXJpYS1sYWJlbF09XCJcblx0XHRcdFx0IW9wdGlvbnMuc2hvd0lkZW50aWNhbCA/ICdDaGVjayB0byBpbmNsdWRlIGlkZW50aWNhbCByZXN1bHRzJyA6ICdVbi1DaGVjayB0byBleGNsdWRlIGlkZW50aWNhbCByZXN1bHRzJ1xuXHRcdFx0XCI+XG5cdFx0XHR7eyB0cmFuc2xhdGlvbnM/LlNIQVJFRD8uTUFUQ0hfVFlQRVM/LklERU5USUNBTCB8fCAnSWRlbnRpY2FsJyB9fVxuXHRcdDwvbWF0LWNoZWNrYm94PlxuXHQ8L2Rpdj5cblx0PGRpdj5cblx0XHQ8bWF0LWNoZWNrYm94XG5cdFx0XHRbKG5nTW9kZWwpXT1cIm9wdGlvbnMuc2hvd01pbm9yQ2hhbmdlc1wiXG5cdFx0XHRbYXJpYS1sYWJlbF09XCJcblx0XHRcdFx0b3B0aW9ucy5zaG93TWlub3JDaGFuZ2VzXG5cdFx0XHRcdFx0PyAnVW4tY2hlY2sgdG8gZXhjbHVkZSBtaW5vciBjaGFuZ2VzIHJlc3VsdHMnXG5cdFx0XHRcdFx0OiAnQ2hlY2sgdG8gaW5jbHVkZSBtaW5vciBjaGFuZ2VzIHJlc3VsdHMnXG5cdFx0XHRcIj5cblx0XHRcdHt7IHRyYW5zbGF0aW9ucz8uU0hBUkVEPy5NQVRDSF9UWVBFUz8uTUlOT1JfQ0hBTkdFUyB8fCAnTWlub3IgQ2hhbmdlcycgfX1cblx0XHQ8L21hdC1jaGVja2JveD5cblx0PC9kaXY+XG5cdDxkaXY+XG5cdFx0PG1hdC1jaGVja2JveFxuXHRcdFx0WyhuZ01vZGVsKV09XCJvcHRpb25zLnNob3dSZWxhdGVkXCJcblx0XHRcdFthcmlhLWxhYmVsXT1cIlxuXHRcdFx0XHQhb3B0aW9ucy5zaG93UmVsYXRlZCA/ICdDaGVjayB0byBpbmNsdWRlIHBhcmFwaHJhc2VkIHJlc3VsdHMnIDogJ1VuLWNoZWNrIHRvIGV4Y2x1ZGUgcGFyYXBocmFzZWQgcmVzdWx0cyAnXG5cdFx0XHRcIj5cblx0XHRcdHt7IHRyYW5zbGF0aW9ucz8uU0hBUkVEPy5NQVRDSF9UWVBFUz8uUkVMQVRFRF9NRUFOSU5HIHx8ICdQYXJhcGhyYXNlZCcgfX1cblx0XHQ8L21hdC1jaGVja2JveD5cblx0PC9kaXY+XG48L21hdC1kaWFsb2ctY29udGVudD5cblxuPGRpdiBmeExheW91dC5sdC1tZD1cImNvbHVtbiBub3dyYXBcIiBmeExheW91dD1cInJvdyBub3dyYXBcIiBmeExheW91dEdhcD1cIjFlbVwiIGZ4TGF5b3V0QWxpZ249XCJlbmQgY2VudGVyXCI+XG5cdDwhLS0gPG1hdC1jaGVja2JveCBmeEZsZXhBbGlnbi5sdC1tZD1cInN0YXJ0XCIgWyhuZ01vZGVsKV09XCJvcHRpb25zLnNldEFzRGVmYXVsdFwiPlxuXHRcdHt7IHRyYW5zbGF0aW9ucz8uUkVTVUxUU19TRVRUSU5HU19ESUFMT0c/LlNFVF9ERUZBVUxUIHx8ICdTZXQgYXMgZGVmYXVsdCBmb3IgYWxsIHNjYW5zJyB9fVxuXHQ8L21hdC1jaGVja2JveD4gLS0+XG5cdDxidXR0b24gbWF0LXJhaXNlZC1idXR0b24gKGNsaWNrKT1cImNsb3NlKHRydWUpXCIgY29sb3I9XCJwcmltYXJ5XCIgYXJpYS1sYWJlbD1cIlNhdmVzIHRoZSBkZXNpcmVkIHJlc3VsdHMgc2V0dGluZ3MuJ1wiPlxuXHRcdHt7IHRyYW5zbGF0aW9ucz8uU0hBUkVEPy5TQVZFIHx8ICdTQVZFJyB9fVxuXHQ8L2J1dHRvbj5cbjwvZGl2PlxuPGJ1dHRvblxuXHRjbG9zZVxuXHRtYXQtaWNvbi1idXR0b25cblx0KGNsaWNrKT1cImNsb3NlKClcIlxuXHRbY2xhc3NdPVwiJ2Nsb3NlLScgKyBkaXJlY3Rpb25TZXJ2aWNlLmRpclwiXG5cdGFyaWEtbGFiZWw9XCJDbG9zZXMgcmVzdWx0cyBzZXR0aW5ncy5cIj5cblx0PG1hdC1pY29uIHN2Z0ljb249XCJjbG9zZV9ibGFja19jb2xvclwiPjwvbWF0LWljb24+XG48L2J1dHRvbj5cbiJdfQ==