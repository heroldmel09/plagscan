export var CompleteResultNotificationAlertSeverity;
(function (CompleteResultNotificationAlertSeverity) {
    CompleteResultNotificationAlertSeverity[CompleteResultNotificationAlertSeverity["VeryLow"] = 0] = "VeryLow";
    CompleteResultNotificationAlertSeverity[CompleteResultNotificationAlertSeverity["Low"] = 1] = "Low";
    CompleteResultNotificationAlertSeverity[CompleteResultNotificationAlertSeverity["Medium"] = 2] = "Medium";
    CompleteResultNotificationAlertSeverity[CompleteResultNotificationAlertSeverity["High"] = 3] = "High";
    CompleteResultNotificationAlertSeverity[CompleteResultNotificationAlertSeverity["VeryHigh"] = 4] = "VeryHigh";
})(CompleteResultNotificationAlertSeverity || (CompleteResultNotificationAlertSeverity = {}));
/** Enum representing the status of a scan */
export var ScanStatus;
(function (ScanStatus) {
    ScanStatus[ScanStatus["Success"] = 0] = "Success";
    ScanStatus[ScanStatus["Error"] = 1] = "Error";
    ScanStatus[ScanStatus["CreditsChecked"] = 2] = "CreditsChecked";
    ScanStatus[ScanStatus["Indexed"] = 3] = "Indexed";
})(ScanStatus || (ScanStatus = {}));
/** result preview types  */
export var EResultPreviewType;
(function (EResultPreviewType) {
    EResultPreviewType[EResultPreviewType["Batch"] = 0] = "Batch";
    EResultPreviewType[EResultPreviewType["Repositroy"] = 1] = "Repositroy";
    EResultPreviewType[EResultPreviewType["Internet"] = 2] = "Internet";
    EResultPreviewType[EResultPreviewType["Database"] = 3] = "Database";
})(EResultPreviewType || (EResultPreviewType = {}));
/** Enum representing the access of a result */
export var ResultAccess;
(function (ResultAccess) {
    ResultAccess[ResultAccess["full"] = 0] = "full";
    ResultAccess[ResultAccess["locked"] = 1] = "locked";
})(ResultAccess || (ResultAccess = {}));
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQ29tcGxldGVSZXN1bHQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9wbGFnaWFyaXNtLXJlcG9ydC9zcmMvbGliL3BsYWdpYXJpc20tcmVwb3J0L21vZGVscy9hcGktbW9kZWxzL0NvbXBsZXRlUmVzdWx0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQTJDQSxNQUFNLENBQU4sSUFBWSx1Q0FNWDtBQU5ELFdBQVksdUNBQXVDO0lBQ2xELDJHQUFXLENBQUE7SUFDWCxtR0FBTyxDQUFBO0lBQ1AseUdBQVUsQ0FBQTtJQUNWLHFHQUFRLENBQUE7SUFDUiw2R0FBWSxDQUFBO0FBQ2IsQ0FBQyxFQU5XLHVDQUF1QyxLQUF2Qyx1Q0FBdUMsUUFNbEQ7QUFtQkQsNkNBQTZDO0FBQzdDLE1BQU0sQ0FBTixJQUFZLFVBS1g7QUFMRCxXQUFZLFVBQVU7SUFDckIsaURBQVcsQ0FBQTtJQUNYLDZDQUFTLENBQUE7SUFDVCwrREFBa0IsQ0FBQTtJQUNsQixpREFBVyxDQUFBO0FBQ1osQ0FBQyxFQUxXLFVBQVUsS0FBVixVQUFVLFFBS3JCO0FBb0VELDRCQUE0QjtBQUM1QixNQUFNLENBQU4sSUFBWSxrQkFLWDtBQUxELFdBQVksa0JBQWtCO0lBQzdCLDZEQUFLLENBQUE7SUFDTCx1RUFBVSxDQUFBO0lBQ1YsbUVBQVEsQ0FBQTtJQUNSLG1FQUFRLENBQUE7QUFDVCxDQUFDLEVBTFcsa0JBQWtCLEtBQWxCLGtCQUFrQixRQUs3QjtBQXFDRCwrQ0FBK0M7QUFDL0MsTUFBTSxDQUFOLElBQVksWUFHWDtBQUhELFdBQVksWUFBWTtJQUN2QiwrQ0FBSSxDQUFBO0lBQ0osbURBQU0sQ0FBQTtBQUNQLENBQUMsRUFIVyxZQUFZLEtBQVosWUFBWSxRQUd2QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFR5cGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFJlc3VsdENhcmRDb21wb25lbnQgfSBmcm9tICcuLi8uLi9jb21wb25lbnRzL3Jlc3VsdC1jYXJkL3Jlc3VsdC1jYXJkLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBSZXN1bHRJdGVtIH0gZnJvbSAnLi4vTWF0Y2hlcyc7XG5cbi8qKiBBIGJhc2ljIHJlc3BvbnNlIGZyb20gQ29weWxlYWtzIGFwaSAqL1xuZXhwb3J0IGludGVyZmFjZSBCYXNpY1Jlc3BvbnNlIHtcblx0c3RhdHVzOiBTY2FuU3RhdHVzO1xuXHRlcnJvcj86IFNjYW5FcnJvcjtcblx0ZGV2ZWxvcGVyUGF5bG9hZD86IHN0cmluZztcbn1cblxuLyoqIEFuIGVycm9yIHJlc3BvbnNlIGZyb20gQ29weWxlYWtzIGFwaSAqL1xuZXhwb3J0IGludGVyZmFjZSBTY2FuRXJyb3Ige1xuXHRtZXNzYWdlPzogc3RyaW5nO1xuXHRjb2RlOiBudW1iZXI7XG59XG5cbi8qKiBBIHNjYW4gY29tcGxldGUgcmVzcG9uc2UgZnJvbSBDb3B5bGVha3MgYXBpICovXG5leHBvcnQgaW50ZXJmYWNlIENvbXBsZXRlUmVzdWx0IGV4dGVuZHMgQmFzaWNSZXNwb25zZSB7XG5cdHNjYW5uZWREb2N1bWVudDogU2Nhbm5lZERvY3VtZW50O1xuXHRyZXN1bHRzOiBSZXN1bHRQcmV2aWV3cztcblx0ZmlsdGVycz86IENvbXBsZXRlUmVzdWx0c0ZpbHRlcnM7XG5cdG5vdGlmaWNhdGlvbnM/OiBDb21wbGV0ZVJlc3VsdE5vdGlmaWNhdGlvbjtcbn1cblxuLyoqXG4gKiBBIG5vdGlmaWNhdGlvbiBvZiBhIGNvbXBsZXRlIHJlc3BvbnNlIGZyb20gQ29weWxlYWtzIGFwaVxuICovXG5leHBvcnQgaW50ZXJmYWNlIENvbXBsZXRlUmVzdWx0Tm90aWZpY2F0aW9uIHtcblx0YWxlcnRzOiBDb21wbGV0ZVJlc3VsdE5vdGlmaWNhdGlvbkFsZXJ0W107XG59XG4vKipcbiAqIEEgbm90aWZpY2F0aW9uIGFsZXJ0IG9mIGEgY29tcGxldGUgcmVzcG9uc2UgZnJvbSBDb3B5bGVha3MgYXBpXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgQ29tcGxldGVSZXN1bHROb3RpZmljYXRpb25BbGVydCB7XG5cdGFkZGl0aW9uYWxEYXRhOiBzdHJpbmc7XG5cdGNvZGU6IHN0cmluZztcblx0aGVscExpbms6IHN0cmluZztcblx0bWVzc2FnZTogc3RyaW5nO1xuXHRzZXZlcml0eTogQ29tcGxldGVSZXN1bHROb3RpZmljYXRpb25BbGVydFNldmVyaXR5O1xuXHR0aXRsZTogc3RyaW5nO1xufVxuXG5leHBvcnQgZW51bSBDb21wbGV0ZVJlc3VsdE5vdGlmaWNhdGlvbkFsZXJ0U2V2ZXJpdHkge1xuXHRWZXJ5TG93ID0gMCxcblx0TG93ID0gMSxcblx0TWVkaXVtID0gMixcblx0SGlnaCA9IDMsXG5cdFZlcnlIaWdoID0gNCxcbn1cbi8qKlxuICogQSByZXN1bHQgcHJldmlldyBvZiBhIGNvbXBsZXRlIHJlc3BvbnNlIGZyb20gQ29weWxlYWtzIGFwaVxuICovXG5leHBvcnQgaW50ZXJmYWNlIFJlc3VsdFByZXZpZXdzIHtcblx0aW50ZXJuZXQ6IEludGVybmV0UmVzdWx0UHJldmlld1tdO1xuXHRkYXRhYmFzZTogRGF0YWJhc2VSZXN1bHRQcmV2aWV3W107XG5cdGJhdGNoOiBCYXRjaFJlc3VsdFByZXZpZXdbXTtcblx0cmVwb3NpdG9yaWVzPzogUmVwb3NpdG9yeVJlc3VsdFByZXZpZXdbXTtcblx0c2NvcmU6IFNjb3JlO1xufVxuXG4vKipcbiAqIEEgcmVzdWx0cyBmaWx0ZXJzIGZvciByZXBvcnQgdmlld1xuICovXG5leHBvcnQgaW50ZXJmYWNlIENvbXBsZXRlUmVzdWx0c0ZpbHRlcnMge1xuXHRyZXN1bHRJZHM6IHN0cmluZ1tdO1xufVxuXG4vKiogRW51bSByZXByZXNlbnRpbmcgdGhlIHN0YXR1cyBvZiBhIHNjYW4gKi9cbmV4cG9ydCBlbnVtIFNjYW5TdGF0dXMge1xuXHRTdWNjZXNzID0gMCxcblx0RXJyb3IgPSAxLFxuXHRDcmVkaXRzQ2hlY2tlZCA9IDIsXG5cdEluZGV4ZWQgPSAzLFxufVxuXG4vKiogVHlwZSByZXByZXNlbnRpbmcgYSBzdW1tYXJ5IG9mIHRoZSBzY2FubmVkIGRvY3VtZW50IGZyb20gQ29weWxlYWtzIGFwaSAqL1xuZXhwb3J0IGludGVyZmFjZSBTY2FubmVkRG9jdW1lbnQge1xuXHRzY2FuSWQ6IHN0cmluZztcblx0dG90YWxXb3JkczogbnVtYmVyO1xuXHR0b3RhbEV4Y2x1ZGVkOiBudW1iZXI7XG5cdGNyZWRpdHM6IG51bWJlcjtcblx0ZXhwZWN0ZWRDcmVkaXRzPzogbnVtYmVyO1xuXHRjcmVhdGlvblRpbWU6IHN0cmluZztcblx0bWV0YWRhdGE/OiBSZXN1bHRNZXRhRGF0YTtcblx0ZW5hYmxlZD86IFNjYW5uZWREb2N1bWVudEVuYWJsZWQ7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgU2Nhbm5lZERvY3VtZW50RW5hYmxlZCB7XG5cdHBsYWdpYXJpc21EZXRlY3Rpb24/OiBib29sZWFuO1xuXHRhaURldGVjdGlvbj86IGJvb2xlYW47XG59XG5cbi8qKiBUeXBlIHJlcHJlc2VudGluZyBhIHN1bW1hcnkgb2YgdGhlIHJldXNsdHMgb2YgYSBzY2FubmVkIGRvY3VtZW50ICovXG5leHBvcnQgaW50ZXJmYWNlIFNjb3JlIHtcblx0aWRlbnRpY2FsV29yZHM6IG51bWJlcjtcblx0bWlub3JDaGFuZ2VkV29yZHM6IG51bWJlcjtcblx0cmVsYXRlZE1lYW5pbmdXb3JkczogbnVtYmVyO1xuXHRhZ2dyZWdhdGVkU2NvcmU6IG51bWJlcjtcbn1cblxuLyoqIEJhc2UgdHlwZSBmb3IgYSByZXN1bHQgcHJldmlldyAgKi9cbmV4cG9ydCBpbnRlcmZhY2UgUmVzdWx0UHJldmlld0Jhc2Uge1xuXHRpZDogc3RyaW5nO1xuXHR0aXRsZTogc3RyaW5nO1xuXHRpbnRyb2R1Y3Rpb246IHN0cmluZztcblx0bWF0Y2hlZFdvcmRzOiBudW1iZXI7XG5cdHR5cGU6IEVSZXN1bHRQcmV2aWV3VHlwZTtcblx0c2NhbklkPzogc3RyaW5nIHwgdm9pZDtcblx0dXJsPzogc3RyaW5nIHwgdm9pZDtcblx0Y29tcG9uZW50PzogVHlwZTxSZXN1bHRQcmV2aWV3Q29tcG9uZW50QmFzZT47XG5cdG1ldGFkYXRhPzogUmVzdWx0TWV0YURhdGE7XG5cdHRhZ3M/OiBSZXN1bHRUYWdbXTtcbn1cblxuLyoqIFR5cGUgb2YgdGFnIGZvciByZXN1bHQgcHJldmlldyB0YWdzICovXG5leHBvcnQgaW50ZXJmYWNlIFJlc3VsdFRhZyB7XG5cdGNvZGU6IHN0cmluZztcblx0dGl0bGU6IHN0cmluZztcblx0ZGVzY3JpcHRpb246IHN0cmluZztcbn1cblxuLyoqIFR5cGUgZm9yIGNvbXBsZXRlIHJlc3VsdCBtZXRhIGRhdGEgZm9yIHNjYW5uZWQgZG9jdWVtbnRzIGFuZCByZXN1bHQgcHJldmlldyAqL1xuZXhwb3J0IGludGVyZmFjZSBSZXN1bHRNZXRhRGF0YSB7XG5cdGZpbmFsVXJsPzogc3RyaW5nO1xuXHRjYW5vbmljYWxVcmw/OiBzdHJpbmc7XG5cdGF1dGhvcj86IHN0cmluZztcblx0b3JnYW5pemF0aW9uPzogc3RyaW5nO1xuXHRmaWxlbmFtZT86IHN0cmluZztcblx0cHVibGlzaERhdGU/OiBzdHJpbmc7XG5cdGNyZWF0aW9uRGF0ZT86IHN0cmluZztcblx0bGFzdE1vZGlmaWNhdGlvbkRhdGU/OiBzdHJpbmc7XG5cdHN1Ym1pc3Npb25EYXRlPzogc3RyaW5nO1xuXHRzdWJtaXR0ZWRCeT86IHN0cmluZztcblx0Y3VzdG9tTWV0YWRhdGE/OiBJQ3VzdG9tTWV0YURhdGFbXTtcbn1cbi8qKiBjdXN0b20gbWV0YSBkYXRhICovXG5leHBvcnQgaW50ZXJmYWNlIElDdXN0b21NZXRhRGF0YSB7XG5cdGtleT86IHN0cmluZztcblx0dmFsdWU/OiBzdHJpbmc7XG59XG5cbi8qKiByZXN1bHQgcHJldmlldyB0eXBlcyAgKi9cbmV4cG9ydCBlbnVtIEVSZXN1bHRQcmV2aWV3VHlwZSB7XG5cdEJhdGNoLFxuXHRSZXBvc2l0cm95LFxuXHRJbnRlcm5ldCxcblx0RGF0YWJhc2UsXG59XG5cbi8qKiBUeXBlIHJlcHJlc2VudGluZyBhIHNjYW4gcmVzdWx0IHByZXZpZXcgY3VzdG9tIGNvbXBvbmVudCBiYXNlICovXG5leHBvcnQgaW50ZXJmYWNlIFJlc3VsdFByZXZpZXdDb21wb25lbnRCYXNlIHtcblx0c2V0UHJldmlldzogKHByZXZpZXc6IFJlc3VsdFByZXZpZXdCYXNlKSA9PiB2b2lkO1xuXHRpc0xvYWRpbmc6IChpc0xvYWRpbmc6IGJvb2xlYW4pID0+IHZvaWQ7XG5cdHNldFJlc3VsdDogKHJlc3VsdDogUmVzdWx0SXRlbSkgPT4gdm9pZDtcblx0c2V0UGFyZW50UmVmPzogKHBhcmVudDogUmVzdWx0Q2FyZENvbXBvbmVudCkgPT4gdm9pZDtcbn1cblxuLyoqIFR5cGUgY29udGFpbmluZyBhIHByZXZpZXcgb2YgYSByZXN1bHQgZnJvbSB0aGUgaW50ZXJuZXQgKi9cbmV4cG9ydCBpbnRlcmZhY2UgSW50ZXJuZXRSZXN1bHRQcmV2aWV3IGV4dGVuZHMgUmVzdWx0UHJldmlld0Jhc2Uge1xuXHR1cmw6IHN0cmluZztcblx0c2NhbklkOiB2b2lkO1xufVxuLyoqIFR5cGUgY29udGFpbmluZyBhIHByZXZpZXcgb2YgYSByZXN1bHQgZnJvbSB0aGUgY29weWxlYWtzIGRhdGFiYXNlICovXG5leHBvcnQgaW50ZXJmYWNlIERhdGFiYXNlUmVzdWx0UHJldmlldyBleHRlbmRzIFJlc3VsdFByZXZpZXdCYXNlIHtcblx0dXJsOiB2b2lkO1xuXHRzY2FuSWQ/OiBzdHJpbmc7XG59XG4vKiogVHlwZSBjb250YWluaW5nIGEgcHJldmlldyBvZiBhIHJlc3VsdCBmcm9tIGEgYmF0Y2ggc2NhbiAqL1xuZXhwb3J0IGludGVyZmFjZSBCYXRjaFJlc3VsdFByZXZpZXcgZXh0ZW5kcyBSZXN1bHRQcmV2aWV3QmFzZSB7XG5cdHNjYW5JZDogc3RyaW5nO1xuXHR1cmw6IHZvaWQ7XG59XG4vKiogVHlwZSBjb250YWluaW5nIGEgcHJldmlldyBvZiBhIHJlc3VsdCBmcm9tIGEgcmVwb3NpdG9yeSBzY2FuICovXG5leHBvcnQgaW50ZXJmYWNlIFJlcG9zaXRvcnlSZXN1bHRQcmV2aWV3IGV4dGVuZHMgUmVzdWx0UHJldmlld0Jhc2Uge1xuXHRyZXBvc2l0b3J5SWQ6IHN0cmluZztcbn1cblxuLyoqIFR5cGUgY29udGFpbmluZyBzb21lIHByZXZpZXcgb2YgYSByZXN1bHQgZnJvbSBjb3B5bGVha3MgYXBpICovXG5leHBvcnQgdHlwZSBSZXN1bHRQcmV2aWV3ID1cblx0fCBJbnRlcm5ldFJlc3VsdFByZXZpZXdcblx0fCBEYXRhYmFzZVJlc3VsdFByZXZpZXdcblx0fCBCYXRjaFJlc3VsdFByZXZpZXdcblx0fCBSZXBvc2l0b3J5UmVzdWx0UHJldmlldztcblxuLyoqIEVudW0gcmVwcmVzZW50aW5nIHRoZSBhY2Nlc3Mgb2YgYSByZXN1bHQgKi9cbmV4cG9ydCBlbnVtIFJlc3VsdEFjY2VzcyB7XG5cdGZ1bGwsXG5cdGxvY2tlZCxcbn1cbiJdfQ==