import { Injectable } from '@angular/core';
import { BehaviorSubject, combineLatest } from 'rxjs';
import { filter } from 'rxjs/operators';
import { untilDestroy } from '../../shared/operators/untilDestroy';
import * as helpers from '../utils/statistics';
import { distinct } from '../utils/operators';
import * as i0 from "@angular/core";
import * as i1 from "./report.service";
export class StatisticsService {
    constructor(reportService) {
        this._statistics = new BehaviorSubject(undefined);
        this.statistics$ = this._statistics.asObservable().pipe(distinct());
        const { completeResult$, results$, viewMode$, filteredResults$, suspectResult$: suspect$, options$, } = reportService;
        combineLatest([completeResult$, suspect$, options$, viewMode$])
            .pipe(untilDestroy(this), filter(([, suspect, , viewMode]) => viewMode === 'one-to-one' && !!suspect))
            .subscribe(([completeResult, suspect, options]) => this.retreiveOneToOneStatistics(completeResult, suspect, options));
        combineLatest([completeResult$, results$, filteredResults$, options$, viewMode$])
            .pipe(untilDestroy(this), filter(([, , , , viewMode]) => viewMode === 'one-to-many'))
            .subscribe(([completeResult, results, filteredResults, options]) => {
            this.retreieveOneToManyStatistics(completeResult, results, filteredResults, options);
        });
    }
    /**
     * Retreive statistics for a one-to-one comparison using the complete result, suspect, and report options
     * @param completeResult The complete result - contains the count of total words and excluded words in the document
     * @param suspect the currently viewed suspect Result
     * @param options the current report options
     */
    retreiveOneToOneStatistics(completeResult, suspect, options) {
        this._statistics.next({
            identical: options.showIdentical ? suspect.result.statistics.identical : 0,
            relatedMeaning: options.showRelated ? suspect.result.statistics.relatedMeaning : 0,
            minorChanges: options.showMinorChanges ? suspect.result.statistics.minorChanges : 0,
            omittedWords: completeResult.scannedDocument.totalExcluded,
            total: completeResult.scannedDocument.totalWords,
        });
    }
    /**
     * Retreive statistics for a one-to-many comparison using the complete result, results,filtered results, and report options
     * @param completeResult the complete result
     * @param results list of result items containing all the results from the current scan
     * @param filteredResults list of results filtered by user settings, will be the same as `results` when no filter applied
     * @param options the current report options
     */
    retreieveOneToManyStatistics(completeResult, results, filteredResults, options) {
        const totalResults = (completeResult.results.repositories && completeResult.results.repositories.length
            ? completeResult.results.repositories.length
            : 0) +
            completeResult.results.batch.length +
            completeResult.results.internet.length +
            completeResult.results.database.length;
        const showAll = options.showIdentical && options.showMinorChanges && options.showRelated;
        const missingAggregated = totalResults !== 0 && completeResult.results.score.aggregatedScore === 0;
        let stats;
        if ((!completeResult.filters || !completeResult.filters.resultIds || !completeResult.filters.resultIds.length) &&
            (results.length !== totalResults || (totalResults === filteredResults.length && showAll && !missingAggregated))) {
            // * if results are still loading  or no results are fitlered while all match types are visible
            // * we can use the complete result stats without heavy calculations
            stats = {
                identical: completeResult.results.score.identicalWords,
                relatedMeaning: completeResult.results.score.relatedMeaningWords,
                minorChanges: completeResult.results.score.minorChangedWords,
                omittedWords: completeResult.scannedDocument.totalExcluded,
                total: completeResult.scannedDocument.totalWords,
            };
        }
        else {
            stats = helpers.calculateStatistics(completeResult, filteredResults, options);
        }
        this._statistics.next(stats);
    }
    /** dtor */
    ngOnDestroy() {
        this._statistics.complete();
    }
}
StatisticsService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.3", ngImport: i0, type: StatisticsService, deps: [{ token: i1.ReportService }], target: i0.ɵɵFactoryTarget.Injectable });
StatisticsService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "13.3.3", ngImport: i0, type: StatisticsService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.3", ngImport: i0, type: StatisticsService, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i1.ReportService }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RhdGlzdGljcy5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvcGxhZ2lhcmlzbS1yZXBvcnQvc3JjL2xpYi9wbGFnaWFyaXNtLXJlcG9ydC9zZXJ2aWNlcy9zdGF0aXN0aWNzLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFVBQVUsRUFBYSxNQUFNLGVBQWUsQ0FBQztBQUN0RCxPQUFPLEVBQUUsZUFBZSxFQUFFLGFBQWEsRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUN0RCxPQUFPLEVBQUUsTUFBTSxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDeEMsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLHFDQUFxQyxDQUFDO0FBRW5FLE9BQU8sS0FBSyxPQUFPLE1BQU0scUJBQXFCLENBQUM7QUFFL0MsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLG9CQUFvQixDQUFDOzs7QUFHOUMsTUFBTSxPQUFPLGlCQUFpQjtJQUU3QixZQUFZLGFBQTRCO1FBRGhDLGdCQUFXLEdBQUcsSUFBSSxlQUFlLENBQW1CLFNBQVMsQ0FBQyxDQUFDO1FBNEJoRSxnQkFBVyxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUMsWUFBWSxFQUFFLENBQUMsSUFBSSxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUM7UUExQnJFLE1BQU0sRUFDTCxlQUFlLEVBQ2YsUUFBUSxFQUNSLFNBQVMsRUFDVCxnQkFBZ0IsRUFDaEIsY0FBYyxFQUFFLFFBQVEsRUFDeEIsUUFBUSxHQUNSLEdBQUcsYUFBYSxDQUFDO1FBQ2xCLGFBQWEsQ0FBQyxDQUFDLGVBQWUsRUFBRSxRQUFRLEVBQUUsUUFBUSxFQUFFLFNBQVMsQ0FBQyxDQUFDO2FBQzdELElBQUksQ0FDSixZQUFZLENBQUMsSUFBSSxDQUFDLEVBQ2xCLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRSxPQUFPLEVBQUUsQUFBRCxFQUFHLFFBQVEsQ0FBQyxF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RyxDQUFDLE9BQU8sQ0FBQyxNQUFNLEtBQUssWUFBWSxJQUFJLENBQUMsWUFBWSxLQUFLLGVBQWUsQ0FBQyxNQUFNLElBQUksT0FBTyxJQUFJLENBQUMsaUJBQWlCLENBQUMsQ0FBQyxFQUM5RztZQUNELCtGQUErRjtZQUMvRixvRUFBb0U7WUFDcEUsS0FBSyxHQUFHO2dCQUNQLFNBQVMsRUFBRSxjQUFjLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxjQUFjO2dCQUN0RCxjQUFjLEVBQUUsY0FBYyxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsbUJBQW1CO2dCQUNoRSxZQUFZLEVBQUUsY0FBYyxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsaUJBQWlCO2dCQUM1RCxZQUFZLEVBQUUsY0FBYyxDQUFDLGVBQWUsQ0FBQyxhQUFhO2dCQUMxRCxLQUFLLEVBQUUsY0FBYyxDQUFDLGVBQWUsQ0FBQyxVQUFVO2FBQ2hELENBQUM7U0FDRjthQUFNO1lBQ04sS0FBSyxHQUFHLE9BQU8sQ0FBQyxtQkFBbUIsQ0FBQyxjQUFjLEVBQUUsZUFBZSxFQUFFLE9BQU8sQ0FBQyxDQUFDO1NBQzlFO1FBQ0QsSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDOUIsQ0FBQztJQUVELFdBQVc7SUFDWCxXQUFXO1FBQ1YsSUFBSSxDQUFDLFdBQVcsQ0FBQyxRQUFRLEVBQUUsQ0FBQztJQUM3QixDQUFDOzs4R0EzRlcsaUJBQWlCO2tIQUFqQixpQkFBaUI7MkZBQWpCLGlCQUFpQjtrQkFEN0IsVUFBVSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUsIE9uRGVzdHJveSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQmVoYXZpb3JTdWJqZWN0LCBjb21iaW5lTGF0ZXN0IH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBmaWx0ZXIgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5pbXBvcnQgeyB1bnRpbERlc3Ryb3kgfSBmcm9tICcuLi8uLi9zaGFyZWQvb3BlcmF0b3JzL3VudGlsRGVzdHJveSc7XG5pbXBvcnQgeyBSZXBvcnRTdGF0aXN0aWNzLCBDb21wbGV0ZVJlc3VsdCwgUmVzdWx0SXRlbSwgQ29weWxlYWtzUmVwb3J0T3B0aW9ucyB9IGZyb20gJy4uL21vZGVscyc7XG5pbXBvcnQgKiBhcyBoZWxwZXJzIGZyb20gJy4uL3V0aWxzL3N0YXRpc3RpY3MnO1xuaW1wb3J0IHsgUmVwb3J0U2VydmljZSB9IGZyb20gJy4vcmVwb3J0LnNlcnZpY2UnO1xuaW1wb3J0IHsgZGlzdGluY3QgfSBmcm9tICcuLi91dGlscy9vcGVyYXRvcnMnO1xuXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgU3RhdGlzdGljc1NlcnZpY2UgaW1wbGVtZW50cyBPbkRlc3Ryb3kge1xuXHRwcml2YXRlIF9zdGF0aXN0aWNzID0gbmV3IEJlaGF2aW9yU3ViamVjdDxSZXBvcnRTdGF0aXN0aWNzPih1bmRlZmluZWQpO1xuXHRjb25zdHJ1Y3RvcihyZXBvcnRTZXJ2aWNlOiBSZXBvcnRTZXJ2aWNlKSB7XG5cdFx0Y29uc3Qge1xuXHRcdFx0Y29tcGxldGVSZXN1bHQkLFxuXHRcdFx0cmVzdWx0cyQsXG5cdFx0XHR2aWV3TW9kZSQsXG5cdFx0XHRmaWx0ZXJlZFJlc3VsdHMkLFxuXHRcdFx0c3VzcGVjdFJlc3VsdCQ6IHN1c3BlY3QkLFxuXHRcdFx0b3B0aW9ucyQsXG5cdFx0fSA9IHJlcG9ydFNlcnZpY2U7XG5cdFx0Y29tYmluZUxhdGVzdChbY29tcGxldGVSZXN1bHQkLCBzdXNwZWN0JCwgb3B0aW9ucyQsIHZpZXdNb2RlJF0pXG5cdFx0XHQucGlwZShcblx0XHRcdFx0dW50aWxEZXN0cm95KHRoaXMpLFxuXHRcdFx0XHRmaWx0ZXIoKFssIHN1c3BlY3QsICwgdmlld01vZGVdKSA9PiB2aWV3TW9kZSA9PT0gJ29uZS10by1vbmUnICYmICEhc3VzcGVjdClcblx0XHRcdClcblx0XHRcdC5zdWJzY3JpYmUoKFtjb21wbGV0ZVJlc3VsdCwgc3VzcGVjdCwgb3B0aW9uc10pID0+XG5cdFx0XHRcdHRoaXMucmV0cmVpdmVPbmVUb09uZVN0YXRpc3RpY3MoY29tcGxldGVSZXN1bHQsIHN1c3BlY3QsIG9wdGlvbnMpXG5cdFx0XHQpO1xuXHRcdGNvbWJpbmVMYXRlc3QoW2NvbXBsZXRlUmVzdWx0JCwgcmVzdWx0cyQsIGZpbHRlcmVkUmVzdWx0cyQsIG9wdGlvbnMkLCB2aWV3TW9kZSRdKVxuXHRcdFx0LnBpcGUoXG5cdFx0XHRcdHVudGlsRGVzdHJveSh0aGlzKSxcblx0XHRcdFx0ZmlsdGVyKChbLCAsICwgLCB2aWV3TW9kZV0pID0+IHZpZXdNb2RlID09PSAnb25lLXRvLW1hbnknKVxuXHRcdFx0KVxuXHRcdFx0LnN1YnNjcmliZSgoW2NvbXBsZXRlUmVzdWx0LCByZXN1bHRzLCBmaWx0ZXJlZFJlc3VsdHMsIG9wdGlvbnNdKSA9PiB7XG5cdFx0XHRcdHRoaXMucmV0cmVpZXZlT25lVG9NYW55U3RhdGlzdGljcyhjb21wbGV0ZVJlc3VsdCwgcmVzdWx0cywgZmlsdGVyZWRSZXN1bHRzLCBvcHRpb25zKTtcblx0XHRcdH0pO1xuXHR9XG5cblx0cHVibGljIHN0YXRpc3RpY3MkID0gdGhpcy5fc3RhdGlzdGljcy5hc09ic2VydmFibGUoKS5waXBlKGRpc3RpbmN0KCkpO1xuXHQvKipcblx0ICogUmV0cmVpdmUgc3RhdGlzdGljcyBmb3IgYSBvbmUtdG8tb25lIGNvbXBhcmlzb24gdXNpbmcgdGhlIGNvbXBsZXRlIHJlc3VsdCwgc3VzcGVjdCwgYW5kIHJlcG9ydCBvcHRpb25zXG5cdCAqIEBwYXJhbSBjb21wbGV0ZVJlc3VsdCBUaGUgY29tcGxldGUgcmVzdWx0IC0gY29udGFpbnMgdGhlIGNvdW50IG9mIHRvdGFsIHdvcmRzIGFuZCBleGNsdWRlZCB3b3JkcyBpbiB0aGUgZG9jdW1lbnRcblx0ICogQHBhcmFtIHN1c3BlY3QgdGhlIGN1cnJlbnRseSB2aWV3ZWQgc3VzcGVjdCBSZXN1bHRcblx0ICogQHBhcmFtIG9wdGlvbnMgdGhlIGN1cnJlbnQgcmVwb3J0IG9wdGlvbnNcblx0ICovXG5cdHJldHJlaXZlT25lVG9PbmVTdGF0aXN0aWNzKGNvbXBsZXRlUmVzdWx0OiBDb21wbGV0ZVJlc3VsdCwgc3VzcGVjdDogUmVzdWx0SXRlbSwgb3B0aW9uczogQ29weWxlYWtzUmVwb3J0T3B0aW9ucykge1xuXHRcdHRoaXMuX3N0YXRpc3RpY3MubmV4dCh7XG5cdFx0XHRpZGVudGljYWw6IG9wdGlvbnMuc2hvd0lkZW50aWNhbCA/IHN1c3BlY3QucmVzdWx0LnN0YXRpc3RpY3MuaWRlbnRpY2FsIDogMCxcblx0XHRcdHJlbGF0ZWRNZWFuaW5nOiBvcHRpb25zLnNob3dSZWxhdGVkID8gc3VzcGVjdC5yZXN1bHQuc3RhdGlzdGljcy5yZWxhdGVkTWVhbmluZyA6IDAsXG5cdFx0XHRtaW5vckNoYW5nZXM6IG9wdGlvbnMuc2hvd01pbm9yQ2hhbmdlcyA/IHN1c3BlY3QucmVzdWx0LnN0YXRpc3RpY3MubWlub3JDaGFuZ2VzIDogMCxcblx0XHRcdG9taXR0ZWRXb3JkczogY29tcGxldGVSZXN1bHQuc2Nhbm5lZERvY3VtZW50LnRvdGFsRXhjbHVkZWQsXG5cdFx0XHR0b3RhbDogY29tcGxldGVSZXN1bHQuc2Nhbm5lZERvY3VtZW50LnRvdGFsV29yZHMsXG5cdFx0fSk7XG5cdH1cblxuXHQvKipcblx0ICogUmV0cmVpdmUgc3RhdGlzdGljcyBmb3IgYSBvbmUtdG8tbWFueSBjb21wYXJpc29uIHVzaW5nIHRoZSBjb21wbGV0ZSByZXN1bHQsIHJlc3VsdHMsZmlsdGVyZWQgcmVzdWx0cywgYW5kIHJlcG9ydCBvcHRpb25zXG5cdCAqIEBwYXJhbSBjb21wbGV0ZVJlc3VsdCB0aGUgY29tcGxldGUgcmVzdWx0XG5cdCAqIEBwYXJhbSByZXN1bHRzIGxpc3Qgb2YgcmVzdWx0IGl0ZW1zIGNvbnRhaW5pbmcgYWxsIHRoZSByZXN1bHRzIGZyb20gdGhlIGN1cnJlbnQgc2NhblxuXHQgKiBAcGFyYW0gZmlsdGVyZWRSZXN1bHRzIGxpc3Qgb2YgcmVzdWx0cyBmaWx0ZXJlZCBieSB1c2VyIHNldHRpbmdzLCB3aWxsIGJlIHRoZSBzYW1lIGFzIGByZXN1bHRzYCB3aGVuIG5vIGZpbHRlciBhcHBsaWVkXG5cdCAqIEBwYXJhbSBvcHRpb25zIHRoZSBjdXJyZW50IHJlcG9ydCBvcHRpb25zXG5cdCAqL1xuXHRyZXRyZWlldmVPbmVUb01hbnlTdGF0aXN0aWNzKFxuXHRcdGNvbXBsZXRlUmVzdWx0OiBDb21wbGV0ZVJlc3VsdCxcblx0XHRyZXN1bHRzOiBSZXN1bHRJdGVtW10sXG5cdFx0ZmlsdGVyZWRSZXN1bHRzOiBSZXN1bHRJdGVtW10sXG5cdFx0b3B0aW9uczogQ29weWxlYWtzUmVwb3J0T3B0aW9uc1xuXHQpIHtcblx0XHRjb25zdCB0b3RhbFJlc3VsdHMgPVxuXHRcdFx0KGNvbXBsZXRlUmVzdWx0LnJlc3VsdHMucmVwb3NpdG9yaWVzICYmIGNvbXBsZXRlUmVzdWx0LnJlc3VsdHMucmVwb3NpdG9yaWVzLmxlbmd0aFxuXHRcdFx0XHQ/IGNvbXBsZXRlUmVzdWx0LnJlc3VsdHMucmVwb3NpdG9yaWVzLmxlbmd0aFxuXHRcdFx0XHQ6IDApICtcblx0XHRcdGNvbXBsZXRlUmVzdWx0LnJlc3VsdHMuYmF0Y2gubGVuZ3RoICtcblx0XHRcdGNvbXBsZXRlUmVzdWx0LnJlc3VsdHMuaW50ZXJuZXQubGVuZ3RoICtcblx0XHRcdGNvbXBsZXRlUmVzdWx0LnJlc3VsdHMuZGF0YWJhc2UubGVuZ3RoO1xuXHRcdGNvbnN0IHNob3dBbGwgPSBvcHRpb25zLnNob3dJZGVudGljYWwgJiYgb3B0aW9ucy5zaG93TWlub3JDaGFuZ2VzICYmIG9wdGlvbnMuc2hvd1JlbGF0ZWQ7XG5cdFx0Y29uc3QgbWlzc2luZ0FnZ3JlZ2F0ZWQgPSB0b3RhbFJlc3VsdHMgIT09IDAgJiYgY29tcGxldGVSZXN1bHQucmVzdWx0cy5zY29yZS5hZ2dyZWdhdGVkU2NvcmUgPT09IDA7XG5cdFx0bGV0IHN0YXRzOiBSZXBvcnRTdGF0aXN0aWNzO1xuXHRcdGlmIChcblx0XHRcdCghY29tcGxldGVSZXN1bHQuZmlsdGVycyB8fCAhY29tcGxldGVSZXN1bHQuZmlsdGVycy5yZXN1bHRJZHMgfHwgIWNvbXBsZXRlUmVzdWx0LmZpbHRlcnMucmVzdWx0SWRzLmxlbmd0aCkgJiZcblx0XHRcdChyZXN1bHRzLmxlbmd0aCAhPT0gdG90YWxSZXN1bHRzIHx8ICh0b3RhbFJlc3VsdHMgPT09IGZpbHRlcmVkUmVzdWx0cy5sZW5ndGggJiYgc2hvd0FsbCAmJiAhbWlzc2luZ0FnZ3JlZ2F0ZWQpKVxuXHRcdCkge1xuXHRcdFx0Ly8gKiBpZiByZXN1bHRzIGFyZSBzdGlsbCBsb2FkaW5nICBvciBubyByZXN1bHRzIGFyZSBmaXRsZXJlZCB3aGlsZSBhbGwgbWF0Y2ggdHlwZXMgYXJlIHZpc2libGVcblx0XHRcdC8vICogd2UgY2FuIHVzZSB0aGUgY29tcGxldGUgcmVzdWx0IHN0YXRzIHdpdGhvdXQgaGVhdnkgY2FsY3VsYXRpb25zXG5cdFx0XHRzdGF0cyA9IHtcblx0XHRcdFx0aWRlbnRpY2FsOiBjb21wbGV0ZVJlc3VsdC5yZXN1bHRzLnNjb3JlLmlkZW50aWNhbFdvcmRzLFxuXHRcdFx0XHRyZWxhdGVkTWVhbmluZzogY29tcGxldGVSZXN1bHQucmVzdWx0cy5zY29yZS5yZWxhdGVkTWVhbmluZ1dvcmRzLFxuXHRcdFx0XHRtaW5vckNoYW5nZXM6IGNvbXBsZXRlUmVzdWx0LnJlc3VsdHMuc2NvcmUubWlub3JDaGFuZ2VkV29yZHMsXG5cdFx0XHRcdG9taXR0ZWRXb3JkczogY29tcGxldGVSZXN1bHQuc2Nhbm5lZERvY3VtZW50LnRvdGFsRXhjbHVkZWQsXG5cdFx0XHRcdHRvdGFsOiBjb21wbGV0ZVJlc3VsdC5zY2FubmVkRG9jdW1lbnQudG90YWxXb3Jkcyxcblx0XHRcdH07XG5cdFx0fSBlbHNlIHtcblx0XHRcdHN0YXRzID0gaGVscGVycy5jYWxjdWxhdGVTdGF0aXN0aWNzKGNvbXBsZXRlUmVzdWx0LCBmaWx0ZXJlZFJlc3VsdHMsIG9wdGlvbnMpO1xuXHRcdH1cblx0XHR0aGlzLl9zdGF0aXN0aWNzLm5leHQoc3RhdHMpO1xuXHR9XG5cblx0LyoqIGR0b3IgKi9cblx0bmdPbkRlc3Ryb3koKSB7XG5cdFx0dGhpcy5fc3RhdGlzdGljcy5jb21wbGV0ZSgpO1xuXHR9XG59XG4iXX0=