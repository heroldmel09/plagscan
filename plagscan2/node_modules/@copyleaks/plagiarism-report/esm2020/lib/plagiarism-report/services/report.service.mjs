import { Injectable } from '@angular/core';
import { BehaviorSubject, combineLatest, of, Subject } from 'rxjs';
import { distinctUntilChanged, map, switchMap, take } from 'rxjs/operators';
import { untilDestroy } from '../../shared/operators/untilDestroy';
import { EResultPreviewType, } from '../models';
import { ALERTS, DEFAULT_REPORT_CONFIG } from '../utils/constants';
import { truthy } from '../utils/operators';
import * as helpers from '../utils/statistics';
import * as i0 from "@angular/core";
import * as i1 from "./copyleaks.service";
/**
 * @todo implement saving options localstorage
 */
export class ReportService {
    constructor(copyleaksService) {
        this.copyleaksService = copyleaksService;
        // * scans API items
        this._completeResult = new BehaviorSubject(null);
        this._source = new BehaviorSubject(null);
        this._previews = new BehaviorSubject(null);
        this._results = new BehaviorSubject([]);
        // * optional total result
        this._totalResults = new BehaviorSubject(null);
        // * configurable state
        this._config = new BehaviorSubject({ ...DEFAULT_REPORT_CONFIG });
        this._progress = new BehaviorSubject(null);
        this._hiddenResults = new BehaviorSubject([]);
        // * Event emitters
        this._helpClick = new Subject();
        this._shareClick = new Subject();
        this._downloadClick = new Subject();
        this._planUpgradeEvent = new Subject();
        this._configChange = new Subject();
        this.completeResult$ = this._completeResult.asObservable().pipe(truthy());
        this.totalResults$ = this._totalResults.asObservable();
        this.source$ = this._source.asObservable().pipe(truthy(), take(1));
        this.progress$ = this._progress.asObservable();
        /** config observable */
        this.config$ = this._config.asObservable();
        /** sub config observeables */
        this.contentMode$ = this.config$.pipe(map(x => x.contentMode));
        this.viewMode$ = this.config$.pipe(map(x => x.viewMode));
        this.viewMode = this._config.value.viewMode;
        this.suspectId$ = this.config$.pipe(map(x => x.suspectId));
        this.help$ = this.config$.pipe(map(x => x.help));
        this.download$ = this.config$.pipe(map(x => x.download));
        this.settings$ = this.config$.pipe(map(x => x.settings));
        this.share$ = this.config$.pipe(map(x => x.share));
        this.options$ = this.config$.pipe(map(x => x.options));
        this.resultCardActions$ = this.config$.pipe(map(x => x.resultCardActions));
        this.onlyOneToOne$ = this.config$.pipe(map(x => x.disableSuspectBackButton));
        this.sourcePage$ = this.config$.pipe(map(x => x.sourcePage));
        this.suspectPage$ = this.config$.pipe(map(x => x.suspectPage));
        this.suspectResult$ = this.suspectId$.pipe(switchMap(id => (id ? this.findResultById$(id) : of(null))));
        this.suspectPreview$ = this.suspectId$.pipe(switchMap(id => (id ? this.findPreviewById$(id) : of(null))));
        this.hiddenResults$ = this._hiddenResults.asObservable().pipe(distinctUntilChanged());
        this.results$ = this._results.asObservable().pipe(truthy());
        this.previews$ = this._previews.asObservable().pipe(truthy());
        this.filteredPreviews$ = combineLatest([this.previews$, this.hiddenResults$]).pipe(map(([results, ids]) => results.filter(result => !ids.includes(result.id))));
        this.filteredResults$ = combineLatest([this.results$, this.hiddenResults$]).pipe(map(([results, ids]) => results.filter(result => !ids.includes(result.id))));
        this.helpClick$ = this._helpClick.asObservable();
        this.downloadClick$ = this._downloadClick.asObservable();
        this.planUpgradeEvent$ = this._planUpgradeEvent.asObservable();
        this.shareClick$ = this._shareClick.asObservable();
        this.configChange$ = this._configChange.asObservable();
        const { onCompleteResult$, onResultPreview$, onProgress$, onResultItems$, onScanSource$, onReportConfig$, filteredResultsIds$, onTotalResultsChange$, onDeleteResultById$, onDeleteProccessFinish$, } = copyleaksService;
        onCompleteResult$.pipe(untilDestroy(this)).subscribe(completeResult => this.setCompleteResult(completeResult));
        onResultPreview$.pipe(untilDestroy(this)).subscribe(preview => this.addPreview(preview));
        onProgress$.pipe(untilDestroy(this)).subscribe(progress => this.setProgress(progress));
        onTotalResultsChange$.pipe(untilDestroy(this)).subscribe(totalResults => this.setTotalResults(totalResults));
        onResultItems$.pipe(untilDestroy(this)).subscribe(resultItem => this.addDownloadedResults(resultItem));
        onScanSource$.pipe(untilDestroy(this)).subscribe(source => this.setSource(source));
        onReportConfig$.pipe(untilDestroy(this)).subscribe(config => this.configure(config));
        this.config$.pipe(untilDestroy(this)).subscribe(config => this._configChange.next(config));
        combineLatest([this.source$, this.completeResult$])
            .pipe(untilDestroy(this), take(1))
            .subscribe(() => this._progress.next(100));
        filteredResultsIds$
            .pipe(untilDestroy(this), distinctUntilChanged())
            .subscribe(ids => this._hiddenResults.next(ids));
        onDeleteResultById$.pipe(untilDestroy(this)).subscribe(id => {
            const currentCompleteResult = this._completeResult.value;
            const statistics = helpers.calculateStatistics(currentCompleteResult, this._results.value.filter(r => r.id !== id), {
                showIdentical: true,
                showMinorChanges: true,
                showPageSources: true,
                showOnlyTopResults: false,
                showRelated: true,
            });
            this.setCompleteResult({
                ...currentCompleteResult,
                scannedDocument: {
                    ...currentCompleteResult.scannedDocument,
                    totalWords: statistics.total,
                    totalExcluded: statistics.omittedWords,
                },
                results: {
                    ...currentCompleteResult.results,
                    batch: currentCompleteResult.results.batch.filter(r => r.id !== id),
                    internet: currentCompleteResult.results.internet.filter(r => r.id !== id),
                    database: currentCompleteResult.results.database.filter(r => r.id !== id),
                    repositories: currentCompleteResult.results.repositories?.filter(r => r.id !== id),
                    score: {
                        ...currentCompleteResult.results.score,
                        aggregatedScore: statistics.aggregatedScore,
                        identicalWords: statistics.identical,
                        relatedMeaningWords: statistics.relatedMeaning,
                        minorChangedWords: statistics.minorChanges,
                    },
                },
            });
            this._results.next(this._results.value.filter(r => r.id !== id));
            onDeleteProccessFinish$.next(this._completeResult.value);
        });
    }
    /**
     * Get an observable of some result by id
     * The observable completes after emitting the result
     * @param id the result id
     */
    findResultById$(id) {
        return this.results$.pipe(map(results => results.find(res => res.id === id)), truthy(), take(1));
    }
    /**
     * Get an observable of some preview by id
     * The observable completes after emitting the result
     * @param id the preview id
     */
    findPreviewById$(id) {
        return this._previews.pipe(truthy(), map(preview => preview.find(res => res.id === id)), take(1));
    }
    /**
     * Pushes a new complete result that contains the report `metadata` and updates the metadata observer.
     * @param completeResult the complete result object
     */
    setCompleteResult(completeResult) {
        const { internet, database, batch, repositories } = completeResult.results;
        const previews = [
            ...(repositories && repositories.length
                ? repositories.map(r => ({ ...r, type: EResultPreviewType.Repositroy }))
                : []),
            ...internet.map(r => ({ ...r, type: EResultPreviewType.Internet })),
            ...database.map(r => ({ ...r, type: EResultPreviewType.Database })),
            ...batch.map(r => ({ ...r, type: EResultPreviewType.Batch })),
        ];
        previews.sort((a, b) => a.matchedWords - b.matchedWords).forEach(preview => this.addPreview(preview));
        this._previews.next(previews);
        if (!completeResult.scannedDocument.creationTime.endsWith('Z')) {
            completeResult.scannedDocument.creationTime += 'Z';
        }
        if (completeResult.filters && completeResult.filters.resultIds) {
            this.setHiddenResults(completeResult.filters.resultIds);
        }
        this._completeResult.next(completeResult);
    }
    /**
     * set the total results observer
     * @param totalResults the total results amount
     */
    setTotalResults(totalResults) {
        this._totalResults.next(totalResults);
    }
    /**
     * Pushes a new scan `source` to the source observer
     * @param source the scanned document source
     */
    setSource(source) {
        this._source.next(source);
        /** Switch to text in case no html exists */
        if (source && (!source.html || !source.html.value) && this._config.value.contentMode === 'html') {
            this.configure({ contentMode: 'text' });
        }
    }
    /**
     * Pushes a new number to the `progress` observer
     * Should be a positive integer between 0 and 100;
     * if `progress` is equal to 100 then the progress observer will complete.
     * (This behaviour might change in the future)
     * @param progress the progress to display
     */
    setProgress(progress) {
        this._progress.next(progress);
    }
    /**
     * Pushes a new list of `ids` to the hidden results observer
     * @param ids the ids to hide
     */
    setHiddenResults(ids) {
        const currentCompleteResult = this._completeResult?.value;
        let aggregatedScore = null;
        if (currentCompleteResult) {
            const statistics = helpers.calculateStatistics(currentCompleteResult, this._results.value.filter(r => !ids.includes(r.id)), {
                showIdentical: true,
                showMinorChanges: true,
                showPageSources: true,
                showOnlyTopResults: false,
                showRelated: true,
            });
            aggregatedScore = statistics.aggregatedScore;
        }
        this.copyleaksService.setFilteredResultsIds(ids, aggregatedScore);
    }
    /**
     * Pushes a new `event` to the help-click observer, indicating the help button was clicked
     * @param event native click event
     */
    helpBtnClicked(event) {
        this._helpClick.next(event);
    }
    /**
     * Pushes a new `event` to the share-click observer, indicating the share button was clicked
     * @param event native click event
     */
    shareBtnClicked(event) {
        this._shareClick.next(event);
    }
    /**
     * Pushes a new `event` to the download-click observer, indicating the download button was clicked
     * @param event native click event
     */
    downloadBtnClicked(event) {
        this._downloadClick.next(event);
    }
    /**
     * Pushes a new `event` to the plan-upgrade event observer, indicating the plan-upgrade event button was clicked
     */
    upgradePlanEvent() {
        const completeResult = this._completeResult?.value;
        let recommendedPagesAmount = completeResult.scannedDocument?.credits;
        if (completeResult?.scannedDocument?.expectedCredits) {
            recommendedPagesAmount =
                completeResult?.scannedDocument?.expectedCredits - completeResult.scannedDocument?.credits;
        }
        this._planUpgradeEvent.next(recommendedPagesAmount);
    }
    /**
     * Push a new `preview` of a result to the previews observer
     * This function does nothing if the complete result is ready
     * or if the preview was allready pushed
     * @param preview the preview to push next
     */
    addPreview(preview) {
        if (!this._completeResult.value && !(this._previews.value || []).find(p => p.id === preview.id)) {
            this._previews.next([...(this._previews.value || []), preview]);
        }
    }
    /**
     * Pushes an array of new `result`s to the results observable
     * @param resultItems an array containing resultItem elements
     */
    addDownloadedResults(resultItems) {
        const newItems = resultItems.filter(res => !this._results.value.find(x => x.id === res.id));
        if (newItems.length) {
            this._results.next([...this._results.value, ...newItems]);
        }
    }
    /**
     * Edit the current state of the report using either a full or partial configuration object
     * @param config the configuration object
     */
    configure(config) {
        this._config.next(Object.assign(this._config.value, config));
    }
    hasNonAIAlerts() {
        const completeResult = this._completeResult.value;
        if (completeResult?.notifications?.alerts?.filter(s => s.code != ALERTS.SUSPECTED_AI_TEXT_DETECTED).length > 0) {
            return true;
        }
        return false;
    }
    isPlagiarismEnabled() {
        const completeResult = this._completeResult.value;
        if (completeResult) {
            if (completeResult?.scannedDocument?.enabled?.plagiarismDetection != null)
                return completeResult?.scannedDocument?.enabled?.plagiarismDetection;
        }
        return true;
    }
    isAiDetectionEnabled() {
        const completeResult = this._completeResult.value;
        if (completeResult) {
            if (completeResult?.scannedDocument?.enabled?.aiDetection)
                return true;
            return (completeResult?.notifications?.alerts?.length &&
                completeResult?.notifications?.alerts.filter(alert => alert.code == ALERTS.SUSPECTED_AI_TEXT_DETECTED).length ==
                    1);
        }
        return false;
    }
    getAiScore() {
        if (this.isAiDetectionEnabled()) {
            const completeResult = this._completeResult.value;
            const aiAlert = completeResult.notifications.alerts.find(alert => alert.code == ALERTS.SUSPECTED_AI_TEXT_DETECTED);
            if (aiAlert) {
                const aiData = JSON.parse(aiAlert.additionalData);
                return aiData.summary.ai;
            }
            return 0;
        }
        return null;
    }
    /** Completes all subjects to prevent memory leak */
    cleanup() {
        this._config.complete();
        this._completeResult.complete();
        this._source.complete();
        this._previews.complete();
        this._results.complete();
        this._progress.complete();
        this._totalResults.complete();
        this._hiddenResults.complete();
        this._downloadClick.complete();
        this._shareClick.complete();
        this._configChange.complete();
    }
    /** Clean all subjects and notify that the report has been destroyed */
    ngOnDestroy() {
        this.cleanup();
        this.copyleaksService.notifyDestroy();
    }
}
ReportService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.3", ngImport: i0, type: ReportService, deps: [{ token: i1.CopyleaksService }], target: i0.ɵɵFactoryTarget.Injectable });
ReportService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "13.3.3", ngImport: i0, type: ReportService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.3", ngImport: i0, type: ReportService, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i1.CopyleaksService }]; } });
//# sourceMappingURL=data:application/json;base64,