import { Injectable } from '@angular/core';
import { BehaviorSubject, Subject } from 'rxjs';
import { takeUntil } from 'rxjs/operators';
import { ALERTS } from '../utils/constants';
import * as i0 from "@angular/core";
import * as i1 from "./report.service";
export var EReportViewModel;
(function (EReportViewModel) {
    EReportViewModel[EReportViewModel["ScanningResult"] = 0] = "ScanningResult";
    EReportViewModel[EReportViewModel["Alerts"] = 1] = "Alerts";
    EReportViewModel[EReportViewModel["AIView"] = 2] = "AIView";
})(EReportViewModel || (EReportViewModel = {}));
export class ViewModeService {
    constructor(reportService) {
        this.reportService = reportService;
        this._reportViewMode$ = new BehaviorSubject(EReportViewModel.ScanningResult);
        this._unsub = new Subject();
        this.reportService.completeResult$.pipe(takeUntil(this._unsub)).subscribe(completeResult => {
            if (this.reportService.isPlagiarismEnabled()) {
                const hasAlerts = completeResult?.notifications?.alerts?.filter(s => s.code != ALERTS.SUSPECTED_AI_TEXT_DETECTED)?.length;
                const hasResults = !!completeResult.results?.batch?.length ||
                    !!completeResult.results?.internet?.length ||
                    !!completeResult.results?.database?.length ||
                    !!completeResult.results?.repositories?.length;
                if (hasAlerts && !hasResults) {
                    this._reportViewMode$.next(EReportViewModel.Alerts);
                }
            }
            else if (this.reportService.isAiDetectionEnabled()) {
                this.showAIAlertView(completeResult);
            }
        });
    }
    get reportViewMode$() {
        return this._reportViewMode$;
    }
    get selectedAlert() {
        return this._selectedAlert;
    }
    set selectedAlert(alert) {
        this._selectedAlert = alert;
    }
    showAIAlertView(completeResult) {
        this.reportService.configure({ contentMode: 'text' });
        const aiAlert = completeResult?.notifications?.alerts?.find(s => s.code == ALERTS.SUSPECTED_AI_TEXT_DETECTED);
        if (aiAlert) {
            this._selectedAlert = aiAlert;
        }
        this._reportViewMode$.next(EReportViewModel.AIView);
    }
    /**
     * change the view of the report
     * @param mode view mode
     */
    changeViewMode$(mode) {
        this._reportViewMode$.next(mode);
    }
    /**
     * unsubscribe from observalbes on destroy
     */
    ngOnDestroy() {
        this._reportViewMode$.unsubscribe();
    }
}
ViewModeService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.3", ngImport: i0, type: ViewModeService, deps: [{ token: i1.ReportService }], target: i0.ɵɵFactoryTarget.Injectable });
ViewModeService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "13.3.3", ngImport: i0, type: ViewModeService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.3", ngImport: i0, type: ViewModeService, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i1.ReportService }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidmlldy1tb2RlLnNlcnZpY2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9wbGFnaWFyaXNtLXJlcG9ydC9zcmMvbGliL3BsYWdpYXJpc20tcmVwb3J0L3NlcnZpY2VzL3ZpZXctbW9kZS5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQWEsTUFBTSxlQUFlLENBQUM7QUFDdEQsT0FBTyxFQUFFLGVBQWUsRUFBRSxPQUFPLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFDaEQsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBRTNDLE9BQU8sRUFBRSxNQUFNLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQzs7O0FBRzVDLE1BQU0sQ0FBTixJQUFZLGdCQUlYO0FBSkQsV0FBWSxnQkFBZ0I7SUFDM0IsMkVBQWMsQ0FBQTtJQUNkLDJEQUFNLENBQUE7SUFDTiwyREFBTSxDQUFBO0FBQ1AsQ0FBQyxFQUpXLGdCQUFnQixLQUFoQixnQkFBZ0IsUUFJM0I7QUFHRCxNQUFNLE9BQU8sZUFBZTtJQWlCM0IsWUFBb0IsYUFBNEI7UUFBNUIsa0JBQWEsR0FBYixhQUFhLENBQWU7UUFoQi9CLHFCQUFnQixHQUFHLElBQUksZUFBZSxDQUFtQixnQkFBZ0IsQ0FBQyxjQUFjLENBQUMsQ0FBQztRQUVuRyxXQUFNLEdBQUcsSUFBSSxPQUFPLEVBQUUsQ0FBQztRQWU5QixJQUFJLENBQUMsYUFBYSxDQUFDLGVBQWUsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxjQUFjLENBQUMsRUFBRTtZQUMxRixJQUFJLElBQUksQ0FBQyxhQUFhLENBQUMsbUJBQW1CLEVBQUUsRUFBRTtnQkFDN0MsTUFBTSxTQUFTLEdBQUcsY0FBYyxFQUFFLGFBQWEsRUFBRSxNQUFNLEVBQUUsTUFBTSxDQUM5RCxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFJLElBQUksTUFBTSxDQUFDLDBCQUEwQixDQUNoRCxFQUFFLE1BQU0sQ0FBQztnQkFFVixNQUFNLFVBQVUsR0FDZixDQUFDLENBQUMsY0FBYyxDQUFDLE9BQU8sRUFBRSxLQUFLLEVBQUUsTUFBTTtvQkFDdkMsQ0FBQyxDQUFDLGNBQWMsQ0FBQyxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU07b0JBQzFDLENBQUMsQ0FBQyxjQUFjLENBQUMsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNO29CQUMxQyxDQUFDLENBQUMsY0FBYyxDQUFDLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxDQUFDO2dCQUVoRCxJQUFJLFNBQVMsSUFBSSxDQUFDLFVBQVUsRUFBRTtvQkFDN0IsSUFBSSxDQUFDLGdCQUFnQixDQUFDLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxNQUFNLENBQUMsQ0FBQztpQkFDcEQ7YUFDRDtpQkFBTSxJQUFJLElBQUksQ0FBQyxhQUFhLENBQUMsb0JBQW9CLEVBQUUsRUFBRTtnQkFDckQsSUFBSSxDQUFDLGVBQWUsQ0FBQyxjQUFjLENBQUMsQ0FBQzthQUNyQztRQUNGLENBQUMsQ0FBQyxDQUFDO0lBQ0osQ0FBQztJQWhDRCxJQUFJLGVBQWU7UUFDbEIsT0FBTyxJQUFJLENBQUMsZ0JBQWdCLENBQUM7SUFDOUIsQ0FBQztJQUVELElBQUksYUFBYTtRQUNoQixPQUFPLElBQUksQ0FBQyxjQUFjLENBQUM7SUFDNUIsQ0FBQztJQUVELElBQUksYUFBYSxDQUFDLEtBQXNDO1FBQ3ZELElBQUksQ0FBQyxjQUFjLEdBQUcsS0FBSyxDQUFDO0lBQzdCLENBQUM7SUF3QkQsZUFBZSxDQUFDLGNBQThCO1FBQzdDLElBQUksQ0FBQyxhQUFhLENBQUMsU0FBUyxDQUFDLEVBQUUsV0FBVyxFQUFFLE1BQU0sRUFBRSxDQUFDLENBQUM7UUFFdEQsTUFBTSxPQUFPLEdBQUcsY0FBYyxFQUFFLGFBQWEsRUFBRSxNQUFNLEVBQUUsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLElBQUksSUFBSSxNQUFNLENBQUMsMEJBQTBCLENBQUMsQ0FBQztRQUU5RyxJQUFJLE9BQU8sRUFBRTtZQUNaLElBQUksQ0FBQyxjQUFjLEdBQUcsT0FBTyxDQUFDO1NBQzlCO1FBRUQsSUFBSSxDQUFDLGdCQUFnQixDQUFDLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUNyRCxDQUFDO0lBRUQ7OztPQUdHO0lBQ0gsZUFBZSxDQUFDLElBQXNCO1FBQ3JDLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDbEMsQ0FBQztJQUVEOztPQUVHO0lBQ0gsV0FBVztRQUNWLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxXQUFXLEVBQUUsQ0FBQztJQUNyQyxDQUFDOzs0R0FoRVcsZUFBZTtnSEFBZixlQUFlOzJGQUFmLGVBQWU7a0JBRDNCLFVBQVUiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlLCBPbkRlc3Ryb3kgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEJlaGF2aW9yU3ViamVjdCwgU3ViamVjdCB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgdGFrZVVudGlsIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuaW1wb3J0IHsgQ29tcGxldGVSZXN1bHQsIENvbXBsZXRlUmVzdWx0Tm90aWZpY2F0aW9uQWxlcnQgfSBmcm9tICcuLi9tb2RlbHMnO1xuaW1wb3J0IHsgQUxFUlRTIH0gZnJvbSAnLi4vdXRpbHMvY29uc3RhbnRzJztcbmltcG9ydCB7IFJlcG9ydFNlcnZpY2UgfSBmcm9tICcuL3JlcG9ydC5zZXJ2aWNlJztcblxuZXhwb3J0IGVudW0gRVJlcG9ydFZpZXdNb2RlbCB7XG5cdFNjYW5uaW5nUmVzdWx0LFxuXHRBbGVydHMsXG5cdEFJVmlldyxcbn1cblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIFZpZXdNb2RlU2VydmljZSBpbXBsZW1lbnRzIE9uRGVzdHJveSB7XG5cdHByaXZhdGUgcmVhZG9ubHkgX3JlcG9ydFZpZXdNb2RlJCA9IG5ldyBCZWhhdmlvclN1YmplY3Q8RVJlcG9ydFZpZXdNb2RlbD4oRVJlcG9ydFZpZXdNb2RlbC5TY2FubmluZ1Jlc3VsdCk7XG5cdHByaXZhdGUgX3NlbGVjdGVkQWxlcnQ6IENvbXBsZXRlUmVzdWx0Tm90aWZpY2F0aW9uQWxlcnQ7XG5cdHByaXZhdGUgX3Vuc3ViID0gbmV3IFN1YmplY3QoKTtcblxuXHRnZXQgcmVwb3J0Vmlld01vZGUkKCkge1xuXHRcdHJldHVybiB0aGlzLl9yZXBvcnRWaWV3TW9kZSQ7XG5cdH1cblxuXHRnZXQgc2VsZWN0ZWRBbGVydCgpIHtcblx0XHRyZXR1cm4gdGhpcy5fc2VsZWN0ZWRBbGVydDtcblx0fVxuXG5cdHNldCBzZWxlY3RlZEFsZXJ0KGFsZXJ0OiBDb21wbGV0ZVJlc3VsdE5vdGlmaWNhdGlvbkFsZXJ0KSB7XG5cdFx0dGhpcy5fc2VsZWN0ZWRBbGVydCA9IGFsZXJ0O1xuXHR9XG5cblx0Y29uc3RydWN0b3IocHJpdmF0ZSByZXBvcnRTZXJ2aWNlOiBSZXBvcnRTZXJ2aWNlKSB7XG5cdFx0dGhpcy5yZXBvcnRTZXJ2aWNlLmNvbXBsZXRlUmVzdWx0JC5waXBlKHRha2VVbnRpbCh0aGlzLl91bnN1YikpLnN1YnNjcmliZShjb21wbGV0ZVJlc3VsdCA9PiB7XG5cdFx0XHRpZiAodGhpcy5yZXBvcnRTZXJ2aWNlLmlzUGxhZ2lhcmlzbUVuYWJsZWQoKSkge1xuXHRcdFx0XHRjb25zdCBoYXNBbGVydHMgPSBjb21wbGV0ZVJlc3VsdD8ubm90aWZpY2F0aW9ucz8uYWxlcnRzPy5maWx0ZXIoXG5cdFx0XHRcdFx0cyA9PiBzLmNvZGUgIT0gQUxFUlRTLlNVU1BFQ1RFRF9BSV9URVhUX0RFVEVDVEVEXG5cdFx0XHRcdCk/Lmxlbmd0aDtcblxuXHRcdFx0XHRjb25zdCBoYXNSZXN1bHRzID1cblx0XHRcdFx0XHQhIWNvbXBsZXRlUmVzdWx0LnJlc3VsdHM/LmJhdGNoPy5sZW5ndGggfHxcblx0XHRcdFx0XHQhIWNvbXBsZXRlUmVzdWx0LnJlc3VsdHM/LmludGVybmV0Py5sZW5ndGggfHxcblx0XHRcdFx0XHQhIWNvbXBsZXRlUmVzdWx0LnJlc3VsdHM/LmRhdGFiYXNlPy5sZW5ndGggfHxcblx0XHRcdFx0XHQhIWNvbXBsZXRlUmVzdWx0LnJlc3VsdHM/LnJlcG9zaXRvcmllcz8ubGVuZ3RoO1xuXG5cdFx0XHRcdGlmIChoYXNBbGVydHMgJiYgIWhhc1Jlc3VsdHMpIHtcblx0XHRcdFx0XHR0aGlzLl9yZXBvcnRWaWV3TW9kZSQubmV4dChFUmVwb3J0Vmlld01vZGVsLkFsZXJ0cyk7XG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSBpZiAodGhpcy5yZXBvcnRTZXJ2aWNlLmlzQWlEZXRlY3Rpb25FbmFibGVkKCkpIHtcblx0XHRcdFx0dGhpcy5zaG93QUlBbGVydFZpZXcoY29tcGxldGVSZXN1bHQpO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHR9XG5cblx0c2hvd0FJQWxlcnRWaWV3KGNvbXBsZXRlUmVzdWx0OiBDb21wbGV0ZVJlc3VsdCkge1xuXHRcdHRoaXMucmVwb3J0U2VydmljZS5jb25maWd1cmUoeyBjb250ZW50TW9kZTogJ3RleHQnIH0pO1xuXG5cdFx0Y29uc3QgYWlBbGVydCA9IGNvbXBsZXRlUmVzdWx0Py5ub3RpZmljYXRpb25zPy5hbGVydHM/LmZpbmQocyA9PiBzLmNvZGUgPT0gQUxFUlRTLlNVU1BFQ1RFRF9BSV9URVhUX0RFVEVDVEVEKTtcblxuXHRcdGlmIChhaUFsZXJ0KSB7XG5cdFx0XHR0aGlzLl9zZWxlY3RlZEFsZXJ0ID0gYWlBbGVydDtcblx0XHR9XG5cblx0XHR0aGlzLl9yZXBvcnRWaWV3TW9kZSQubmV4dChFUmVwb3J0Vmlld01vZGVsLkFJVmlldyk7XG5cdH1cblxuXHQvKipcblx0ICogY2hhbmdlIHRoZSB2aWV3IG9mIHRoZSByZXBvcnRcblx0ICogQHBhcmFtIG1vZGUgdmlldyBtb2RlXG5cdCAqL1xuXHRjaGFuZ2VWaWV3TW9kZSQobW9kZTogRVJlcG9ydFZpZXdNb2RlbCkge1xuXHRcdHRoaXMuX3JlcG9ydFZpZXdNb2RlJC5uZXh0KG1vZGUpO1xuXHR9XG5cblx0LyoqXG5cdCAqIHVuc3Vic2NyaWJlIGZyb20gb2JzZXJ2YWxiZXMgb24gZGVzdHJveVxuXHQgKi9cblx0bmdPbkRlc3Ryb3koKSB7XG5cdFx0dGhpcy5fcmVwb3J0Vmlld01vZGUkLnVuc3Vic2NyaWJlKCk7XG5cdH1cbn1cbiJdfQ==