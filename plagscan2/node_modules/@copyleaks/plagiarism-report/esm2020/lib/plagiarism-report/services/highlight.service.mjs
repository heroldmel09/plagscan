import { Injectable } from '@angular/core';
import { BehaviorSubject, Subject } from 'rxjs';
import { filter, map, withLatestFrom } from 'rxjs/operators';
import { untilDestroy } from '../../shared/operators/untilDestroy';
import * as helpers from '../utils/highlight-helpers';
import * as i0 from "@angular/core";
import * as i1 from "./report.service";
export class HighlightService {
    constructor(reportService) {
        this.reportService = reportService;
        this._originalText = new BehaviorSubject(null);
        this._sourceText = new BehaviorSubject(null);
        this._suspectText = new BehaviorSubject(null);
        this._originalHtml = new BehaviorSubject(null);
        this._sourceHtml = new BehaviorSubject(null);
        this._suspectHtml = new BehaviorSubject(null);
        this._textMatchClick = new Subject();
        this._htmlMatchClick = new Subject();
        this._jump = new Subject();
        this._clear = new Subject();
        this.textMatchClick$.pipe(untilDestroy(this)).subscribe(event => {
            switch (event.origin) {
                case 'original':
                    this.setOriginalTextMatch(event.elem);
                    break;
                case 'source':
                    this.setSourceTextMatch(event.elem);
                    break;
                case 'suspect':
                    this.setSuspectTextMatch(event.elem);
                    break;
            }
        });
    }
    get jump$() {
        return this._jump.asObservable();
    }
    get clear$() {
        return this._clear.asObservable();
    }
    get oneToManyTextMatchClick$() {
        return this.textMatchClick$.pipe(filter(ev => ev.origin === 'original'));
    }
    get oneToOneTextMatchClick$() {
        return this.textMatchClick$.pipe(filter(ev => ev.origin === 'source' || ev.origin === 'suspect'));
    }
    get oneToManyHtmlMatchClick$() {
        return this._htmlMatchClick.asObservable().pipe(withLatestFrom(this.reportService.viewMode$), filter(([, mode]) => mode === 'one-to-many'), map(([event]) => event));
    }
    get oneToOneHtmlMatchClick$() {
        return this._htmlMatchClick.asObservable().pipe(withLatestFrom(this.reportService.viewMode$), filter(([, mode]) => mode === 'one-to-one'), map(([event]) => event));
    }
    get originalText$() {
        return this._originalText.asObservable();
    }
    get sourceText$() {
        return this._sourceText.asObservable();
    }
    get suspectText$() {
        return this._suspectText.asObservable();
    }
    get originalHtml$() {
        return this._originalHtml.asObservable();
    }
    get sourceHtml$() {
        return this._sourceHtml.asObservable();
    }
    get suspectHtml$() {
        return this._suspectHtml.asObservable();
    }
    get textMatchClick$() {
        return this._textMatchClick.asObservable();
    }
    /**
     * Clear the currently selected matches
     * @param mode the mode to clear, leave empty for both
     */
    clear(mode) {
        if (!mode || mode === 'html') {
            this.textMatchClicked({ elem: null, broadcast: false, origin: 'original' });
            this.textMatchClicked({ elem: null, broadcast: false, origin: 'source' });
            this.textMatchClicked({ elem: null, broadcast: false, origin: 'suspect' });
        }
        if (!mode || mode === 'text') {
            this.htmlMatchClicked(null, true);
            this.htmlMatchClicked(null, false);
        }
    }
    /**
     * Pushes a new `TextMatchClickEvent` to the text match click observer
     * @param event The match component that was clicked
     */
    textMatchClicked(event) {
        this._textMatchClick.next(event);
    }
    /**
     * Pushes a new `HtmlMatchClickEvent` to the html match click observer
     * @param match the match data of the clicked element
     * @param isSource `true` if the match comes from the `source` and `false` if it comes from the `suspect`
     */
    htmlMatchClicked(match, isSource) {
        this._htmlMatchClick.next({ match, isSource, broadcast: true });
    }
    /**
     * Pushes the match that should be marked to the original text match observer
     * This will mark/unmark the text match in the original component while in `one-to-many` view mode
     * @param match The match to mark/unmark
     */
    setOriginalTextMatch(next) {
        const prev = this._originalText.value;
        if (prev === next) {
            next = null;
        }
        setTimeout(() => {
            helpers.onTextMatchChange([prev, next]);
        });
        this._originalText.next(next);
    }
    /**
     * Pushes the match that should be marked to the source text match observer
     * This will mark/unmark the text match in the original component while in `one-to-one` view mode
     * @param match The match to mark/unmark
     */
    setSourceTextMatch(next) {
        const prev = this._sourceText.value;
        if (prev === next) {
            next = null;
        }
        setTimeout(() => {
            helpers.onTextMatchChange([prev, next]);
        });
        this._sourceText.next(next);
    }
    /**
     * Pushes the match that should be marked to the suspect text match observer
     * This will mark/unmark the text match in the suspect component while in `one-to-one` view mode
     * @param next The match to mark/unmark
     */
    setSuspectTextMatch(next) {
        const prev = this._suspectText.value;
        if (prev === next) {
            next = null;
        }
        setTimeout(() => {
            helpers.onTextMatchChange([prev, next]);
        });
        this._suspectText.next(next);
    }
    /**
     * Pushes the match that should be marked to the original html match observer
     * This will mark/unmark the html match in the original component while in `one-to-many` view mode
     * @param match The match to mark/unmark
     */
    setOriginalHtmlMatch(match) {
        this._originalHtml.next(match);
    }
    /**
     * Pushes the match that should be marked to the source html match observer
     * This will mark/unmark the html match in the original component while in `one-to-one` view mode
     * @param match The match to mark/unmark
     */
    setSourceHtmlMatch(match) {
        this._sourceHtml.next(match);
    }
    /**
     * Pushes the match that should be marked to the suspect html match observer
     * This will mark/unmark the html match in the suspect component while in `one-to-one` view mode
     * @param match The match to mark/unmark
     */
    setSuspectHtmlMatch(match) {
        this._suspectHtml.next(match);
    }
    /**
     * clear all selected matches
     */
    clearAllMatchs() {
        this.setOriginalTextMatch(null);
        this.setSuspectTextMatch(null);
        this.setOriginalHtmlMatch(null);
        this.setSourceHtmlMatch(null);
        this.setSuspectHtmlMatch(null);
        this.setSourceTextMatch(null);
    }
    /**
     * Push a new jump event to the jump observer
     *
     * @param next `true` to jump to the next match and `false` to jump to the previous match
     */
    jump(next) {
        this._jump.next(next);
    }
    /** dtor */
    ngOnDestroy() {
        this._originalText.complete();
        this._sourceText.complete();
        this._suspectText.complete();
        this._originalHtml.complete();
        this._sourceHtml.complete();
        this._suspectHtml.complete();
        this._jump.complete();
        this._textMatchClick.complete();
        this._htmlMatchClick.complete();
        this._jump.complete();
        this._clear.complete();
    }
}
HighlightService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.3", ngImport: i0, type: HighlightService, deps: [{ token: i1.ReportService }], target: i0.ɵɵFactoryTarget.Injectable });
HighlightService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "13.3.3", ngImport: i0, type: HighlightService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.3", ngImport: i0, type: HighlightService, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i1.ReportService }]; } });
//# sourceMappingURL=data:application/json;base64,