import { Injectable } from '@angular/core';
import { COMPLETE_RESULT_VALIDATION_ERROR, DEFAULT_REPORT_CONFIG, NEW_RESULT_VALIDATION_ERROR, SCAN_RESULT_VALIDATION_ERROR, 
// SCAN_RESULT_VALIDATION_ERROR,
SCAN_SOURCE_VALIDATION_ERROR, VERSION_VALIDATION_ERROR, } from '../utils/constants';
import { BehaviorSubject, Subject } from 'rxjs';
import { take } from 'rxjs/operators';
import * as i0 from "@angular/core";
//import { exit } from 'process';
export class CopyleaksService {
    constructor() {
        this._complete$ = new Subject();
        this._preview$ = new Subject();
        this._source$ = new Subject();
        this._results$ = new Subject();
        this._progress$ = new Subject();
        this._config$ = new BehaviorSubject({ ...DEFAULT_REPORT_CONFIG });
        this._destroy$ = new Subject();
        this._filteredResultsIds$ = new Subject();
        this._scoreUpdate$ = new Subject();
        this._totalResults$ = new Subject();
        this.onCompleteResult$ = this._complete$.asObservable();
        this.onResultPreview$ = this._preview$.asObservable();
        this.onScanSource$ = this._source$.asObservable();
        this.onResultItems$ = this._results$.asObservable();
        this.onProgress$ = this._progress$.asObservable();
        this.onReportConfig$ = this._config$.asObservable();
        this.onTotalResultsChange$ = this._totalResults$.asObservable();
        this.filteredResultsIds$ = this._filteredResultsIds$.asObservable();
        this.scoreUpdate$ = this._scoreUpdate$.asObservable();
        // Delete result by Id
        this.onDeleteResultById$ = new Subject();
        this.onDeleteProccessFinish$ = new Subject();
        this.onDestroy$ = this._destroy$.asObservable();
        // Simple object validation
        this.isCompleteResult = (o) => o && !!o.scannedDocument && !!o.results;
        this.isScanSource = (o) => o && !!o.metadata && !!o.text && !!o.version;
        this.isScanResult = (o) => o && !!o.text && !!o.statistics && !!o.version;
        this.isNewResult = (o) => o && !!o.internet && !!o.database && !!o.batch;
        this.isCorrectVersion = (o) => o && o.version === 3;
    }
    //private readonly cssError = 'font-weight: bold;color:blue;';
    /**
     * set total results (optional)
     * @param totalResults scan total results amount
     */
    setTotalResults(totalResults) {
        this._totalResults$.next(totalResults);
    }
    /**
     * Init/Set the filtered results.
     * @param ids a list of results ids to be filtered.
     * @param newAggregatedScore updated score after filter.
     */
    setFilteredResultsIds(ids, newAggregatedScore) {
        this._filteredResultsIds$.next(ids);
        this._scoreUpdate$.next(newAggregatedScore);
    }
    /**
     * Delete result by id.
     * @param resultId deleted result id
     * @returns updated complete result after deletion
     */
    async deleteResultById(resultId) {
        return new Promise((resolve, reject) => {
            this.onDeleteProccessFinish$.pipe(take(1)).subscribe(res => resolve(res), err => reject(err));
            this.onDeleteResultById$.next(resultId);
        });
    }
    /**
     * Insert the completion result of a scan to the report.
     * @see https://api.copyleaks.com/documentation/v3/webhooks/completed
     * @param result the completed result
     */
    pushCompletedResult(result) {
        if (!this.isCompleteResult(result)) {
            this.showExtendedError(COMPLETE_RESULT_VALIDATION_ERROR, result);
            return;
        }
        this._complete$.next(result);
    }
    showExtendedError(type, userResult) {
        console.error(type.errorText, '\nActual supplied argument:\n', userResult, '\nExpected argument should look like:\n', type.result, '\nFor more info, visit ' + type.visitUrl);
    }
    /**
     * Insert an incoming new scan result to the report.
     * @see https://api.copyleaks.com/documentation/v3/webhooks/new-result
     * @param result the new result
     */
    pushNewResult(result) {
        if (!this.isNewResult(result)) {
            this.showExtendedError(NEW_RESULT_VALIDATION_ERROR, result);
            return;
        }
        [...result.internet, ...result.database, ...result.batch, ...result.repositories].forEach(prev => {
            this._preview$.next(prev);
        });
    }
    /**
     * Insert the downloaded source you scanned to the report.
     * @see https://api.copyleaks.com/documentation/v3/downloads/source
     * @param source the downloaded source
     */
    pushDownloadedSource(source) {
        if (!this.isCorrectVersion(source)) {
            this.showExtendedError(VERSION_VALIDATION_ERROR, source);
            return;
        }
        if (!this.isScanSource(source)) {
            this.showExtendedError(SCAN_SOURCE_VALIDATION_ERROR, source);
            return;
        }
        this._source$.next(source);
    }
    /**
     * Insert one or more downloaded scan result to the report.
     * @see https://api.copyleaks.com/documentation/v3/downloads/result
     * @param results one or more ResultItem object containing the result and the id of the result
     */
    pushScanResult(results) {
        results = [].concat(results);
        for (const { id, result } of results) {
            if (typeof id !== 'string') {
                throw new Error(`Argument "id" must be a string`);
            }
            if (result != null && !this.isScanResult(result)) {
                this.showExtendedError(SCAN_RESULT_VALIDATION_ERROR, result);
                return;
            }
        }
        this._results$.next(results);
    }
    /**
     * Change the progress percentage in the report manualy
     * @param progress an integer between 0 ~ 100
     */
    setProgress(progress) {
        this._progress$.next(progress);
    }
    /**
     * change the report's configuration
     * This function is used to sort the displayed results, you can add your own custom sort by overriding this function
     * @param previews the displayed results
     */
    sortScanResults(previews) {
        return previews.sort((a, b) => b.matchedWords - a.matchedWords);
    }
    /**
     * change the report's configuration
     * allows passing partial configuration that will be complemented by the default configuration
     * @param config the complete/partial configuration object
     */
    setConfig(config) {
        this._config$.next({ ...config });
    }
    /**
     * This method will cause the `destroy$` observable to emit
     */
    notifyDestroy() {
        this._destroy$.next();
        this.setFilteredResultsIds([], null);
    }
}
CopyleaksService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.3", ngImport: i0, type: CopyleaksService, deps: [], target: i0.ɵɵFactoryTarget.Injectable });
CopyleaksService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "13.3.3", ngImport: i0, type: CopyleaksService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.3", ngImport: i0, type: CopyleaksService, decorators: [{
            type: Injectable
        }] });
//# sourceMappingURL=data:application/json;base64,