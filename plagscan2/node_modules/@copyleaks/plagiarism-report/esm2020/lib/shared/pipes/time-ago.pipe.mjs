import { Pipe } from '@angular/core';
import * as i0 from "@angular/core";
import * as i1 from "../../plagiarism-report/services/copyleaks-translate.service";
export class TimeAgoPipe {
    constructor(changeDetectorRef, ngZone, translateService) {
        this.changeDetectorRef = changeDetectorRef;
        this.ngZone = ngZone;
        this.translates = translateService.translations;
    }
    /**
     * A pipe to transform a date string into a human readable string in the format of `X time ago`
     * While updating that string as time goes by
     * @param value date string
     */
    transform(value) {
        this.removeTimer();
        const d = new Date(value);
        const now = new Date();
        const seconds = Math.round(Math.abs((now.getTime() - d.getTime()) / 1000));
        const timeToUpdate = Number.isNaN(seconds) ? 1000 : this.getSecondsUntilUpdate(seconds) * 1000;
        this.timer = this.ngZone.runOutsideAngular(() => {
            if (typeof window !== 'undefined') {
                return window.setTimeout(() => {
                    this.ngZone.run(() => this.changeDetectorRef.markForCheck());
                }, timeToUpdate);
            }
            return null;
        });
        const minutes = Math.round(Math.abs(seconds / 60));
        const hours = Math.round(Math.abs(minutes / 60));
        const days = Math.round(Math.abs(hours / 24));
        const months = Math.round(Math.abs(days / 30.416));
        const years = Math.round(Math.abs(days / 365));
        const timeAgoTranslates = this.translates ? this.translates.TIME_AGO : null;
        if (Number.isNaN(seconds)) {
            return '';
        }
        else if (seconds <= 45) {
            return timeAgoTranslates && timeAgoTranslates.FEW_SECONDS_AGO
                ? timeAgoTranslates.FEW_SECONDS_AGO
                : 'a few seconds ago';
        }
        else if (seconds <= 90) {
            return timeAgoTranslates && timeAgoTranslates.MINUTE_AGO ? timeAgoTranslates.MINUTE_AGO : 'a minute ago';
        }
        else if (minutes <= 45) {
            return (minutes +
                ' ' +
                (timeAgoTranslates && timeAgoTranslates.MINUTES_AGO ? timeAgoTranslates.MINUTES_AGO : 'minutes ago'));
        }
        else if (minutes <= 90) {
            return timeAgoTranslates && timeAgoTranslates.HOUR_AGO ? timeAgoTranslates.HOUR_AGO : 'an hour ago';
        }
        else if (hours <= 22) {
            return (hours + ' ' + (timeAgoTranslates && timeAgoTranslates.HOURS_AGO ? timeAgoTranslates.HOURS_AGO : 'hours ago'));
        }
        else if (hours <= 36) {
            return timeAgoTranslates && timeAgoTranslates.DAY_AGO ? timeAgoTranslates.DAY_AGO : 'a day ago';
        }
        else if (days <= 25) {
            return days + ' ' + (timeAgoTranslates && timeAgoTranslates.DAYS_AGO ? timeAgoTranslates.DAYS_AGO : 'days ago');
        }
        else if (days <= 45) {
            return timeAgoTranslates && timeAgoTranslates.MONTH_AGO ? timeAgoTranslates.MONTH_AGO : 'a month ago';
        }
        else if (days <= 345) {
            return (months + ' ' + (timeAgoTranslates && timeAgoTranslates.MONTHS_AGO ? timeAgoTranslates.MONTHS_AGO : 'months ago'));
        }
        else if (days <= 545) {
            return timeAgoTranslates && timeAgoTranslates.YEAR_AGO ? timeAgoTranslates.YEAR_AGO : 'a year ago';
        }
        else {
            return (years + ' ' + (timeAgoTranslates && timeAgoTranslates.YEARS_AGO ? timeAgoTranslates.YEARS_AGO : 'years ago'));
        }
    }
    /** OnDestroy */
    ngOnDestroy() {
        this.removeTimer();
    }
    /** clear the pipe timer */
    removeTimer() {
        if (this.timer) {
            window.clearTimeout(this.timer);
            this.timer = null;
        }
    }
    /** Returns the number of seconds to wait untill next update based on elapsed seconds */
    getSecondsUntilUpdate(seconds) {
        const min = 60;
        const hr = min * 60;
        const day = hr * 24;
        if (seconds < min) {
            // less than 1 min, update every 2 secs
            return 2;
        }
        else if (seconds < hr) {
            // less than an hour, update every 30 secs
            return 30;
        }
        else if (seconds < day) {
            // less then a day, update every 5 mins
            return 300;
        }
        else {
            // update every hour
            return 3600;
        }
    }
}
TimeAgoPipe.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.3", ngImport: i0, type: TimeAgoPipe, deps: [{ token: i0.ChangeDetectorRef }, { token: i0.NgZone }, { token: i1.CopyleaksTranslateService }], target: i0.ɵɵFactoryTarget.Pipe });
TimeAgoPipe.ɵpipe = i0.ɵɵngDeclarePipe({ minVersion: "12.0.0", version: "13.3.3", ngImport: i0, type: TimeAgoPipe, name: "timeAgo", pure: false });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.3", ngImport: i0, type: TimeAgoPipe, decorators: [{
            type: Pipe,
            args: [{
                    name: 'timeAgo',
                    pure: false,
                }]
        }], ctorParameters: function () { return [{ type: i0.ChangeDetectorRef }, { type: i0.NgZone }, { type: i1.CopyleaksTranslateService }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGltZS1hZ28ucGlwZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL3BsYWdpYXJpc20tcmVwb3J0L3NyYy9saWIvc2hhcmVkL3BpcGVzL3RpbWUtYWdvLnBpcGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLElBQUksRUFBdUQsTUFBTSxlQUFlLENBQUM7OztBQVMxRixNQUFNLE9BQU8sV0FBVztJQUd2QixZQUNTLGlCQUFvQyxFQUNwQyxNQUFjLEVBQ3RCLGdCQUEyQztRQUZuQyxzQkFBaUIsR0FBakIsaUJBQWlCLENBQW1CO1FBQ3BDLFdBQU0sR0FBTixNQUFNLENBQVE7UUFHdEIsSUFBSSxDQUFDLFVBQVUsR0FBRyxnQkFBZ0IsQ0FBQyxZQUFZLENBQUM7SUFDakQsQ0FBQztJQUNEOzs7O09BSUc7SUFDSCxTQUFTLENBQUMsS0FBYTtRQUN0QixJQUFJLENBQUMsV0FBVyxFQUFFLENBQUM7UUFDbkIsTUFBTSxDQUFDLEdBQUcsSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDMUIsTUFBTSxHQUFHLEdBQUcsSUFBSSxJQUFJLEVBQUUsQ0FBQztRQUN2QixNQUFNLE9BQU8sR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsT0FBTyxFQUFFLEdBQUcsQ0FBQyxDQUFDLE9BQU8sRUFBRSxDQUFDLEdBQUcsSUFBSSxDQUFDLENBQUMsQ0FBQztRQUMzRSxNQUFNLFlBQVksR0FBRyxNQUFNLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxxQkFBcUIsQ0FBQyxPQUFPLENBQUMsR0FBRyxJQUFJLENBQUM7UUFDL0YsSUFBSSxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLGlCQUFpQixDQUFDLEdBQUcsRUFBRTtZQUMv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QUFDLEtBQUssR0FBRyxJQUFJLENBQUM7U0FDbEI7SUFDRixDQUFDO0lBQ0Qsd0ZBQXdGO0lBQ2hGLHFCQUFxQixDQUFDLE9BQWU7UUFDNUMsTUFBTSxHQUFHLEdBQUcsRUFBRSxDQUFDO1FBQ2YsTUFBTSxFQUFFLEdBQUcsR0FBRyxHQUFHLEVBQUUsQ0FBQztRQUNwQixNQUFNLEdBQUcsR0FBRyxFQUFFLEdBQUcsRUFBRSxDQUFDO1FBQ3BCLElBQUksT0FBTyxHQUFHLEdBQUcsRUFBRTtZQUNsQix1Q0FBdUM7WUFDdkMsT0FBTyxDQUFDLENBQUM7U0FDVDthQUFNLElBQUksT0FBTyxHQUFHLEVBQUUsRUFBRTtZQUN4QiwwQ0FBMEM7WUFDMUMsT0FBTyxFQUFFLENBQUM7U0FDVjthQUFNLElBQUksT0FBTyxHQUFHLEdBQUcsRUFBRTtZQUN6Qix1Q0FBdUM7WUFDdkMsT0FBTyxHQUFHLENBQUM7U0FDWDthQUFNO1lBQ04sb0JBQW9CO1lBQ3BCLE9BQU8sSUFBSSxDQUFDO1NBQ1o7SUFDRixDQUFDOzt3R0F0R1csV0FBVztzR0FBWCxXQUFXOzJGQUFYLFdBQVc7a0JBSnZCLElBQUk7bUJBQUM7b0JBQ0wsSUFBSSxFQUFFLFNBQVM7b0JBQ2YsSUFBSSxFQUFFLEtBQUs7aUJBQ1giLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBQaXBlLCBQaXBlVHJhbnNmb3JtLCBOZ1pvbmUsIENoYW5nZURldGVjdG9yUmVmLCBPbkRlc3Ryb3kgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7XG5cdENvcHlsZWFrc1RyYW5zbGF0ZVNlcnZpY2UsXG5cdENvcHlsZWFrc1RyYW5zbGF0aW9ucyxcbn0gZnJvbSAnLi4vLi4vcGxhZ2lhcmlzbS1yZXBvcnQvc2VydmljZXMvY29weWxlYWtzLXRyYW5zbGF0ZS5zZXJ2aWNlJztcbkBQaXBlKHtcblx0bmFtZTogJ3RpbWVBZ28nLFxuXHRwdXJlOiBmYWxzZSxcbn0pXG5leHBvcnQgY2xhc3MgVGltZUFnb1BpcGUgaW1wbGVtZW50cyBQaXBlVHJhbnNmb3JtLCBPbkRlc3Ryb3kge1xuXHRwcml2YXRlIHRpbWVyOiBudW1iZXI7XG5cdHByaXZhdGUgdHJhbnNsYXRlczogQ29weWxlYWtzVHJhbnNsYXRpb25zO1xuXHRjb25zdHJ1Y3Rvcihcblx0XHRwcml2YXRlIGNoYW5nZURldGVjdG9yUmVmOiBDaGFuZ2VEZXRlY3RvclJlZixcblx0XHRwcml2YXRlIG5nWm9uZTogTmdab25lLFxuXHRcdHRyYW5zbGF0ZVNlcnZpY2U6IENvcHlsZWFrc1RyYW5zbGF0ZVNlcnZpY2Vcblx0KSB7XG5cdFx0dGhpcy50cmFuc2xhdGVzID0gdHJhbnNsYXRlU2VydmljZS50cmFuc2xhdGlvbnM7XG5cdH1cblx0LyoqXG5cdCAqIEEgcGlwZSB0byB0cmFuc2Zvcm0gYSBkYXRlIHN0cmluZyBpbnRvIGEgaHVtYW4gcmVhZGFibGUgc3RyaW5nIGluIHRoZSBmb3JtYXQgb2YgYFggdGltZSBhZ29gXG5cdCAqIFdoaWxlIHVwZGF0aW5nIHRoYXQgc3RyaW5nIGFzIHRpbWUgZ29lcyBieVxuXHQgKiBAcGFyYW0gdmFsdWUgZGF0ZSBzdHJpbmdcblx0ICovXG5cdHRyYW5zZm9ybSh2YWx1ZTogc3RyaW5nKSB7XG5cdFx0dGhpcy5yZW1vdmVUaW1lcigpO1xuXHRcdGNvbnN0IGQgPSBuZXcgRGF0ZSh2YWx1ZSk7XG5cdFx0Y29uc3Qgbm93ID0gbmV3IERhdGUoKTtcblx0XHRjb25zdCBzZWNvbmRzID0gTWF0aC5yb3VuZChNYXRoLmFicygobm93LmdldFRpbWUoKSAtIGQuZ2V0VGltZSgpKSAvIDEwMDApKTtcblx0XHRjb25zdCB0aW1lVG9VcGRhdGUgPSBOdW1iZXIuaXNOYU4oc2Vjb25kcykgPyAxMDAwIDogdGhpcy5nZXRTZWNvbmRzVW50aWxVcGRhdGUoc2Vjb25kcykgKiAxMDAwO1xuXHRcdHRoaXMudGltZXIgPSB0aGlzLm5nWm9uZS5ydW5PdXRzaWRlQW5ndWxhcigoKSA9PiB7XG5cdFx0XHRpZiAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcpIHtcblx0XHRcdFx0cmV0dXJuICh3aW5kb3cgYXMgYW55KS5zZXRUaW1lb3V0KCgpID0+IHtcblx0XHRcdFx0XHR0aGlzLm5nWm9uZS5ydW4oKCkgPT4gdGhpcy5jaGFuZ2VEZXRlY3RvclJlZi5tYXJrRm9yQ2hlY2soKSk7XG5cdFx0XHRcdH0sIHRpbWVUb1VwZGF0ZSk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gbnVsbDtcblx0XHR9KTtcblx0XHRjb25zdCBtaW51dGVzID0gTWF0aC5yb3VuZChNYXRoLmFicyhzZWNvbmRzIC8gNjApKTtcblx0XHRjb25zdCBob3VycyA9IE1hdGgucm91bmQoTWF0aC5hYnMobWludXRlcyAvIDYwKSk7XG5cdFx0Y29uc3QgZGF5cyA9IE1hdGgucm91bmQoTWF0aC5hYnMoaG91cnMgLyAyNCkpO1xuXHRcdGNvbnN0IG1vbnRocyA9IE1hdGgucm91bmQoTWF0aC5hYnMoZGF5cyAvIDMwLjQxNikpO1xuXHRcdGNvbnN0IHllYXJzID0gTWF0aC5yb3VuZChNYXRoLmFicyhkYXlzIC8gMzY1KSk7XG5cdFx0Y29uc3QgdGltZUFnb1RyYW5zbGF0ZXMgPSB0aGlzLnRyYW5zbGF0ZXMgPyB0aGlzLnRyYW5zbGF0ZXMuVElNRV9BR08gOiBudWxsO1xuXHRcdGlmIChOdW1iZXIuaXNOYU4oc2Vjb25kcykpIHtcblx0XHRcdHJldHVybiAnJztcblx0XHR9IGVsc2UgaWYgKHNlY29uZHMgPD0gNDUpIHtcblx0XHRcdHJldHVybiB0aW1lQWdvVHJhbnNsYXRlcyAmJiB0aW1lQWdvVHJhbnNsYXRlcy5GRVdfU0VDT05EU19BR09cblx0XHRcdFx0PyB0aW1lQWdvVHJhbnNsYXRlcy5GRVdfU0VDT05EU19BR09cblx0XHRcdFx0OiAnYSBmZXcgc2Vjb25kcyBhZ28nO1xuXHRcdH0gZWxzZSBpZiAoc2Vjb25kcyA8PSA5MCkge1xuXHRcdFx0cmV0dXJuIHRpbWVBZ29UcmFuc2xhdGVzICYmIHRpbWVBZ29UcmFuc2xhdGVzLk1JTlVURV9BR08gPyB0aW1lQWdvVHJhbnNsYXRlcy5NSU5VVEVfQUdPIDogJ2EgbWludXRlIGFnbyc7XG5cdFx0fSBlbHNlIGlmIChtaW51dGVzIDw9IDQ1KSB7XG5cdFx0XHRyZXR1cm4gKFxuXHRcdFx0XHRtaW51dGVzICtcblx0XHRcdFx0JyAnICtcblx0XHRcdFx0KHRpbWVBZ29UcmFuc2xhdGVzICYmIHRpbWVBZ29UcmFuc2xhdGVzLk1JTlVURVNfQUdPID8gdGltZUFnb1RyYW5zbGF0ZXMuTUlOVVRFU19BR08gOiAnbWludXRlcyBhZ28nKVxuXHRcdFx0KTtcblx0XHR9IGVsc2UgaWYgKG1pbnV0ZXMgPD0gOTApIHtcblx0XHRcdHJldHVybiB0aW1lQWdvVHJhbnNsYXRlcyAmJiB0aW1lQWdvVHJhbnNsYXRlcy5IT1VSX0FHTyA/IHRpbWVBZ29UcmFuc2xhdGVzLkhPVVJfQUdPIDogJ2FuIGhvdXIgYWdvJztcblx0XHR9IGVsc2UgaWYgKGhvdXJzIDw9IDIyKSB7XG5cdFx0XHRyZXR1cm4gKFxuXHRcdFx0XHRob3VycyArICcgJyArICh0aW1lQWdvVHJhbnNsYXRlcyAmJiB0aW1lQWdvVHJhbnNsYXRlcy5IT1VSU19BR08gPyB0aW1lQWdvVHJhbnNsYXRlcy5IT1VSU19BR08gOiAnaG91cnMgYWdvJylcblx0XHRcdCk7XG5cdFx0fSBlbHNlIGlmIChob3VycyA8PSAzNikge1xuXHRcdFx0cmV0dXJuIHRpbWVBZ29UcmFuc2xhdGVzICYmIHRpbWVBZ29UcmFuc2xhdGVzLkRBWV9BR08gPyB0aW1lQWdvVHJhbnNsYXRlcy5EQVlfQUdPIDogJ2EgZGF5IGFnbyc7XG5cdFx0fSBlbHNlIGlmIChkYXlzIDw9IDI1KSB7XG5cdFx0XHRyZXR1cm4gZGF5cyArICcgJyArICh0aW1lQWdvVHJhbnNsYXRlcyAmJiB0aW1lQWdvVHJhbnNsYXRlcy5EQVlTX0FHTyA/IHRpbWVBZ29UcmFuc2xhdGVzLkRBWVNfQUdPIDogJ2RheXMgYWdvJyk7XG5cdFx0fSBlbHNlIGlmIChkYXlzIDw9IDQ1KSB7XG5cdFx0XHRyZXR1cm4gdGltZUFnb1RyYW5zbGF0ZXMgJiYgdGltZUFnb1RyYW5zbGF0ZXMuTU9OVEhfQUdPID8gdGltZUFnb1RyYW5zbGF0ZXMuTU9OVEhfQUdPIDogJ2EgbW9udGggYWdvJztcblx0XHR9IGVsc2UgaWYgKGRheXMgPD0gMzQ1KSB7XG5cdFx0XHRyZXR1cm4gKFxuXHRcdFx0XHRtb250aHMgKyAnICcgKyAodGltZUFnb1RyYW5zbGF0ZXMgJiYgdGltZUFnb1RyYW5zbGF0ZXMuTU9OVEhTX0FHTyA/IHRpbWVBZ29UcmFuc2xhdGVzLk1PTlRIU19BR08gOiAnbW9udGhzIGFnbycpXG5cdFx0XHQpO1xuXHRcdH0gZWxzZSBpZiAoZGF5cyA8PSA1NDUpIHtcblx0XHRcdHJldHVybiB0aW1lQWdvVHJhbnNsYXRlcyAmJiB0aW1lQWdvVHJhbnNsYXRlcy5ZRUFSX0FHTyA/IHRpbWVBZ29UcmFuc2xhdGVzLllFQVJfQUdPIDogJ2EgeWVhciBhZ28nO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRyZXR1cm4gKFxuXHRcdFx0XHR5ZWFycyArICcgJyArICh0aW1lQWdvVHJhbnNsYXRlcyAmJiB0aW1lQWdvVHJhbnNsYXRlcy5ZRUFSU19BR08gPyB0aW1lQWdvVHJhbnNsYXRlcy5ZRUFSU19BR08gOiAneWVhcnMgYWdvJylcblx0XHRcdCk7XG5cdFx0fVxuXHR9XG5cdC8qKiBPbkRlc3Ryb3kgKi9cblx0bmdPbkRlc3Ryb3koKTogdm9pZCB7XG5cdFx0dGhpcy5yZW1vdmVUaW1lcigpO1xuXHR9XG5cdC8qKiBjbGVhciB0aGUgcGlwZSB0aW1lciAqL1xuXHRwcml2YXRlIHJlbW92ZVRpbWVyKCkge1xuXHRcdGlmICh0aGlzLnRpbWVyKSB7XG5cdFx0XHQod2luZG93IGFzIGFueSkuY2xlYXJUaW1lb3V0KHRoaXMudGltZXIpO1xuXHRcdFx0dGhpcy50aW1lciA9IG51bGw7XG5cdFx0fVxuXHR9XG5cdC8qKiBSZXR1cm5zIHRoZSBudW1iZXIgb2Ygc2Vjb25kcyB0byB3YWl0IHVudGlsbCBuZXh0IHVwZGF0ZSBiYXNlZCBvbiBlbGFwc2VkIHNlY29uZHMgKi9cblx0cHJpdmF0ZSBnZXRTZWNvbmRzVW50aWxVcGRhdGUoc2Vjb25kczogbnVtYmVyKSB7XG5cdFx0Y29uc3QgbWluID0gNjA7XG5cdFx0Y29uc3QgaHIgPSBtaW4gKiA2MDtcblx0XHRjb25zdCBkYXkgPSBociAqIDI0O1xuXHRcdGlmIChzZWNvbmRzIDwgbWluKSB7XG5cdFx0XHQvLyBsZXNzIHRoYW4gMSBtaW4sIHVwZGF0ZSBldmVyeSAyIHNlY3Ncblx0XHRcdHJldHVybiAyO1xuXHRcdH0gZWxzZSBpZiAoc2Vjb25kcyA8IGhyKSB7XG5cdFx0XHQvLyBsZXNzIHRoYW4gYW4gaG91ciwgdXBkYXRlIGV2ZXJ5IDMwIHNlY3Ncblx0XHRcdHJldHVybiAzMDtcblx0XHR9IGVsc2UgaWYgKHNlY29uZHMgPCBkYXkpIHtcblx0XHRcdC8vIGxlc3MgdGhlbiBhIGRheSwgdXBkYXRlIGV2ZXJ5IDUgbWluc1xuXHRcdFx0cmV0dXJuIDMwMDtcblx0XHR9IGVsc2Uge1xuXHRcdFx0Ly8gdXBkYXRlIGV2ZXJ5IGhvdXJcblx0XHRcdHJldHVybiAzNjAwO1xuXHRcdH1cblx0fVxufVxuIl19