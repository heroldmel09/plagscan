import { Pipe } from '@angular/core';
import * as i0 from "@angular/core";
export class ShortNumberPipe {
    constructor() {
        this.powers = [
            { suffix: 'B', value: 10 ** 9 },
            { suffix: 'M', value: 10 ** 6 },
            { suffix: 'K', value: 10 ** 3 },
        ];
    }
    /**
     * A pipe that transforms a number into a human readable string.
     * For example: `1024 => 1K`, `1,111,111 => 1.1M`
     * @param value the number to transform
     * @param precision decimal percision
     */
    transform(value, precision = 1) {
        if (!value || isNaN(value)) {
            return value;
        }
        precision = Math.min(Math.max(precision, 0), 3);
        const abs = Math.abs(value);
        const negative = value < 0;
        const rounder = 10 ** precision;
        const power = this.powers.find(elem => abs >= elem.value);
        let result = abs;
        let key = '';
        if (power) {
            result = abs / power.value;
            result = Math.round(result * rounder) / rounder;
            key = power.suffix;
        }
        return (negative ? '-' : '') + result + key;
    }
}
ShortNumberPipe.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.3", ngImport: i0, type: ShortNumberPipe, deps: [], target: i0.ɵɵFactoryTarget.Pipe });
ShortNumberPipe.ɵpipe = i0.ɵɵngDeclarePipe({ minVersion: "12.0.0", version: "13.3.3", ngImport: i0, type: ShortNumberPipe, name: "shortNumber" });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.3", ngImport: i0, type: ShortNumberPipe, decorators: [{
            type: Pipe,
            args: [{
                    name: 'shortNumber',
                }]
        }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2hvcnQtbnVtYmVyLnBpcGUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9wbGFnaWFyaXNtLXJlcG9ydC9zcmMvbGliL3NoYXJlZC9waXBlcy9zaG9ydC1udW1iZXIucGlwZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsSUFBSSxFQUFpQixNQUFNLGVBQWUsQ0FBQzs7QUFLcEQsTUFBTSxPQUFPLGVBQWU7SUFINUI7UUFJa0IsV0FBTSxHQUFHO1lBQ3pCLEVBQUUsTUFBTSxFQUFFLEdBQUcsRUFBRSxLQUFLLEVBQUUsRUFBRSxJQUFJLENBQUMsRUFBRTtZQUMvQixFQUFFLE1BQU0sRUFBRSxHQUFHLEVBQUUsS0FBSyxFQUFFLEVBQUUsSUFBSSxDQUFDLEVBQUU7WUFDL0IsRUFBRSxNQUFNLEVBQUUsR0FBRyxFQUFFLEtBQUssRUFBRSxFQUFFLElBQUksQ0FBQyxFQUFFO1NBQy9CLENBQUM7S0EwQkY7SUF4QkE7Ozs7O09BS0c7SUFDSCxTQUFTLENBQUMsS0FBVSxFQUFFLFlBQW9CLENBQUM7UUFDMUMsSUFBSSxDQUFDLEtBQUssSUFBSSxLQUFLLENBQUMsS0FBSyxDQUFDLEVBQUU7WUFDM0IsT0FBTyxLQUFLLENBQUM7U0FDYjtRQUNELFNBQVMsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO1FBQ2hELE1BQU0sR0FBRyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDNUIsTUFBTSxRQUFRLEdBQUcsS0FBSyxHQUFHLENBQUMsQ0FBQztRQUMzQixNQUFNLE9BQU8sR0FBRyxFQUFFLElBQUksU0FBUyxDQUFDO1FBQ2hDLE1BQU0sS0FBSyxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsR0FBRyxJQUFJLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUMxRCxJQUFJLE1BQU0sR0FBRyxHQUFHLENBQUM7UUFDakIsSUFBSSxHQUFHLEdBQUcsRUFBRSxDQUFDO1FBQ2IsSUFBSSxLQUFLLEVBQUU7WUFDVixNQUFNLEdBQUcsR0FBRyxHQUFHLEtBQUssQ0FBQyxLQUFLLENBQUM7WUFDM0IsTUFBTSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxHQUFHLE9BQU8sQ0FBQyxHQUFHLE9BQU8sQ0FBQztZQUNoRCxHQUFHLEdBQUcsS0FBSyxDQUFDLE1BQU0sQ0FBQztTQUNuQjtRQUNELE9BQU8sQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEdBQUcsTUFBTSxHQUFHLEdBQUcsQ0FBQztJQUM3QyxDQUFDOzs0R0E5QlcsZUFBZTswR0FBZixlQUFlOzJGQUFmLGVBQWU7a0JBSDNCLElBQUk7bUJBQUM7b0JBQ0wsSUFBSSxFQUFFLGFBQWE7aUJBQ25CIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUGlwZSwgUGlwZVRyYW5zZm9ybSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5AUGlwZSh7XG5cdG5hbWU6ICdzaG9ydE51bWJlcicsXG59KVxuZXhwb3J0IGNsYXNzIFNob3J0TnVtYmVyUGlwZSBpbXBsZW1lbnRzIFBpcGVUcmFuc2Zvcm0ge1xuXHRwcml2YXRlIHJlYWRvbmx5IHBvd2VycyA9IFtcblx0XHR7IHN1ZmZpeDogJ0InLCB2YWx1ZTogMTAgKiogOSB9LFxuXHRcdHsgc3VmZml4OiAnTScsIHZhbHVlOiAxMCAqKiA2IH0sXG5cdFx0eyBzdWZmaXg6ICdLJywgdmFsdWU6IDEwICoqIDMgfSxcblx0XTtcblxuXHQvKipcblx0ICogQSBwaXBlIHRoYXQgdHJhbnNmb3JtcyBhIG51bWJlciBpbnRvIGEgaHVtYW4gcmVhZGFibGUgc3RyaW5nLlxuXHQgKiBGb3IgZXhhbXBsZTogYDEwMjQgPT4gMUtgLCBgMSwxMTEsMTExID0+IDEuMU1gXG5cdCAqIEBwYXJhbSB2YWx1ZSB0aGUgbnVtYmVyIHRvIHRyYW5zZm9ybVxuXHQgKiBAcGFyYW0gcHJlY2lzaW9uIGRlY2ltYWwgcGVyY2lzaW9uXG5cdCAqL1xuXHR0cmFuc2Zvcm0odmFsdWU6IGFueSwgcHJlY2lzaW9uOiBudW1iZXIgPSAxKSB7XG5cdFx0aWYgKCF2YWx1ZSB8fCBpc05hTih2YWx1ZSkpIHtcblx0XHRcdHJldHVybiB2YWx1ZTtcblx0XHR9XG5cdFx0cHJlY2lzaW9uID0gTWF0aC5taW4oTWF0aC5tYXgocHJlY2lzaW9uLCAwKSwgMyk7XG5cdFx0Y29uc3QgYWJzID0gTWF0aC5hYnModmFsdWUpO1xuXHRcdGNvbnN0IG5lZ2F0aXZlID0gdmFsdWUgPCAwO1xuXHRcdGNvbnN0IHJvdW5kZXIgPSAxMCAqKiBwcmVjaXNpb247XG5cdFx0Y29uc3QgcG93ZXIgPSB0aGlzLnBvd2Vycy5maW5kKGVsZW0gPT4gYWJzID49IGVsZW0udmFsdWUpO1xuXHRcdGxldCByZXN1bHQgPSBhYnM7XG5cdFx0bGV0IGtleSA9ICcnO1xuXHRcdGlmIChwb3dlcikge1xuXHRcdFx0cmVzdWx0ID0gYWJzIC8gcG93ZXIudmFsdWU7XG5cdFx0XHRyZXN1bHQgPSBNYXRoLnJvdW5kKHJlc3VsdCAqIHJvdW5kZXIpIC8gcm91bmRlcjtcblx0XHRcdGtleSA9IHBvd2VyLnN1ZmZpeDtcblx0XHR9XG5cdFx0cmV0dXJuIChuZWdhdGl2ZSA/ICctJyA6ICcnKSArIHJlc3VsdCArIGtleTtcblx0fVxufVxuIl19