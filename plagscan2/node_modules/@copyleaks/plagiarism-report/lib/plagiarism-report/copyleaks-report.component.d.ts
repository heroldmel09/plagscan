import { ElementRef, EventEmitter, OnChanges, OnDestroy, OnInit, Renderer2, SimpleChanges } from '@angular/core';
import { CopyleaksReportConfig, ViewMode } from './models/CopyleaksReportConfig';
import { CopyleaksService } from './services/copyleaks.service';
import { DirectionService } from './services/direction.service';
import { ReportService } from './services/report.service';
import { EReportViewModel, ViewModeService } from './services/view-mode.service';
import { ECRPackageProducts } from './models';
import { IconRegistryService } from './services/icon-registry.service';
import * as i0 from "@angular/core";
export declare class CopyleaksReportComponent implements OnInit, OnDestroy, OnChanges {
    private reportService;
    private copyleaksService;
    private viewModeService;
    private directionService;
    el: ElementRef;
    private iconRegistryService;
    readonly typography = true;
    get isOneToOne(): boolean;
    get isOneToMany(): boolean;
    config: CopyleaksReportConfig;
    isPDFDownloading: boolean;
    hideCreationTime: boolean;
    showProductUpgradeButton: boolean;
    showAIContentProperty: boolean;
    configChange: EventEmitter<CopyleaksReportConfig>;
    help: EventEmitter<MouseEvent>;
    share: EventEmitter<MouseEvent>;
    download: EventEmitter<MouseEvent>;
    propertiesExpandChange: EventEmitter<boolean>;
    upgradePlan: EventEmitter<number>;
    upgradeProduct: EventEmitter<ECRPackageProducts>;
    dir: 'rtl' | 'ltr';
    viewMode: ViewMode;
    resultsActive: boolean;
    aaa: boolean;
    hasResultsOverlay: boolean;
    reportViewMode: EReportViewModel;
    eReportViewModel: typeof EReportViewModel;
    constructor(reportService: ReportService, copyleaksService: CopyleaksService, viewModeService: ViewModeService, directionService: DirectionService, el: ElementRef, renderer: Renderer2, iconRegistryService: IconRegistryService);
    /**
     * life-cycle method
     * Initialize the component view mode
     */
    ngOnInit(): void;
    /**
     * Life-cycle method
     * Handles `changes` for input properties
     * @param changes the changes
     */
    ngOnChanges(changes: SimpleChanges): void;
    /**
     * Life-cycle method
     * empty for `untilDestroy` rxjs operator
     */
    ngOnDestroy(): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<CopyleaksReportComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<CopyleaksReportComponent, "cr-copyleaks-report", never, { "config": "config"; "isPDFDownloading": "isPDFDownloading"; "hideCreationTime": "hideCreationTime"; "showProductUpgradeButton": "showProductUpgradeButton"; "showAIContentProperty": "showAIContentProperty"; "dir": "dir"; }, { "configChange": "configChange"; "help": "help"; "share": "share"; "download": "download"; "propertiesExpandChange": "propertiesExpandChange"; "upgradePlan": "upgradePlan"; "upgradeProduct": "upgradeProduct"; }, never, ["cr-custom-report-action"]>;
}
export declare class CustomReportActionComponent {
    static ɵfac: i0.ɵɵFactoryDeclaration<CustomReportActionComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<CustomReportActionComponent, "cr-custom-report-action", never, {}, {}, never, ["*"]>;
}
