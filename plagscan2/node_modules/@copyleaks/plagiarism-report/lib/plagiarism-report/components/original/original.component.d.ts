import { OnDestroy, OnInit, QueryList } from '@angular/core';
import { PageChangeEvent } from '../../../mat-pagination/mat-pagination.component';
import { CompleteResult, ExcludeReason, Match, MatchType, ScanSource, SlicedMatch } from '../../models';
import { ContentMode, DirectionMode, ViewMode } from '../../models/CopyleaksReportConfig';
import { HighlightService } from '../../services/highlight.service';
import { LayoutMediaQueryService } from '../../services/layout-media-query.service';
import { MatchService } from '../../services/match.service';
import { ReportService } from '../../services/report.service';
import { MatchComponent } from '../match/match.component';
import { CopyleaksTranslateService, CopyleaksTranslations } from '../../services/copyleaks-translate.service';
import { ViewModeService } from '../../services/view-mode.service';
import { LiveAnnouncer } from '@angular/cdk/a11y';
import * as i0 from "@angular/core";
export declare class OriginalComponent implements OnInit, OnDestroy {
    private reportService;
    private layoutService;
    private viewModeService;
    private matchService;
    private highlightService;
    private translationService;
    private announcer;
    matchItems: QueryList<MatchComponent>;
    translations: CopyleaksTranslations;
    readonly MatchType: typeof MatchType;
    readonly ExcludeReason: typeof ExcludeReason;
    EXCLUDE_MESSAGE: {
        1: string;
        2: string;
        5: string;
        6: string;
        7: string;
        0: string;
        8: string;
        9: string;
    };
    zoom: number;
    direction: DirectionMode;
    mqPriority: number;
    viewMode: ViewMode;
    completeResult: CompleteResult;
    source: ScanSource;
    contentMode: ContentMode;
    activeMediaQueries: string[];
    highlightedSource: string;
    currentPage: number;
    originalTextMatches: SlicedMatch[][];
    sourceTextMatches: SlicedMatch[][];
    originalHtmlMatches: Match[];
    sourceHtmlMatches: Match[];
    get pages(): number[];
    get hasUrl(): boolean;
    constructor(reportService: ReportService, layoutService: LayoutMediaQueryService, viewModeService: ViewModeService, matchService: MatchService, highlightService: HighlightService, translationService: CopyleaksTranslateService, announcer: LiveAnnouncer);
    /**
     * get the current text matches while considering the current view mode
     */
    get textMatches(): SlicedMatch[][];
    /**
     * get the current html matches while considering the current view mode
     */
    get htmlMatches(): Match[];
    /**
     * `true` if the current view mode is `one-to-many` and `false` if `one-to-one`
     */
    get isOneToMany(): boolean;
    /**
     * `true` if the current content mode is `html` and `false` if `text`
     */
    get isHtml(): boolean;
    /**
     * `true` if the source document has an `html` section
     */
    get hasHtml(): boolean;
    /**
     * `true` if the view mode is alert
     */
    get AlertPreviewViewMode(): boolean;
    /**
     * updates the font size of the suspect text.
     * @param amount a decimal number between 0.5 and 4
     */
    decreaseFontSize(amount?: number): void;
    /**
     * updates the font size of the suspect text.
     * @param amount a decimal number between 0.5 and 4
     */
    increaseFontSize(amount?: number): void;
    /**
     * toggles between `text` and `html` content mode
     */
    toggleContent(): void;
    /**
     * Jump to next match click handler.
     * @param next if `true` jump to next match, otherwise jumpt to previous match
     */
    onJumpToNextMatchClick(next?: boolean): void;
    /**
     * executes when a `MatPaginationComponent` emits the page event
     */
    onPage(event: PageChangeEvent): void;
    /**
     * Life-cycle method
     * subscribe to:
     * - report metadata and source document
     * - view mode and content mode changes
     * - matches from highlight service
     * - layout changes
     */
    ngOnInit(): void;
    /**
     * this will open the origianl/source url in a new tab
     */
    openUrl(): void;
    changeTextAlign(direction: DirectionMode): void;
    /**
     * Life-cycle method
     * empty for `untilDestroy` rxjs operator
     */
    ngOnDestroy(): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<OriginalComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<OriginalComponent, "cr-original", never, {}, {}, ["matchItems"], never>;
}
