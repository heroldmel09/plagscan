import { ComponentFactoryResolver, ComponentRef, EventEmitter, OnDestroy, OnInit, Type, ViewContainerRef } from '@angular/core';
import { MatDialog } from '@angular/material/dialog';
import { CopyleaksReportOptions, CopyleaksTextConfig, ECRPackageProducts, ReportStatistics, ViewMode } from '../../models';
import { IScanSummeryComponent } from '../../models/ScanProperties';
import { CompleteResult, CompleteResultNotificationAlertSeverity } from '../../models/api-models/CompleteResult';
import { CopyleaksTranslateService, CopyleaksTranslations } from '../../services/copyleaks-translate.service';
import { DirectionService } from '../../services/direction.service';
import { LayoutMediaQueryService } from '../../services/layout-media-query.service';
import { ReportService } from '../../services/report.service';
import { StatisticsService } from '../../services/statistics.service';
import { EReportViewModel, ViewModeService } from '../../services/view-mode.service';
import { LiveAnnouncer } from '@angular/cdk/a11y';
import * as i0 from "@angular/core";
export declare class PropertiesComponent implements OnInit, OnDestroy {
    private componentFactoryResolver;
    private reportService;
    private viewModeService;
    private layoutService;
    private dialogService;
    private statistics;
    private directionService;
    private translationsService;
    private announcer;
    isMobile: boolean;
    notifications: any;
    scanSummaryComponent: Type<IScanSummeryComponent>;
    isPDFDownloading: boolean;
    hideCreationTime: boolean;
    expanded: boolean;
    showUpgradeButton: boolean;
    showAIContentProperty: boolean;
    upgrade: EventEmitter<ECRPackageProducts>;
    eCRPackageProducts: typeof ECRPackageProducts;
    expandChange: EventEmitter<any>;
    options: CopyleaksReportOptions;
    stats: ReportStatistics;
    progress?: number;
    help: boolean;
    share: boolean;
    download: boolean;
    settings: boolean;
    previewCount: number;
    hiddenResultsCount: number;
    metadata: CompleteResult;
    viewMode: ViewMode;
    identical: number;
    minor: number;
    related: number;
    totalResults: number;
    notificationSeverity: CompleteResultNotificationAlertSeverity;
    eNotificationSeverities: typeof CompleteResultNotificationAlertSeverity;
    reportViewMode: EReportViewModel;
    eReportViewMode: typeof EReportViewModel;
    customColors: {
        name: string;
        value: string;
    }[];
    chartData: any[];
    loa: any;
    previewsLoading: boolean;
    messages: CopyleaksTextConfig;
    translations: CopyleaksTranslations;
    get btnDownloadTooltip(): string;
    scanSammeryComponentVcr: ViewContainerRef;
    scanSummeryComponentInstance: ComponentRef<IScanSummeryComponent>;
    constructor(componentFactoryResolver: ComponentFactoryResolver, reportService: ReportService, viewModeService: ViewModeService, layoutService: LayoutMediaQueryService, dialogService: MatDialog, statistics: StatisticsService, directionService: DirectionService, translationsService: CopyleaksTranslateService, announcer: LiveAnnouncer);
    get isScanning(): boolean;
    get done(): boolean | ComponentRef<IScanSummeryComponent>;
    get total(): number;
    get combined(): number;
    get hasNonAIAlerts(): boolean;
    get isPlagiarismEnabled(): boolean;
    get plagiarismScore(): number;
    get isAiDetectionEnabled(): boolean;
    get aiScore(): number;
    get severity(): "high" | "low" | "medium";
    get isAlertsView(): boolean;
    get isShowingPartialStats(): boolean;
    get isAiView(): boolean;
    /**
     * this function will move to scanning result view mode
     */
    showScanningResult(): void;
    showAiView(): void;
    /**
     * Help button click handler
     * Passes the click event to `ReportService`
     * @param event native mouse event
     */
    helpClicked(event: MouseEvent): void;
    /**
     * Share button click handler
     * Passes the click event to `ReportService`
     * @param event native mouse event
     */
    shareClicked(event: MouseEvent): void;
    /**
     * Download button click handler
     * Passes the click event to `ReportService`
     * @param event native mouse event
     */
    downloadClicked(event: MouseEvent): void;
    /** Toggle a comparison */
    toggleComparison(type: keyof CopyleaksReportOptions): void;
    /**
     * check if the results overlay component was passed
     */
    private checkAndAddScanSummeryComponent;
    /**
     * Life-cycle method
     * subscribe to:
     * - progress changes
     * - scan metadata
     * - share / download visibility
     * - statistics
     * - layout changes
     */
    ngOnInit(): void;
    /**
     * Displays the settings dialog modal
     */
    openSettingsDialog(): void;
    /**
     * run on properties expand change
     */
    onExpandChange(expanded: boolean): void;
    get resultsFound(): number;
    get totalViewedResults(): number;
    get isShowingOnlyTopResults(): boolean;
    /**
     * Show all hidden results
     */
    showAllResults(): void;
    showAlerts(): void;
    /**
     * Life-cycle method
     * empty for `untilDestroy` rxjs operator
     */
    ngOnDestroy(): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<PropertiesComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<PropertiesComponent, "cr-properties", never, { "scanSummaryComponent": "scanSummaryComponent"; "isPDFDownloading": "isPDFDownloading"; "hideCreationTime": "hideCreationTime"; "expanded": "expanded"; "showUpgradeButton": "showUpgradeButton"; "showAIContentProperty": "showAIContentProperty"; }, { "upgrade": "upgrade"; "expandChange": "expandChange"; }, never, ["*"]>;
}
