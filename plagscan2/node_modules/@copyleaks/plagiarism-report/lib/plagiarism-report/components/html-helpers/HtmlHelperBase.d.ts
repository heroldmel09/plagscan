import { ElementRef, Renderer2 } from '@angular/core';
import { Match, MatchSelectEvent } from '../../models';
import { CopyleaksTranslateService } from '../../services/copyleaks-translate.service';
import { ReportService } from '../../services/report.service';
import * as i0 from "@angular/core";
export declare abstract class HtmlHelperBase {
    protected renderer: Renderer2;
    protected element: ElementRef<HTMLIFrameElement>;
    protected reportService: ReportService;
    protected translateService: CopyleaksTranslateService;
    private EXCLUDE_MESSAGE;
    /** the original html */
    protected html: string;
    /** string representation of the external css that will be inserted to the frame */
    protected style: string;
    /** string representation of the extrnal js that will be inserted to the frmae */
    protected script: string;
    /** the matches to process */
    protected matches: Match[];
    /** sets the seamsless attribute to the iframe */
    readonly seamless = true;
    constructor(renderer: Renderer2, element: ElementRef<HTMLIFrameElement>, reportService: ReportService, translateService: CopyleaksTranslateService);
    /**
     * Handles the `match-select` event
     * @param event the event object containing the match `index`
     */
    abstract handleMatchSelect(event: MatchSelectEvent): void;
    /**
     * Handles PostMessage events, making sure its from the correct iframe.
     * @param event the default PostMessage event
     */
    onFrameMessage(event: any): void;
    /**
     * Handles the 'upgrade-plan' event
     */
    handleUpgradePlanEvent(): void;
    protected get frame(): Window;
    /**
     * Send a message to the iframe using PostMessage API
     * @param data the data to post
     */
    protected messageFrame(data: any): void;
    /**
     * Set the iframe srcdoc html to the given html string
     * @param html the html string
     */
    protected setHtml(html: string): void;
    /**
     * highlight a single match in the iframe
     * @param index the index of the match to mark
     */
    protected markSingleMatchInFrame(index: number): void;
    /**
     * Render list of matches in the iframe's HTML
     * @param matches the matches to render
     */
    protected renderMatches(matches: Match[]): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<HtmlHelperBase, never>;
    static ɵdir: i0.ɵɵDirectiveDeclaration<HtmlHelperBase, never, never, {}, {}, never>;
}
