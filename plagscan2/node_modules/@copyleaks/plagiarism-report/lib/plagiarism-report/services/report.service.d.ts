import { OnDestroy } from '@angular/core';
import { Observable } from 'rxjs';
import { CompleteResult, CopyleaksReportConfig, ResultItem, ResultPreview, ScanSource } from '../models';
import { CopyleaksService } from './copyleaks.service';
import * as i0 from "@angular/core";
/**
 * @todo implement saving options localstorage
 */
export declare class ReportService implements OnDestroy {
    private copyleaksService;
    private _completeResult;
    private _source;
    private _previews;
    private _results;
    private _totalResults;
    private _config;
    private _progress;
    private _hiddenResults;
    private _helpClick;
    private _shareClick;
    private _downloadClick;
    private _planUpgradeEvent;
    private _configChange;
    constructor(copyleaksService: CopyleaksService);
    completeResult$: Observable<CompleteResult>;
    totalResults$: Observable<number>;
    source$: Observable<ScanSource>;
    progress$: Observable<number>;
    /** config observable */
    config$: Observable<CopyleaksReportConfig>;
    /** sub config observeables */
    contentMode$: Observable<import("../models").ContentMode>;
    viewMode$: Observable<import("../models").ViewMode>;
    viewMode: import("../models").ViewMode;
    suspectId$: Observable<string>;
    help$: Observable<boolean>;
    download$: Observable<boolean>;
    settings$: Observable<boolean>;
    share$: Observable<boolean>;
    options$: Observable<import("../models").CopyleaksReportOptions>;
    resultCardActions$: Observable<import("../models").CopyleaksResultCardAction[]>;
    onlyOneToOne$: Observable<boolean>;
    sourcePage$: Observable<number>;
    suspectPage$: Observable<number>;
    suspectResult$: Observable<ResultItem>;
    suspectPreview$: Observable<ResultPreview>;
    hiddenResults$: Observable<string[]>;
    results$: Observable<ResultItem[]>;
    previews$: Observable<ResultPreview[]>;
    filteredPreviews$: Observable<ResultPreview[]>;
    filteredResults$: Observable<ResultItem[]>;
    helpClick$: Observable<MouseEvent>;
    downloadClick$: Observable<MouseEvent>;
    planUpgradeEvent$: Observable<number>;
    shareClick$: Observable<MouseEvent>;
    configChange$: Observable<CopyleaksReportConfig>;
    /**
     * Get an observable of some result by id
     * The observable completes after emitting the result
     * @param id the result id
     */
    findResultById$(id: string): Observable<ResultItem>;
    /**
     * Get an observable of some preview by id
     * The observable completes after emitting the result
     * @param id the preview id
     */
    findPreviewById$(id: string): Observable<ResultPreview>;
    /**
     * Pushes a new complete result that contains the report `metadata` and updates the metadata observer.
     * @param completeResult the complete result object
     */
    setCompleteResult(completeResult: CompleteResult): void;
    /**
     * set the total results observer
     * @param totalResults the total results amount
     */
    setTotalResults(totalResults: number): void;
    /**
     * Pushes a new scan `source` to the source observer
     * @param source the scanned document source
     */
    setSource(source: ScanSource): void;
    /**
     * Pushes a new number to the `progress` observer
     * Should be a positive integer between 0 and 100;
     * if `progress` is equal to 100 then the progress observer will complete.
     * (This behaviour might change in the future)
     * @param progress the progress to display
     */
    setProgress(progress: number): void;
    /**
     * Pushes a new list of `ids` to the hidden results observer
     * @param ids the ids to hide
     */
    setHiddenResults(ids: string[]): void;
    /**
     * Pushes a new `event` to the help-click observer, indicating the help button was clicked
     * @param event native click event
     */
    helpBtnClicked(event: MouseEvent): void;
    /**
     * Pushes a new `event` to the share-click observer, indicating the share button was clicked
     * @param event native click event
     */
    shareBtnClicked(event: MouseEvent): void;
    /**
     * Pushes a new `event` to the download-click observer, indicating the download button was clicked
     * @param event native click event
     */
    downloadBtnClicked(event: MouseEvent): void;
    /**
     * Pushes a new `event` to the plan-upgrade event observer, indicating the plan-upgrade event button was clicked
     */
    upgradePlanEvent(): void;
    /**
     * Push a new `preview` of a result to the previews observer
     * This function does nothing if the complete result is ready
     * or if the preview was allready pushed
     * @param preview the preview to push next
     */
    addPreview(preview: ResultPreview): void;
    /**
     * Pushes an array of new `result`s to the results observable
     * @param resultItems an array containing resultItem elements
     */
    addDownloadedResults(resultItems: ResultItem[]): void;
    /**
     * Edit the current state of the report using either a full or partial configuration object
     * @param config the configuration object
     */
    configure(config: CopyleaksReportConfig): void;
    hasNonAIAlerts(): boolean;
    isPlagiarismEnabled(): boolean;
    isAiDetectionEnabled(): boolean;
    getAiScore(): number;
    /** Completes all subjects to prevent memory leak */
    cleanup(): void;
    /** Clean all subjects and notify that the report has been destroyed */
    ngOnDestroy(): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<ReportService, never>;
    static ɵprov: i0.ɵɵInjectableDeclaration<ReportService>;
}
