import { OnDestroy } from '@angular/core';
import { Match, SlicedMatch } from '../models';
import { ReportService } from './report.service';
import { ViewModeService } from './view-mode.service';
import * as i0 from "@angular/core";
/**
 * Service that calculates the matches highlight positions with respect to the view and content mode.
 * It exposes some observable streams that you can subscribe to and get the newest relevant calculations.
 */
export declare class MatchService implements OnDestroy {
    private reportService;
    private viewModeService;
    private _sourceTextMatches;
    private _sourceHtmlMatches;
    private _suspectTextMatches;
    private _suspectHtmlMatches;
    private _originalTextMatches;
    private _originalHtmlMatches;
    constructor(reportService: ReportService, viewModeService: ViewModeService);
    private get onSourceFirstTextMode$();
    private get onSourceFirstHtmlMode$();
    private get onSourceContentModeChange$();
    private get onSuspectContentModeChange$();
    private get onSuspectFirstTextMode$();
    private get onSuspectFirstHtmlMode$();
    private get onSuspectChange$();
    private get onNewSuspect$();
    /** Emits matches that are relevant to source text one-to-one mode */
    get sourceTextMatches$(): import("rxjs").Observable<SlicedMatch[][]>;
    /** Emits matches that are relevant to source html one-to-one mode */
    get sourceHtmlMatches$(): import("rxjs").Observable<Match[]>;
    /** Emits matches that are relevant to suspect text one-to-one mode */
    get suspectTextMatches$(): import("rxjs").Observable<SlicedMatch[][]>;
    /** Emits matches that are relevant to suspect html one-to-one mode */
    get suspectHtmlMatches$(): import("rxjs").Observable<Match[]>;
    /** Emits matches that are relevant to source text one-to-many mode */
    get originalTextMatches$(): import("rxjs").Observable<SlicedMatch[][]>;
    /** Emits matches that are relevant to source html one-to-many mode */
    get originalHtmlMatches$(): import("rxjs").Observable<Match[]>;
    /**
     * Process matches on the `one-to-one` view mode
     * will calculate the matches when showing `text` or `html` for the first time
     * @param item the result to calculate matches from
     * @param settings the report settings
     * @param source  the scan source
     */
    private processOneToOneMatches;
    /**
     * Process matches on the `one-to-many` view mode
     * will calculate the matches when showing `text` or `html` for the first time
     * @param results the results to calculate matches from
     * @param settings the report settings
     * @param source  the scan source
     */
    private processOneToManyMatches;
    /**
     * Process matches on the `suspected-character-replacement` view mode
     * will calculate the matches when showing `text` or `html` for the first time
     * @param settings the report settings
     * @param source  the scan source
     */
    private processAlertMatches;
    /**
     * dtor
     */
    ngOnDestroy(): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<MatchService, never>;
    static ɵprov: i0.ɵɵInjectableDeclaration<MatchService>;
}
