import { CompleteResult, CopyleaksReportConfig, NewResult, ResultItem, ResultPreview, ScanSource } from '../models';
import { Subject } from 'rxjs';
import * as i0 from "@angular/core";
export declare class CopyleaksService {
    private readonly _complete$;
    private readonly _preview$;
    private readonly _source$;
    private readonly _results$;
    private readonly _progress$;
    private readonly _config$;
    private readonly _destroy$;
    private readonly _filteredResultsIds$;
    private readonly _scoreUpdate$;
    private readonly _totalResults$;
    readonly onCompleteResult$: import("rxjs").Observable<CompleteResult>;
    readonly onResultPreview$: import("rxjs").Observable<ResultPreview>;
    readonly onScanSource$: import("rxjs").Observable<ScanSource>;
    readonly onResultItems$: import("rxjs").Observable<ResultItem[]>;
    readonly onProgress$: import("rxjs").Observable<number>;
    readonly onReportConfig$: import("rxjs").Observable<CopyleaksReportConfig>;
    readonly onTotalResultsChange$: import("rxjs").Observable<number>;
    readonly filteredResultsIds$: import("rxjs").Observable<string[]>;
    readonly scoreUpdate$: import("rxjs").Observable<number>;
    readonly onDeleteResultById$: Subject<string>;
    readonly onDeleteProccessFinish$: Subject<CompleteResult>;
    readonly onDestroy$: import("rxjs").Observable<unknown>;
    /**
     * set total results (optional)
     * @param totalResults scan total results amount
     */
    setTotalResults(totalResults: number): void;
    /**
     * Init/Set the filtered results.
     * @param ids a list of results ids to be filtered.
     * @param newAggregatedScore updated score after filter.
     */
    setFilteredResultsIds(ids: string[], newAggregatedScore: number): void;
    /**
     * Delete result by id.
     * @param resultId deleted result id
     * @returns updated complete result after deletion
     */
    deleteResultById(resultId: string): Promise<CompleteResult>;
    /**
     * Insert the completion result of a scan to the report.
     * @see https://api.copyleaks.com/documentation/v3/webhooks/completed
     * @param result the completed result
     */
    pushCompletedResult(result: CompleteResult): void;
    private showExtendedError;
    /**
     * Insert an incoming new scan result to the report.
     * @see https://api.copyleaks.com/documentation/v3/webhooks/new-result
     * @param result the new result
     */
    pushNewResult(result: NewResult): void;
    /**
     * Insert the downloaded source you scanned to the report.
     * @see https://api.copyleaks.com/documentation/v3/downloads/source
     * @param source the downloaded source
     */
    pushDownloadedSource(source: ScanSource): void;
    /**
     * Insert one or more downloaded scan result to the report.
     * @see https://api.copyleaks.com/documentation/v3/downloads/result
     * @param results one or more ResultItem object containing the result and the id of the result
     */
    pushScanResult(results: ResultItem[] | ResultItem): void;
    /**
     * Change the progress percentage in the report manualy
     * @param progress an integer between 0 ~ 100
     */
    setProgress(progress: number): void;
    /**
     * change the report's configuration
     * This function is used to sort the displayed results, you can add your own custom sort by overriding this function
     * @param previews the displayed results
     */
    sortScanResults(previews: ResultPreview[]): ResultPreview[];
    /**
     * change the report's configuration
     * allows passing partial configuration that will be complemented by the default configuration
     * @param config the complete/partial configuration object
     */
    setConfig(config: CopyleaksReportConfig): void;
    /**
     * This method will cause the `destroy$` observable to emit
     */
    notifyDestroy(): void;
    private isCompleteResult;
    private isScanSource;
    private isScanResult;
    private isNewResult;
    private isCorrectVersion;
    static ɵfac: i0.ɵɵFactoryDeclaration<CopyleaksService, never>;
    static ɵprov: i0.ɵɵInjectableDeclaration<CopyleaksService>;
}
