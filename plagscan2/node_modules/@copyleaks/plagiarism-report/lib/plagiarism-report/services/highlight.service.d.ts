import { OnDestroy } from '@angular/core';
import { MatchComponent } from '../components/match/match.component';
import { ContentMode, Match, ViewMode } from '../models';
import { ReportService } from './report.service';
import * as i0 from "@angular/core";
export declare type ReportOrigin = 'original' | 'source' | 'suspect';
export interface TextMatchHighlightEvent {
    elem: MatchComponent;
    origin: ReportOrigin;
    broadcast: boolean;
}
export interface HtmlMatchClickEvent {
    match: Match;
    isSource: boolean;
    broadcast: boolean;
}
export declare class HighlightService implements OnDestroy {
    private reportService;
    private readonly _originalText;
    private readonly _sourceText;
    private readonly _suspectText;
    private readonly _originalHtml;
    private readonly _sourceHtml;
    private readonly _suspectHtml;
    private readonly _textMatchClick;
    private readonly _htmlMatchClick;
    private readonly _jump;
    private readonly _clear;
    constructor(reportService: ReportService);
    get jump$(): import("rxjs").Observable<boolean>;
    get clear$(): import("rxjs").Observable<ViewMode>;
    get oneToManyTextMatchClick$(): import("rxjs").Observable<TextMatchHighlightEvent>;
    get oneToOneTextMatchClick$(): import("rxjs").Observable<TextMatchHighlightEvent>;
    get oneToManyHtmlMatchClick$(): import("rxjs").Observable<HtmlMatchClickEvent>;
    get oneToOneHtmlMatchClick$(): import("rxjs").Observable<HtmlMatchClickEvent>;
    get originalText$(): import("rxjs").Observable<MatchComponent>;
    get sourceText$(): import("rxjs").Observable<MatchComponent>;
    get suspectText$(): import("rxjs").Observable<MatchComponent>;
    get originalHtml$(): import("rxjs").Observable<Match>;
    get sourceHtml$(): import("rxjs").Observable<Match>;
    get suspectHtml$(): import("rxjs").Observable<Match>;
    get textMatchClick$(): import("rxjs").Observable<TextMatchHighlightEvent>;
    /**
     * Clear the currently selected matches
     * @param mode the mode to clear, leave empty for both
     */
    clear(mode?: ContentMode): void;
    /**
     * Pushes a new `TextMatchClickEvent` to the text match click observer
     * @param event The match component that was clicked
     */
    textMatchClicked(event: TextMatchHighlightEvent): void;
    /**
     * Pushes a new `HtmlMatchClickEvent` to the html match click observer
     * @param match the match data of the clicked element
     * @param isSource `true` if the match comes from the `source` and `false` if it comes from the `suspect`
     */
    htmlMatchClicked(match: Match, isSource: boolean): void;
    /**
     * Pushes the match that should be marked to the original text match observer
     * This will mark/unmark the text match in the original component while in `one-to-many` view mode
     * @param match The match to mark/unmark
     */
    setOriginalTextMatch(next: MatchComponent): void;
    /**
     * Pushes the match that should be marked to the source text match observer
     * This will mark/unmark the text match in the original component while in `one-to-one` view mode
     * @param match The match to mark/unmark
     */
    setSourceTextMatch(next: MatchComponent): void;
    /**
     * Pushes the match that should be marked to the suspect text match observer
     * This will mark/unmark the text match in the suspect component while in `one-to-one` view mode
     * @param next The match to mark/unmark
     */
    setSuspectTextMatch(next: MatchComponent): void;
    /**
     * Pushes the match that should be marked to the original html match observer
     * This will mark/unmark the html match in the original component while in `one-to-many` view mode
     * @param match The match to mark/unmark
     */
    setOriginalHtmlMatch(match: Match): void;
    /**
     * Pushes the match that should be marked to the source html match observer
     * This will mark/unmark the html match in the original component while in `one-to-one` view mode
     * @param match The match to mark/unmark
     */
    setSourceHtmlMatch(match: Match): void;
    /**
     * Pushes the match that should be marked to the suspect html match observer
     * This will mark/unmark the html match in the suspect component while in `one-to-one` view mode
     * @param match The match to mark/unmark
     */
    setSuspectHtmlMatch(match: Match): void;
    /**
     * clear all selected matches
     */
    clearAllMatchs(): void;
    /**
     * Push a new jump event to the jump observer
     *
     * @param next `true` to jump to the next match and `false` to jump to the previous match
     */
    jump(next: boolean): void;
    /** dtor */
    ngOnDestroy(): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<HighlightService, never>;
    static ɵprov: i0.ɵɵInjectableDeclaration<HighlightService>;
}
