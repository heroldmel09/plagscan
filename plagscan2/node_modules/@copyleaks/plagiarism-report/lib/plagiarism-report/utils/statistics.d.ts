import { Match, ComparisonKey, SubjectResultKey, ResultItem, CompleteResult, ReportStatistics, CopyleaksReportOptions } from '../models';
/**
 * Higher order function that returns a function that extracts Match Intervals from a Result
 * @param type name of the match type to extract ( identical | minorChanges | relatedMeaning)
 * @param subject name of the subject to extract from ( source | suspected)
 */
export declare const createWordIntervalsFrom: (type: ComparisonKey, subject: SubjectResultKey) => ({ result }: ResultItem) => Match[];
/**
 * merge consecutive intervals based on start and end index
 * while prioritizing type ( lower is better )
 * this function assumes all intervals are non-distinct (has no gaps)
 */
export declare const mergeWordIntervals: (matches: Match[]) => Match[];
/**
 * split an array of matches into nests where each nest is distinct and nested items are all overlapped
 * @param matches the matches to split
 */
export declare const findNests: (matches: Match[]) => Match[][];
/**
 * merge overlapping matches in a list of matches
 * @param matches the list of matches
 */
export declare const mergeWords: (matches: Match[]) => Match[];
/**
 * calculate statistics using the scan's `completeResult` and a list of `results`
 * @param completeResult the report's complete result
 * @param results the results to calculate statistics from
 */
export declare const calculateStatistics: (completeResult: CompleteResult, results: ResultItem[], options: CopyleaksReportOptions) => ReportStatistics;
