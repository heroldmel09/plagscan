import { InjectionToken } from '@angular/core';
import { CopyleaksReportConfig, CopyleaksReportOptions } from '../models';
import { CopyleaksTextConfig } from '../models/CopyleaksTextConfig';
/** Constants related to `report.service.ts` */
export declare const REPORT_SERVICE_CONSTANTS: {
    RESULTS_SETTINGS_KEY: string;
    BTN_THROTTLE_MS: number;
};
/** A default result options of the report */
export declare const DEFAULT_OPTIONS: CopyleaksReportOptions;
/** The default config of the report component. */
export declare const DEFAULT_REPORT_CONFIG: CopyleaksReportConfig;
/**
 * Default text messages for the report
 */
export declare const DEFAULT_TEXT_CONFIG: CopyleaksTextConfig;
/** Font size unit for increasing/decreasing font size while in `text` content mode */
export declare const TEXT_FONT_SIZE_UNIT = 0.25;
/** Max font size zoom level */
export declare const MAX_TEXT_ZOOM = 4;
/** Min font size zoom level */
export declare const MIN_TEXT_ZOOM = 0.5;
/** User messages for text exclusion cases */
export declare const EXCLUDE_MESSAGE: {
    1: string;
    2: string;
    5: string;
    6: string;
    7: string;
    0: string;
    8: string;
    9: string;
};
/** Injection token used to override the default config of the report */
export declare const COPYLEAKS_CONFIG_INJECTION_TOKEN: InjectionToken<CopyleaksReportConfig>;
/** Injection token used to override the default text messages of the report */
export declare const COPYLEAKS_TEXT_CONFIG_INJECTION_TOKEN: InjectionToken<CopyleaksTextConfig>;
/** The current Copyleaks API version that this library supports */
export declare const CURRENT_API_VERSION = 3;
/** Message used for `CompleteResult` object validation error */
export declare const COMPLETE_RESULT_VALIDATION_ERROR: {
    errorText: string;
    visitUrl: string;
    result: {
        status: number;
        developerPayload: string;
        scannedDocument: {
            scanId: string;
            totalWords: number;
            totalExcluded: number;
            credits: number;
            creationTime: string;
            metadata: {
                finalUrl: string;
                canonicalUrl: string;
                author: string;
                organization: string;
                filename: string;
                publishDate: string;
                creationDate: string;
                lastModificationDate: string;
            };
        };
        results: {
            internet: {
                id: string;
                title: string;
                introduction: string;
                matchedWords: number;
                url: string;
                metadata: {
                    finalUrl: string;
                    canonicalUrl: string;
                    author: string;
                    organization: string;
                    filename: string;
                    publishDate: string;
                    creationDate: string;
                    lastModificationDate: string;
                };
            }[];
            database: {
                id: string;
                title: string;
                introduction: string;
                matchedWords: number;
                scanId: string;
                metadata: {
                    finalUrl: string;
                    canonicalUrl: string;
                    author: string;
                    organization: string;
                    filename: string;
                    publishDate: string;
                    creationDate: string;
                    lastModificationDate: string;
                };
            }[];
            batch: {
                id: string;
                title: string;
                introduction: string;
                matchedWords: number;
                scanId: string;
                metadata: {
                    finalUrl: string;
                    canonicalUrl: string;
                    author: string;
                    organization: string;
                    filename: string;
                    publishDate: string;
                    creationDate: string;
                    lastModificationDate: string;
                };
            }[];
            repositories: {
                id: string;
                title: string;
                introduction: string;
                matchedWords: number;
                repositoryId: string;
                scanId: string;
                metadata: {
                    finalUrl: string;
                    canonicalUrl: string;
                    author: string;
                    organization: string;
                    filename: string;
                    publishDate: string;
                    creationDate: string;
                    lastModificationDate: string;
                    submittedBy: string;
                };
            }[];
            score: {
                identicalWords: number;
                minorChangedWords: number;
                relatedMeaningWords: number;
                aggregatedScore: number;
            };
        };
        downloadableReport: {
            status: string;
            report: string;
        };
        notifications: {
            alerts: {
                code: string;
                title: string;
                message: string;
                helpLink: string;
                severity: number;
                additionalData: string;
            }[];
        };
    };
};
/** Message used for `NewResult` object validation error */
export declare const NEW_RESULT_VALIDATION_ERROR: {
    errorText: string;
    visitUrl: string;
    result: {
        internet: {
            id: string;
            title: string;
            introduction: string;
            matchedWords: number;
            url: string;
            metadata: {
                finalUrl: string;
                canonicalUrl: string;
                author: string;
                organization: string;
                filename: string;
                publishDate: string;
                creationDate: string;
                lastModificationDate: string;
            };
        }[];
        database: {
            id: string;
            title: string;
            introduction: string;
            matchedWords: number;
            scanId: string;
            metadata: {
                finalUrl: string;
                canonicalUrl: string;
                author: string;
                organization: string;
                filename: string;
                publishDate: string;
                creationDate: string;
                lastModificationDate: string;
            };
        }[];
        batch: {
            id: string;
            title: string;
            introduction: string;
            matchedWords: number;
            scanId: string;
            metadata: {
                finalUrl: string;
                canonicalUrl: string;
                author: string;
                organization: string;
                filename: string;
                publishDate: string;
                creationDate: string;
                lastModificationDate: string;
            };
        }[];
        repositories: {
            id: string;
            title: string;
            introduction: string;
            matchedWords: number;
            repositoryId: string;
            scanId: string;
            metadata: {
                finalUrl: string;
                canonicalUrl: string;
                author: string;
                organization: string;
                filename: string;
                publishDate: string;
                creationDate: string;
                lastModificationDate: string;
                submittedBy: string;
            };
        }[];
    };
};
/** Message used for `ScanResult` object validation error */
export declare const SCAN_RESULT_VALIDATION_ERROR: {
    errorText: string;
    visitUrl: string;
    result: {
        statistics: {
            identical: number;
            minorChanges: number;
            relatedMeaning: number;
        };
        text: {
            value: string;
            pages: {
                startPosition: number[];
            };
            comparison: {
                identical: {
                    source: {
                        chars: {
                            starts: number[];
                            lengths: number[];
                        };
                        words: {
                            starts: number[];
                            lengths: number[];
                        };
                    };
                    suspected: {
                        chars: {
                            starts: number[];
                            lengths: number[];
                        };
                        words: {
                            starts: number[];
                            lengths: number[];
                        };
                    };
                };
                minorChanges: {
                    source: {
                        chars: {
                            starts: number[];
                            lengths: number[];
                        };
                        words: {
                            starts: number[];
                            lengths: number[];
                        };
                    };
                    suspected: {
                        chars: {
                            starts: number[];
                            lengths: number[];
                        };
                        words: {
                            starts: number[];
                            lengths: number[];
                        };
                    };
                };
                relatedMeaning: {
                    source: {
                        chars: {
                            starts: number[];
                            lengths: number[];
                        };
                        words: {
                            starts: number[];
                            lengths: number[];
                        };
                    };
                    suspected: {
                        chars: {
                            starts: number[];
                            lengths: number[];
                        };
                        words: {
                            starts: number[];
                            lengths: number[];
                        };
                    };
                };
            };
        };
        html: {
            value: string;
            comparison: {
                identical: {
                    groupId: number[];
                    source: {
                        chars: {
                            starts: number[];
                            lengths: number[];
                        };
                        words: {
                            starts: number[];
                            lengths: number[];
                        };
                    };
                    suspected: {
                        chars: {
                            starts: number[];
                            lengths: number[];
                        };
                        words: {
                            starts: number[];
                            lengths: number[];
                        };
                    };
                };
                minorChanges: {
                    groupId: number[];
                    source: {
                        chars: {
                            starts: number[];
                            lengths: number[];
                        };
                        words: {
                            starts: number[];
                            lengths: number[];
                        };
                    };
                    suspected: {
                        chars: {
                            starts: number[];
                            lengths: number[];
                        };
                        words: {
                            starts: number[];
                            lengths: number[];
                        };
                    };
                };
                relatedMeaning: {
                    groupId: number[];
                    source: {
                        chars: {
                            starts: number[];
                            lengths: number[];
                        };
                        words: {
                            starts: number[];
                            lengths: number[];
                        };
                    };
                    suspected: {
                        chars: {
                            starts: number[];
                            lengths: number[];
                        };
                        words: {
                            starts: number[];
                            lengths: number[];
                        };
                    };
                };
            };
        };
    };
};
/** Message used for `ScanSource` object validation error */
export declare const SCAN_SOURCE_VALIDATION_ERROR: {
    errorText: string;
    visitUrl: string;
    result: {
        metadata: {
            words: number;
            excluded: number;
        };
        html: {
            value: string;
            exclude: {
                starts: number[];
                lengths: number[];
                reasons: number[];
                groupIds: number[];
            };
        };
        text: {
            value: string;
            exclude: {
                starts: number[];
                lengths: number[];
                reasons: number[];
            };
            pages: {
                startPosition: number[];
            };
        };
    };
};
/** Message used for `version` number validation error */
export declare const VERSION_VALIDATION_ERROR: {
    errorText: string;
    visitUrl: string;
    result: {
        version: string;
    };
};
/** Alerts consts */
export declare const ALERTS: {
    SUSPECTED_CHARACTER_REPLACEMENT_CODE: string;
    SUSPECTED_CHEATING_DETECTED_CODE: string;
    SUSPECTED_AI_TEXT_DETECTED: string;
};
