import { Comparison, CompleteResultNotificationAlert, CopyleaksReportOptions, Match, ResultItem, ScanSource, SlicedMatch } from '../models';
/**
 * Takes a list of matches and push the missing gaps as matches with type of MatchType.none
 */
export declare const fillMissingGaps: (intervals: Match[], length: number) => Match[];
/**
 * divide a list of `matches` into nests of none distinct ranges
 * @param matches the base `matches` to process
 */
export declare const findNests: (matches: Match[]) => Match[][];
/**
 * merge a list of matches , removing overlaps while preserving the match attributes
 * @param matches the list of matches
 */
export declare const mergeMatches: (matches: Match[]) => Match[];
/**
 * split `content` according to the given `matches` the result should contain a list of matches
 * for every page according to `pages`
 * @param content a string representing scan **text** or **html**
 * @param pages an array where every element is a start position of a page
 * @param matches `matches` containing the data to slice the `content`
 */
export declare const paginateMatches: (content: string, pages: number[], matches: Match[]) => SlicedMatch[][];
/** A function to extract `identical` matches from the `text` of a `source` document */
export declare const sourceTextIdentical: (item: ResultItem) => Match[];
/** A function to extract `relatedMeaning` matches from the `text` of a `source` document */
export declare const sourceTextRelatedMeaning: (item: ResultItem) => Match[];
/** A function to extract `minorChanges` matches from the `text` of a `source` document */
export declare const sourceTextMinorChanges: (item: ResultItem) => Match[];
/** A function to extract `identical` matches from the `html` of a `source` document */
export declare const sourceHtmlIdentical: (item: ResultItem) => Match[];
/** A function to extract `relatedMeaning` matches from the `html` of a `source` document */
export declare const sourceHtmlRelatedMeaning: (item: ResultItem) => Match[];
/** A function to extract `minorChanges` matches from the `html` of a `source` document */
export declare const sourceHtmlMinorChanges: (item: ResultItem) => Match[];
/** A function to extract `identical` matches from the `text` of a `suspect` document */
export declare const suspectTextIdentical: (item: ResultItem) => Match[];
/** A function to extract `relatedMeaning` matches from the `text` of a `suspect` document */
export declare const suspectTextRelatedMeaning: (item: ResultItem) => Match[];
/** A function to extract `minorChanges` matches from the `text` of a `suspect` document */
export declare const suspectTextMinorChanges: (item: ResultItem) => Match[];
/** A function to extract `identical` matches from the `html` of a `suspect` document */
export declare const suspectHtmlIdentical: (item: ResultItem) => Match[];
/** A function to extract `relatedMeaning` matches from the `html` of a `suspect` document */
export declare const suspectHtmlRelatedMeaning: (item: ResultItem) => Match[];
/** A function to extract `minorChanges` matches from the `html` of a `suspect` document */
export declare const suspectHtmlMinorChanges: (item: ResultItem) => Match[];
/** A function to extract `excluded` matches from the `text` of a `source` document */
export declare const sourceTextExcluded: (source: ScanSource) => Match[];
/** A function to extract `excluded` matches from the `html` of a `source` document */
export declare const sourceHtmlExcluded: (source: ScanSource) => Match[];
/**
 * Locate the respective match start index for a given index in the given comparison.
 * If `fromSource` is set to true, the initial index is assumed to be from the comparison source
 * and therefore will search in the respective `ComparisonData`. Returns a tuple of two indices
 * where the first number is start index of the respective match, and the second is the start index
 * of the closest match to the initially given index
 * @param index a position on the text/html that covers a match
 * @param comparison comparison relevant to the match type and associated content
 * @param fromSource flag indicating that `index` is coming from the source suspect
 */
export declare const findRespectiveStart: (index: number, comparison: Comparison, fromSource?: boolean) => [number, number];
/**
 * This function will process one or more results and generate a list of match intervals that will help
 * highlight the source html with respect to user settings and match type priority
 * @param results one or more result item on which the calculation will be based on
 * @param settings the current user settings
 * @param source the scan source
 * @param text `true` if calculation should base on text comparison, `false` for html
 */
export declare const processSourceText: (results: ResultItem | ResultItem[], settings: CopyleaksReportOptions, source: ScanSource, text?: boolean) => SlicedMatch[][];
/**
 * This function will process notifications and generate a list of match intervals that will help
 * highlight the source text.
 * @param source the scan source
 * @param alertToMatch alert to process
 */
export declare const processSuspectedCharacterMatches: (source: ScanSource, alertToMatch: CompleteResultNotificationAlert) => SlicedMatch[][];
/**
 * This function will process notifications and generate a list of match intervals that will help
 * highlight the source text.
 * @param source the scan source
 * @param alertToMatch alert to process
 */
export declare const processAICheatingMatches: (source: ScanSource, alertToMatch: CompleteResultNotificationAlert) => SlicedMatch[][];
/**
 * This function will process one result and generate a list of match intervals that will help
 * highlight the suspect text with respect to user options and match type priority
 * @param suspect the suspect result item
 * @param options the current user options
 * @param text `true` if calculation should base on text comparison, `false` for html
 */
export declare const processSuspectText: (suspect: ResultItem, options: CopyleaksReportOptions, text?: boolean) => SlicedMatch[][];
/**
 * This function will process one or more results and generate a list of match intervals that will help
 * highlight the source html with respect to user options and match type priority
 * @param results one or more result item on which the calculation will be based on
 * @param options the current user options
 * @param source the scan source
 */
export declare const processSourceHtml: (results: ResultItem | ResultItem[], options: CopyleaksReportOptions, source: ScanSource) => Match[];
/**
 * This function will process one result and generate a list of match intervals that
 * will help highlight the suspect html with respect to user options and match type priority
 * @param suspect the suspect result item
 * @param options the current user options
 */
export declare const processSuspectHtml: (suspect: ResultItem, options: CopyleaksReportOptions) => Match[];
