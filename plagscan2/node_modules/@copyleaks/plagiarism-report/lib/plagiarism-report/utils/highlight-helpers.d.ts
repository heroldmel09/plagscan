import { SlicedMatch, ComparisonCollection, Match } from '../models';
import { MatchComponent } from '../components/match/match.component';
/**
 * Find the respective match for a given match directive element containing a match object
 * If the match is from the source, the return value will contain the source index first, and
 * then the suspect's index, and vice versa.
 * @param match the match directive element
 * @param result the suspect currently viewed
 * @param isSource whether the match comes from the source
 * @returns pair of indices.
 */
export declare const findRespectiveMatch: (match: Match, comparisons: ComparisonCollection, isSource?: boolean) => [number, number];
/**
 * Calculates the page number of where the start position should be
 * @param start the start position
 * @param pages array of start positions
 */
export declare const findRespectivePage: (start: number, pages: number[]) => number;
/**
 * Search source for a match containing the given match's start position and return that match's start position
 * @param start the match to look for
 * @param source the scan source object.
 */
export declare const findPartialMatch: (match: Match, suspect: ComparisonCollection) => number;
/**
 * Locate the index of the next page that contains some match
 * @param matches the matches to look up in
 * @param current the index of the current page
 */
export declare const findNextPageWithMatch: (matches: SlicedMatch[][], current: number) => number;
/**
 * Locate the index of the previouse page that contains some match
 * @param matches the current active matches
 * @param current the index of the current match
 */
export declare const findPrevPageWithMatch: (matches: SlicedMatch[][], current: number) => number;
/**
 * Mark/Unmark the next match component based on the previously marked component
 * @param prev the previously marked/unmarked match
 * @param next the match to mark/unmark next
 * @returns `true` if the match is eventualy highlighted
 */
export declare const onTextMatchChange: ([prev, next]: [MatchComponent, MatchComponent]) => void;
